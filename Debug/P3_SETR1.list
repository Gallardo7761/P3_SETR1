
P3_SETR1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08009240  08009240  0000a240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009658  08009658  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009658  08009658  0000a658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009660  08009660  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009660  08009660  0000a660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009664  08009664  0000a664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009668  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001e8  08009850  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08009850  0000b478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c30  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002938  00000000  00000000  0001be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001e780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af2  00000000  00000000  0001f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274a7  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013178  00000000  00000000  00047551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb739  00000000  00000000  0005a6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145e02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  00145e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014a9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009224 	.word	0x08009224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009224 	.word	0x08009224

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HTS221_UpdateCalibration>:

#define HTS_T1_OUT_LSB 0x3E
#define HTS_T1_OUT_MSB 0x3F


void HTS221_UpdateCalibration(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
	uint8_t buffer;
	uint8_t tempMSB;


	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2230      	movs	r2, #48	@ 0x30
 8000f50:	21be      	movs	r1, #190	@ 0xbe
 8000f52:	48ad      	ldr	r0, [pc, #692]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 8000f54:	f001 ff8c 	bl	8002e70 <HAL_I2C_Mem_Read>
	hts_cal.H0_rH_x2 = buffer / 2.0f;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f62:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6a:	4ba8      	ldr	r3, [pc, #672]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000f70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2301      	movs	r3, #1
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2231      	movs	r2, #49	@ 0x31
 8000f82:	21be      	movs	r1, #190	@ 0xbe
 8000f84:	48a0      	ldr	r0, [pc, #640]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 8000f86:	f001 ff73 	bl	8002e70 <HAL_I2C_Mem_Read>
	hts_cal.H1_rH_x2 = buffer / 2.0f;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f94:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	4b9b      	ldr	r3, [pc, #620]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8000f9e:	edc3 7a01 	vstr	s15, [r3, #4]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_T0_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	1dbb      	adds	r3, r7, #6
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	2235      	movs	r2, #53	@ 0x35
 8000fb4:	21be      	movs	r1, #190	@ 0xbe
 8000fb6:	4894      	ldr	r0, [pc, #592]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 8000fb8:	f001 ff5a 	bl	8002e70 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000fbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2232      	movs	r2, #50	@ 0x32
 8000fce:	21be      	movs	r1, #190	@ 0xbe
 8000fd0:	488d      	ldr	r0, [pc, #564]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 8000fd2:	f001 ff4d 	bl	8002e70 <HAL_I2C_Mem_Read>
	hts_cal.T0_degC_x8 = (((tempMSB & 0x03) <<8) |  buffer) / 8.0f ;
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fea:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8000fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff2:	4b86      	ldr	r3, [pc, #536]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8000ff4:	edc3 7a02 	vstr	s15, [r3, #8]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	2233      	movs	r2, #51	@ 0x33
 800100a:	21be      	movs	r1, #190	@ 0xbe
 800100c:	487e      	ldr	r0, [pc, #504]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 800100e:	f001 ff2f 	bl	8002e70 <HAL_I2C_Mem_Read>
	hts_cal.T1_degC_x8 =  (((tempMSB & 0x0C) <<6) |  buffer) / 8.0f ;
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	019b      	lsls	r3, r3, #6
 8001016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	4313      	orrs	r3, r2
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001026:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800102a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102e:	4b77      	ldr	r3, [pc, #476]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8001030:	edc3 7a03 	vstr	s15, [r3, #12]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8001034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2236      	movs	r2, #54	@ 0x36
 8001046:	21be      	movs	r1, #190	@ 0xbe
 8001048:	486f      	ldr	r0, [pc, #444]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 800104a:	f001 ff11 	bl	8002e70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2237      	movs	r2, #55	@ 0x37
 8001060:	21be      	movs	r1, #190	@ 0xbe
 8001062:	4869      	ldr	r0, [pc, #420]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 8001064:	f001 ff04 	bl	8002e70 <HAL_I2C_Mem_Read>
	hts_cal.H0_T0_OUT = (tempMSB <<8) |  buffer;
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b65      	ldr	r3, [pc, #404]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8001078:	821a      	strh	r2, [r3, #16]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 800107a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	2301      	movs	r3, #1
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	223a      	movs	r2, #58	@ 0x3a
 800108c:	21be      	movs	r1, #190	@ 0xbe
 800108e:	485e      	ldr	r0, [pc, #376]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 8001090:	f001 feee 	bl	8002e70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8001094:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	1dbb      	adds	r3, r7, #6
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	223b      	movs	r2, #59	@ 0x3b
 80010a6:	21be      	movs	r1, #190	@ 0xbe
 80010a8:	4857      	ldr	r0, [pc, #348]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 80010aa:	f001 fee1 	bl	8002e70 <HAL_I2C_Mem_Read>
	hts_cal.H1_T0_OUT = (tempMSB <<8) |  buffer;
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b53      	ldr	r3, [pc, #332]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80010be:	825a      	strh	r2, [r3, #18]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 80010c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	223c      	movs	r2, #60	@ 0x3c
 80010d2:	21be      	movs	r1, #190	@ 0xbe
 80010d4:	484c      	ldr	r0, [pc, #304]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 80010d6:	f001 fecb 	bl	8002e70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	1dbb      	adds	r3, r7, #6
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	223d      	movs	r2, #61	@ 0x3d
 80010ec:	21be      	movs	r1, #190	@ 0xbe
 80010ee:	4846      	ldr	r0, [pc, #280]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 80010f0:	f001 febe 	bl	8002e70 <HAL_I2C_Mem_Read>
	hts_cal.T0_OUT = (tempMSB <<8) |  buffer;
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b42      	ldr	r3, [pc, #264]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8001104:	829a      	strh	r2, [r3, #20]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	223e      	movs	r2, #62	@ 0x3e
 8001118:	21be      	movs	r1, #190	@ 0xbe
 800111a:	483b      	ldr	r0, [pc, #236]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 800111c:	f001 fea8 	bl	8002e70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8001120:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2301      	movs	r3, #1
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	1dbb      	adds	r3, r7, #6
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	223f      	movs	r2, #63	@ 0x3f
 8001132:	21be      	movs	r1, #190	@ 0xbe
 8001134:	4834      	ldr	r0, [pc, #208]	@ (8001208 <HTS221_UpdateCalibration+0x2d0>)
 8001136:	f001 fe9b 	bl	8002e70 <HAL_I2C_Mem_Read>
	hts_cal.T1_OUT = (tempMSB <<8) |  buffer;
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b30      	ldr	r3, [pc, #192]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 800114a:	82da      	strh	r2, [r3, #22]


	hts_cal.ha = (hts_cal.H1_rH_x2 - hts_cal.H0_rH_x2) / (hts_cal.H1_T0_OUT - hts_cal.H0_T0_OUT);
 800114c:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 800114e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001152:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee77 6a67 	vsub.f32	s13, s14, s15
 800115c:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 800115e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001162:	461a      	mov	r2, r3
 8001164:	4b29      	ldr	r3, [pc, #164]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8001166:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 800117a:	edc3 7a06 	vstr	s15, [r3, #24]

	hts_cal.hb = hts_cal.H0_rH_x2 - hts_cal.ha*hts_cal.H0_T0_OUT;
 800117e:	4b23      	ldr	r3, [pc, #140]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8001180:	ed93 7a00 	vldr	s14, [r3]
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 8001186:	edd3 6a06 	vldr	s13, [r3, #24]
 800118a:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 800118c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800119c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011a2:	edc3 7a07 	vstr	s15, [r3, #28]

	hts_cal.ta = (hts_cal.T1_degC_x8 - hts_cal.T0_degC_x8) / (hts_cal.T1_OUT - hts_cal.T0_OUT);
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011b8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011c0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011d4:	edc3 7a08 	vstr	s15, [r3, #32]

	hts_cal.tb = hts_cal.T0_degC_x8 - hts_cal.ha*hts_cal.T0_OUT;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011da:	ed93 7a02 	vldr	s14, [r3, #8]
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011e0:	edd3 6a06 	vldr	s13, [r3, #24]
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011e6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fa:	4b04      	ldr	r3, [pc, #16]	@ (800120c <HTS221_UpdateCalibration+0x2d4>)
 80011fc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000238 	.word	0x20000238
 800120c:	20000204 	.word	0x20000204

08001210 <HTS221_Init>:

void HTS221_Init() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
	uint8_t buffer[1];
	buffer[0] = 0x87;
 8001216:	2387      	movs	r3, #135	@ 0x87
 8001218:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, 0xBE, 0x20, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 800121a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2301      	movs	r3, #1
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	2220      	movs	r2, #32
 800122c:	21be      	movs	r1, #190	@ 0xbe
 800122e:	4804      	ldr	r0, [pc, #16]	@ (8001240 <HTS221_Init+0x30>)
 8001230:	f001 fd0a 	bl	8002c48 <HAL_I2C_Mem_Write>
	HTS221_UpdateCalibration();
 8001234:	f7ff fe80 	bl	8000f38 <HTS221_UpdateCalibration>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000238 	.word	0x20000238

08001244 <HTS221_Read>:

THSample HTS221_Read() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	@ 0x30
 8001248:	af04      	add	r7, sp, #16
	THSample ths;

	uint8_t buffer[4];
	HAL_I2C_Mem_Read(&hi2c2, 0xBE, 0x80 | 0x28, I2C_MEMADD_SIZE_8BIT, buffer, 4, 1000);
 800124a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2304      	movs	r3, #4
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	22a8      	movs	r2, #168	@ 0xa8
 800125e:	21be      	movs	r1, #190	@ 0xbe
 8001260:	4824      	ldr	r0, [pc, #144]	@ (80012f4 <HTS221_Read+0xb0>)
 8001262:	f001 fe05 	bl	8002e70 <HAL_I2C_Mem_Read>

	int16_t hum_raw;
	int16_t temp_raw;

	hum_raw = (buffer[1] << 8) | buffer[0];
 8001266:	7a7b      	ldrb	r3, [r7, #9]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	7a3b      	ldrb	r3, [r7, #8]
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	83fb      	strh	r3, [r7, #30]
	temp_raw = (buffer[3] << 8) | buffer[2];
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7abb      	ldrb	r3, [r7, #10]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	83bb      	strh	r3, [r7, #28]

	ths.hum = hts_cal.ha * hum_raw + hts_cal.hb;
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HTS221_Read+0xb4>)
 8001284:	ed93 7a06 	vldr	s14, [r3, #24]
 8001288:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <HTS221_Read+0xb4>)
 800129a:	edd3 7a07 	vldr	s15, [r3, #28]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	edc7 7a04 	vstr	s15, [r7, #16]
	ths.temp = hts_cal.ta * temp_raw + hts_cal.tb;
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <HTS221_Read+0xb4>)
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012bc:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <HTS221_Read+0xb4>)
 80012be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	edc7 7a03 	vstr	s15, [r7, #12]

	return ths;
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d6:	e883 0003 	stmia.w	r3, {r0, r1}

	return ths;
}
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	ee07 2a10 	vmov	s14, r2
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ea:	eef0 0a67 	vmov.f32	s1, s15
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000238 	.word	0x20000238
 80012f8:	20000204 	.word	0x20000204

080012fc <LPS22_Init>:
#include "stm32l4xx_hal.h"

extern I2C_HandleTypeDef hi2c2;

void LPS22_Init() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af04      	add	r7, sp, #16
	uint8_t buffer[1];
	buffer[0] = 0x42;
 8001302:	2342      	movs	r3, #66	@ 0x42
 8001304:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Write(&hi2c2, 0xBA, 0x10, I2C_MEMADD_SIZE_8BIT, buffer, 1 , 1000);
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2210      	movs	r2, #16
 8001318:	21ba      	movs	r1, #186	@ 0xba
 800131a:	4803      	ldr	r0, [pc, #12]	@ (8001328 <LPS22_Init+0x2c>)
 800131c:	f001 fc94 	bl	8002c48 <HAL_I2C_Mem_Write>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000238 	.word	0x20000238

0800132c <LPS22_ReadPress>:

float LPS22_ReadPress() {
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af04      	add	r7, sp, #16
	float press;

	uint8_t buffer[3];

	HAL_I2C_Mem_Read(&hi2c2, 0xBA, 0x28, I2C_MEMADD_SIZE_8BIT, buffer, 3, 1000);
 8001332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2303      	movs	r3, #3
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	2228      	movs	r2, #40	@ 0x28
 8001344:	21ba      	movs	r1, #186	@ 0xba
 8001346:	480f      	ldr	r0, [pc, #60]	@ (8001384 <LPS22_ReadPress+0x58>)
 8001348:	f001 fd92 	bl	8002e70 <HAL_I2C_Mem_Read>

	uint32_t press_raw = (buffer[2] << 16) | (buffer[1] << 8) | buffer[0];
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	797b      	ldrb	r3, [r7, #5]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4313      	orrs	r3, r2
 8001356:	793a      	ldrb	r2, [r7, #4]
 8001358:	4313      	orrs	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

	press = press_raw / 4096.0f;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001366:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001388 <LPS22_ReadPress+0x5c>
 800136a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136e:	edc7 7a02 	vstr	s15, [r7, #8]

	return press;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	ee07 3a90 	vmov	s15, r3
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000238 	.word	0x20000238
 8001388:	45800000 	.word	0x45800000

0800138c <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139a:	f001 fba1 	bl	8002ae0 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f001 f840 	bl	8002424 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f001 fb97 	bl	8002ae0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f001 f836 	bl	8002424 <HAL_Delay>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <lcd_reset>:

void lcd_reset(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2104      	movs	r1, #4
 80013c4:	4820      	ldr	r0, [pc, #128]	@ (8001448 <lcd_reset+0x8c>)
 80013c6:	f001 fb8b 	bl	8002ae0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2110      	movs	r1, #16
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d2:	f001 fb85 	bl	8002ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2108      	movs	r1, #8
 80013da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013de:	f001 fb7f 	bl	8002ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2110      	movs	r1, #16
 80013e6:	4818      	ldr	r0, [pc, #96]	@ (8001448 <lcd_reset+0x8c>)
 80013e8:	f001 fb7a 	bl	8002ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2102      	movs	r1, #2
 80013f0:	4815      	ldr	r0, [pc, #84]	@ (8001448 <lcd_reset+0x8c>)
 80013f2:	f001 fb75 	bl	8002ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001400:	f001 fb6e 	bl	8002ae0 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	2108      	movs	r1, #8
 8001408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140c:	f001 fb68 	bl	8002ae0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8001410:	2201      	movs	r2, #1
 8001412:	2110      	movs	r1, #16
 8001414:	480c      	ldr	r0, [pc, #48]	@ (8001448 <lcd_reset+0x8c>)
 8001416:	f001 fb63 	bl	8002ae0 <HAL_GPIO_WritePin>
    lcd_clock();
 800141a:	f7ff ffb7 	bl	800138c <lcd_clock>
    lcd_clock();
 800141e:	f7ff ffb5 	bl	800138c <lcd_clock>
    lcd_clock();
 8001422:	f7ff ffb3 	bl	800138c <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2108      	movs	r1, #8
 800142a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142e:	f001 fb57 	bl	8002ae0 <HAL_GPIO_WritePin>
    lcd_clock();
 8001432:	f7ff ffab 	bl	800138c <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	2104      	movs	r1, #4
 800143a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143e:	f001 fb4f 	bl	8002ae0 <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	48000400 	.word	0x48000400

0800144c <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	460a      	mov	r2, r1
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	4613      	mov	r3, r2
 800145a:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800146a:	2201      	movs	r2, #1
 800146c:	2108      	movs	r1, #8
 800146e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001472:	f001 fb35 	bl	8002ae0 <HAL_GPIO_WritePin>
 8001476:	e005      	b.n	8001484 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2108      	movs	r1, #8
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f001 fb2e 	bl	8002ae0 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8001492:	2201      	movs	r2, #1
 8001494:	2110      	movs	r1, #16
 8001496:	4847      	ldr	r0, [pc, #284]	@ (80015b4 <lcd_write+0x168>)
 8001498:	f001 fb22 	bl	8002ae0 <HAL_GPIO_WritePin>
 800149c:	e004      	b.n	80014a8 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2110      	movs	r1, #16
 80014a2:	4844      	ldr	r0, [pc, #272]	@ (80015b4 <lcd_write+0x168>)
 80014a4:	f001 fb1c 	bl	8002ae0 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	099b      	lsrs	r3, r3, #6
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2102      	movs	r1, #2
 80014ba:	483e      	ldr	r0, [pc, #248]	@ (80015b4 <lcd_write+0x168>)
 80014bc:	f001 fb10 	bl	8002ae0 <HAL_GPIO_WritePin>
 80014c0:	e004      	b.n	80014cc <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2102      	movs	r1, #2
 80014c6:	483b      	ldr	r0, [pc, #236]	@ (80015b4 <lcd_write+0x168>)
 80014c8:	f001 fb0a 	bl	8002ae0 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	09db      	lsrs	r3, r3, #7
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80014da:	2201      	movs	r2, #1
 80014dc:	2110      	movs	r1, #16
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f001 fafd 	bl	8002ae0 <HAL_GPIO_WritePin>
 80014e6:	e005      	b.n	80014f4 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2110      	movs	r1, #16
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f0:	f001 faf6 	bl	8002ae0 <HAL_GPIO_WritePin>

    if(rs)
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2104      	movs	r1, #4
 80014fe:	482d      	ldr	r0, [pc, #180]	@ (80015b4 <lcd_write+0x168>)
 8001500:	f001 faee 	bl	8002ae0 <HAL_GPIO_WritePin>
 8001504:	e004      	b.n	8001510 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2104      	movs	r1, #4
 800150a:	482a      	ldr	r0, [pc, #168]	@ (80015b4 <lcd_write+0x168>)
 800150c:	f001 fae8 	bl	8002ae0 <HAL_GPIO_WritePin>

    lcd_clock();
 8001510:	f7ff ff3c 	bl	800138c <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800151e:	2201      	movs	r2, #1
 8001520:	2108      	movs	r1, #8
 8001522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001526:	f001 fadb 	bl	8002ae0 <HAL_GPIO_WritePin>
 800152a:	e005      	b.n	8001538 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2108      	movs	r1, #8
 8001530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001534:	f001 fad4 	bl	8002ae0 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8001546:	2201      	movs	r2, #1
 8001548:	2110      	movs	r1, #16
 800154a:	481a      	ldr	r0, [pc, #104]	@ (80015b4 <lcd_write+0x168>)
 800154c:	f001 fac8 	bl	8002ae0 <HAL_GPIO_WritePin>
 8001550:	e004      	b.n	800155c <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2110      	movs	r1, #16
 8001556:	4817      	ldr	r0, [pc, #92]	@ (80015b4 <lcd_write+0x168>)
 8001558:	f001 fac2 	bl	8002ae0 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	2102      	movs	r1, #2
 800156e:	4811      	ldr	r0, [pc, #68]	@ (80015b4 <lcd_write+0x168>)
 8001570:	f001 fab6 	bl	8002ae0 <HAL_GPIO_WritePin>
 8001574:	e004      	b.n	8001580 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2102      	movs	r1, #2
 800157a:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <lcd_write+0x168>)
 800157c:	f001 fab0 	bl	8002ae0 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 800158e:	2201      	movs	r2, #1
 8001590:	2110      	movs	r1, #16
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f001 faa3 	bl	8002ae0 <HAL_GPIO_WritePin>
 800159a:	e005      	b.n	80015a8 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2110      	movs	r1, #16
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a4:	f001 fa9c 	bl	8002ae0 <HAL_GPIO_WritePin>

    lcd_clock();
 80015a8:	f7ff fef0 	bl	800138c <lcd_clock>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	48000400 	.word	0x48000400

080015b8 <lcd_clear>:

void lcd_clear(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff ff44 	bl	800144c <lcd_write>
    _lcd_char = 0;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <lcd_clear+0x1c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80015ca:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <lcd_clear+0x20>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000234 	.word	0x20000234
 80015d8:	20000235 	.word	0x20000235

080015dc <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	460b      	mov	r3, r1
 80015e8:	71bb      	strb	r3, [r7, #6]
 80015ea:	4613      	mov	r3, r2
 80015ec:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001608:	4313      	orrs	r3, r2
 800160a:	b25b      	sxtb	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff1b 	bl	800144c <lcd_write>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff0a 	bl	800144c <lcd_write>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e055      	b.n	80016fa <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 800164e:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <lcd_print+0xd0>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d01c      	beq.n	8001690 <lcd_print+0x50>
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b0a      	cmp	r3, #10
 8001660:	d116      	bne.n	8001690 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 8001662:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <lcd_print+0xd4>)
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <lcd_print+0xd0>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d242      	bcs.n	80016f4 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800166e:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <lcd_print+0xd8>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b28      	ldr	r3, [pc, #160]	@ (8001714 <lcd_print+0xd4>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	b2c8      	uxtb	r0, r1
 800167a:	4926      	ldr	r1, [pc, #152]	@ (8001714 <lcd_print+0xd4>)
 800167c:	7008      	strb	r0, [r1, #0]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ffcb 	bl	800161e <lcd_display_address>
                _lcd_char = 0;
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <lcd_print+0xdc>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 800168e:	e031      	b.n	80016f4 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <lcd_print+0xe0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01b      	beq.n	80016d0 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 8001698:	4b20      	ldr	r3, [pc, #128]	@ (800171c <lcd_print+0xdc>)
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <lcd_print+0xe0>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d115      	bne.n	80016d0 <lcd_print+0x90>
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <lcd_print+0xd4>)
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <lcd_print+0xd0>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d20f      	bcs.n	80016d0 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <lcd_print+0xd8>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <lcd_print+0xd4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	1c59      	adds	r1, r3, #1
 80016ba:	b2c8      	uxtb	r0, r1
 80016bc:	4915      	ldr	r1, [pc, #84]	@ (8001714 <lcd_print+0xd4>)
 80016be:	7008      	strb	r0, [r1, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffaa 	bl	800161e <lcd_display_address>
                    _lcd_char = 0;
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <lcd_print+0xdc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff feb6 	bl	800144c <lcd_write>
            if(lcd_chars) _lcd_char++;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <lcd_print+0xe0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <lcd_print+0xb4>
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <lcd_print+0xdc>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <lcd_print+0xdc>)
 80016f2:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	3301      	adds	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1a3      	bne.n	800164e <lcd_print+0xe>
        }
    }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000022d 	.word	0x2000022d
 8001714:	20000235 	.word	0x20000235
 8001718:	20000230 	.word	0x20000230
 800171c:	20000234 	.word	0x20000234
 8001720:	2000022c 	.word	0x2000022c

08001724 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	460a      	mov	r2, r1
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	4613      	mov	r3, r2
 8001732:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	011a      	lsls	r2, r3, #4
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	dc0a      	bgt.n	800175a <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b25b      	sxtb	r3, r3
 8001748:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800174c:	b25b      	sxtb	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe7a 	bl	800144c <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 8001758:	e059      	b.n	800180e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	dd17      	ble.n	8001790 <moveToXY+0x6c>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b1f      	cmp	r3, #31
 8001764:	dc14      	bgt.n	8001790 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	425a      	negs	r2, r3
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	f002 020f 	and.w	r2, r2, #15
 8001772:	bf58      	it	pl
 8001774:	4253      	negpl	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3340      	adds	r3, #64	@ 0x40
 800177a:	b2db      	uxtb	r3, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001782:	b25b      	sxtb	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe5f 	bl	800144c <lcd_write>
 800178e:	e03e      	b.n	800180e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b28      	cmp	r3, #40	@ 0x28
 8001794:	dd1b      	ble.n	80017ce <moveToXY+0xaa>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b3b      	cmp	r3, #59	@ 0x3b
 800179a:	dc18      	bgt.n	80017ce <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <moveToXY+0xf4>)
 80017a0:	fb83 1302 	smull	r1, r3, r3, r2
 80017a4:	1119      	asrs	r1, r3, #4
 80017a6:	17d3      	asrs	r3, r2, #31
 80017a8:	1ac9      	subs	r1, r1, r3
 80017aa:	460b      	mov	r3, r1
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	1ad1      	subs	r1, r2, r3
 80017b4:	b2cb      	uxtb	r3, r1
 80017b6:	3314      	adds	r3, #20
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fe40 	bl	800144c <lcd_write>
 80017cc:	e01f      	b.n	800180e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b13      	cmp	r3, #19
 80017d2:	dd1c      	ble.n	800180e <moveToXY+0xea>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b27      	cmp	r3, #39	@ 0x27
 80017d8:	dc19      	bgt.n	800180e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <moveToXY+0xf8>)
 80017de:	fb83 1302 	smull	r1, r3, r3, r2
 80017e2:	4413      	add	r3, r2
 80017e4:	1159      	asrs	r1, r3, #5
 80017e6:	17d3      	asrs	r3, r2, #31
 80017e8:	1ac9      	subs	r1, r1, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	1a5b      	subs	r3, r3, r1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	1ad1      	subs	r1, r2, r3
 80017f4:	b2cb      	uxtb	r3, r1
 80017f6:	3354      	adds	r3, #84	@ 0x54
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001800:	b25b      	sxtb	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fe20 	bl	800144c <lcd_write>
}
 800180c:	e7ff      	b.n	800180e <moveToXY+0xea>
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	66666667 	.word	0x66666667
 800181c:	88888889 	.word	0x88888889

08001820 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(int ch)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	  uint8_t c[1];
	 c[0] = ch & 0x00ff;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(&huart1, &*c, 1, 10);
 800182e:	f107 010c 	add.w	r1, r7, #12
 8001832:	230a      	movs	r3, #10
 8001834:	2201      	movs	r2, #1
 8001836:	4803      	ldr	r0, [pc, #12]	@ (8001844 <__io_putchar+0x24>)
 8001838:	f003 fafc 	bl	8004e34 <HAL_UART_Transmit>
	 return ch;
 800183c:	bf00      	nop
}
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000028c 	.word	0x2000028c

08001848 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	switch (rxByte) {
 8001850:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <HAL_UART_RxCpltCallback+0x8c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b75      	cmp	r3, #117	@ 0x75
 8001856:	d025      	beq.n	80018a4 <HAL_UART_RxCpltCallback+0x5c>
 8001858:	2b75      	cmp	r3, #117	@ 0x75
 800185a:	dc2e      	bgt.n	80018ba <HAL_UART_RxCpltCallback+0x72>
 800185c:	2b63      	cmp	r3, #99	@ 0x63
 800185e:	d009      	beq.n	8001874 <HAL_UART_RxCpltCallback+0x2c>
 8001860:	2b63      	cmp	r3, #99	@ 0x63
 8001862:	db2a      	blt.n	80018ba <HAL_UART_RxCpltCallback+0x72>
 8001864:	3b6d      	subs	r3, #109	@ 0x6d
 8001866:	2b01      	cmp	r3, #1
 8001868:	d827      	bhi.n	80018ba <HAL_UART_RxCpltCallback+0x72>
	  case 'm':
	  case 'n':
		displayMode = rxByte;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <HAL_UART_RxCpltCallback+0x8c>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <HAL_UART_RxCpltCallback+0x90>)
 8001870:	701a      	strb	r2, [r3, #0]
		break;
 8001872:	e026      	b.n	80018c2 <HAL_UART_RxCpltCallback+0x7a>
	  case 'c':
		maxTemp = -100.0; minTemp = 100.0;
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_UART_RxCpltCallback+0x94>)
 8001876:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <HAL_UART_RxCpltCallback+0x98>)
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <HAL_UART_RxCpltCallback+0x9c>)
 800187c:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <HAL_UART_RxCpltCallback+0xa0>)
 800187e:	601a      	str	r2, [r3, #0]
		maxHum = 0.0; minHum = 100.0;
 8001880:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <HAL_UART_RxCpltCallback+0xa4>)
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_UART_RxCpltCallback+0xa8>)
 800188a:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_UART_RxCpltCallback+0xa0>)
 800188c:	601a      	str	r2, [r3, #0]
		maxPress = 0.0; minPress = 2000.0;
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_UART_RxCpltCallback+0xac>)
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_UART_RxCpltCallback+0xb0>)
 8001898:	4a18      	ldr	r2, [pc, #96]	@ (80018fc <HAL_UART_RxCpltCallback+0xb4>)
 800189a:	601a      	str	r2, [r3, #0]
		displayMode = ' ';
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_UART_RxCpltCallback+0x90>)
 800189e:	2220      	movs	r2, #32
 80018a0:	701a      	strb	r2, [r3, #0]
		break;
 80018a2:	e00e      	b.n	80018c2 <HAL_UART_RxCpltCallback+0x7a>
	  case 'u':
		useFahrenheit = !useFahrenheit;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_UART_RxCpltCallback+0xb8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_UART_RxCpltCallback+0xb8>)
 80018b6:	601a      	str	r2, [r3, #0]
		break;
 80018b8:	e003      	b.n	80018c2 <HAL_UART_RxCpltCallback+0x7a>
	  default:
		displayMode = ' ';
 80018ba:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <HAL_UART_RxCpltCallback+0x90>)
 80018bc:	2220      	movs	r2, #32
 80018be:	701a      	strb	r2, [r3, #0]
		break;
 80018c0:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	4903      	ldr	r1, [pc, #12]	@ (80018d4 <HAL_UART_RxCpltCallback+0x8c>)
 80018c6:	480f      	ldr	r0, [pc, #60]	@ (8001904 <HAL_UART_RxCpltCallback+0xbc>)
 80018c8:	f003 fb3e 	bl	8004f48 <HAL_UART_Receive_IT>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000314 	.word	0x20000314
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004
 80018e0:	c2c80000 	.word	0xc2c80000
 80018e4:	20000008 	.word	0x20000008
 80018e8:	42c80000 	.word	0x42c80000
 80018ec:	2000031c 	.word	0x2000031c
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	20000320 	.word	0x20000320
 80018f8:	20000010 	.word	0x20000010
 80018fc:	44fa0000 	.word	0x44fa0000
 8001900:	20000318 	.word	0x20000318
 8001904:	2000028c 	.word	0x2000028c

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	b091      	sub	sp, #68	@ 0x44
 800190c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190e:	f000 fd14 	bl	800233a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001912:	f000 f9d1 	bl	8001cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001916:	f000 fa91 	bl	8001e3c <MX_GPIO_Init>
  MX_I2C2_Init();
 800191a:	f000 fa1f 	bl	8001d5c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800191e:	f000 fa5d 	bl	8001ddc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // LCD44780 INIT
  lcd_reset();
 8001922:	f7ff fd4b 	bl	80013bc <lcd_reset>
  lcd_display_settings(1,0,0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2001      	movs	r0, #1
 800192c:	f7ff fe56 	bl	80015dc <lcd_display_settings>
  lcd_clear();
 8001930:	f7ff fe42 	bl	80015b8 <lcd_clear>

  // LPS22 INIT
  LPS22_Init();
 8001934:	f7ff fce2 	bl	80012fc <LPS22_Init>

  // HTS221 INIT
  HTS221_Init();
 8001938:	f7ff fc6a 	bl	8001210 <HTS221_Init>

  // USART INTERRUPTIONS
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 800193c:	2201      	movs	r2, #1
 800193e:	49a4      	ldr	r1, [pc, #656]	@ (8001bd0 <main+0x2c8>)
 8001940:	48a4      	ldr	r0, [pc, #656]	@ (8001bd4 <main+0x2cc>)
 8001942:	f003 fb01 	bl	8004f48 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t str[20];
	  float pressure = LPS22_ReadPress();
 8001946:	f7ff fcf1 	bl	800132c <LPS22_ReadPress>
 800194a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	  THSample ths = HTS221_Read();
 800194e:	f7ff fc79 	bl	8001244 <HTS221_Read>
 8001952:	eeb0 7a40 	vmov.f32	s14, s0
 8001956:	eef0 7a60 	vmov.f32	s15, s1
 800195a:	ed87 7a00 	vstr	s14, [r7]
 800195e:	edc7 7a01 	vstr	s15, [r7, #4]

	  if (ths.temp > maxTemp) maxTemp = ths.temp;
 8001962:	ed97 7a00 	vldr	s14, [r7]
 8001966:	4b9c      	ldr	r3, [pc, #624]	@ (8001bd8 <main+0x2d0>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	dd02      	ble.n	800197c <main+0x74>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4a97      	ldr	r2, [pc, #604]	@ (8001bd8 <main+0x2d0>)
 800197a:	6013      	str	r3, [r2, #0]
	  if (ths.temp < minTemp) minTemp = ths.temp;
 800197c:	ed97 7a00 	vldr	s14, [r7]
 8001980:	4b96      	ldr	r3, [pc, #600]	@ (8001bdc <main+0x2d4>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	d502      	bpl.n	8001996 <main+0x8e>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4a92      	ldr	r2, [pc, #584]	@ (8001bdc <main+0x2d4>)
 8001994:	6013      	str	r3, [r2, #0]
	  if (ths.hum > maxHum) maxHum = ths.hum;
 8001996:	ed97 7a01 	vldr	s14, [r7, #4]
 800199a:	4b91      	ldr	r3, [pc, #580]	@ (8001be0 <main+0x2d8>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	dd02      	ble.n	80019b0 <main+0xa8>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a8c      	ldr	r2, [pc, #560]	@ (8001be0 <main+0x2d8>)
 80019ae:	6013      	str	r3, [r2, #0]
	  if (ths.hum < minHum) minHum = ths.hum;
 80019b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b4:	4b8b      	ldr	r3, [pc, #556]	@ (8001be4 <main+0x2dc>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d502      	bpl.n	80019ca <main+0xc2>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a87      	ldr	r2, [pc, #540]	@ (8001be4 <main+0x2dc>)
 80019c8:	6013      	str	r3, [r2, #0]
	  if (pressure > maxPress) maxPress = pressure;
 80019ca:	4b87      	ldr	r3, [pc, #540]	@ (8001be8 <main+0x2e0>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80019d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	dd02      	ble.n	80019e4 <main+0xdc>
 80019de:	4a82      	ldr	r2, [pc, #520]	@ (8001be8 <main+0x2e0>)
 80019e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e2:	6013      	str	r3, [r2, #0]
	  if (pressure < minPress) minPress = pressure;
 80019e4:	4b81      	ldr	r3, [pc, #516]	@ (8001bec <main+0x2e4>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80019ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	d502      	bpl.n	80019fe <main+0xf6>
 80019f8:	4a7c      	ldr	r2, [pc, #496]	@ (8001bec <main+0x2e4>)
 80019fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fc:	6013      	str	r3, [r2, #0]

	  float tempToShow = useFahrenheit ? (ths.temp * 9.0 / 5.0) + 32 : ths.temp; // convertir a ºF si es necesario
 80019fe:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf0 <main+0x2e8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d022      	beq.n	8001a4c <main+0x144>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd9d 	bl	8000548 <__aeabi_f2d>
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b78      	ldr	r3, [pc, #480]	@ (8001bf4 <main+0x2ec>)
 8001a14:	f7fe fdf0 	bl	80005f8 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	4b74      	ldr	r3, [pc, #464]	@ (8001bf8 <main+0x2f0>)
 8001a26:	f7fe ff11 	bl	800084c <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	4b71      	ldr	r3, [pc, #452]	@ (8001bfc <main+0x2f4>)
 8001a38:	f7fe fc28 	bl	800028c <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f8b0 	bl	8000ba8 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	e000      	b.n	8001a4e <main+0x146>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  float pressureToShow = useFahrenheit ? pressure * 0.75006 : pressure; // convertir a mmHg si es necesario
 8001a50:	4b67      	ldr	r3, [pc, #412]	@ (8001bf0 <main+0x2e8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00f      	beq.n	8001a78 <main+0x170>
 8001a58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a5a:	f7fe fd75 	bl	8000548 <__aeabi_f2d>
 8001a5e:	a35a      	add	r3, pc, #360	@ (adr r3, 8001bc8 <main+0x2c0>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fdc8 	bl	80005f8 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f89a 	bl	8000ba8 <__aeabi_d2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	e000      	b.n	8001a7a <main+0x172>
 8001a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
	  char tempUnit = useFahrenheit ? 'F' : 'C';
 8001a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf0 <main+0x2e8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <main+0x180>
 8001a84:	2346      	movs	r3, #70	@ 0x46
 8001a86:	e000      	b.n	8001a8a <main+0x182>
 8001a88:	2343      	movs	r3, #67	@ 0x43
 8001a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  const char *pressUnit = useFahrenheit ? "mmHg" : "hPa";
 8001a8e:	4b58      	ldr	r3, [pc, #352]	@ (8001bf0 <main+0x2e8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <main+0x192>
 8001a96:	4b5a      	ldr	r3, [pc, #360]	@ (8001c00 <main+0x2f8>)
 8001a98:	e000      	b.n	8001a9c <main+0x194>
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c04 <main+0x2fc>)
 8001a9c:	61fb      	str	r3, [r7, #28]

	  switch (displayMode) {
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c08 <main+0x300>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b6d      	cmp	r3, #109	@ 0x6d
 8001aa4:	d002      	beq.n	8001aac <main+0x1a4>
 8001aa6:	2b6e      	cmp	r3, #110	@ 0x6e
 8001aa8:	d047      	beq.n	8001b3a <main+0x232>
 8001aaa:	e0b7      	b.n	8001c1c <main+0x314>
	      case 'm':
	          sprintf(str, "Max: %.1f%c %.1f%%", maxTemp, tempUnit, maxHum);
 8001aac:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd8 <main+0x2d0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd49 	bl	8000548 <__aeabi_f2d>
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	460d      	mov	r5, r1
 8001aba:	f897 6023 	ldrb.w	r6, [r7, #35]	@ 0x23
 8001abe:	4b48      	ldr	r3, [pc, #288]	@ (8001be0 <main+0x2d8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd40 	bl	8000548 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	f107 0008 	add.w	r0, r7, #8
 8001ad0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ad4:	9600      	str	r6, [sp, #0]
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	462b      	mov	r3, r5
 8001ada:	494c      	ldr	r1, [pc, #304]	@ (8001c0c <main+0x304>)
 8001adc:	f005 fa72 	bl	8006fc4 <siprintf>
	          moveToXY(0, 0);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fe1e 	bl	8001724 <moveToXY>
	          lcd_print(str);
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fda7 	bl	8001640 <lcd_print>
	          printf("%s\n\r", str);  // Enviar a consola UART
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	4845      	ldr	r0, [pc, #276]	@ (8001c10 <main+0x308>)
 8001afa:	f005 fa51 	bl	8006fa0 <iprintf>

	          sprintf(str, "Pres: %.1f%s", maxPress, pressUnit);
 8001afe:	4b3a      	ldr	r3, [pc, #232]	@ (8001be8 <main+0x2e0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd20 	bl	8000548 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	f107 0008 	add.w	r0, r7, #8
 8001b10:	69f9      	ldr	r1, [r7, #28]
 8001b12:	9100      	str	r1, [sp, #0]
 8001b14:	493f      	ldr	r1, [pc, #252]	@ (8001c14 <main+0x30c>)
 8001b16:	f005 fa55 	bl	8006fc4 <siprintf>
	          moveToXY(1, 1);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f7ff fe01 	bl	8001724 <moveToXY>
	          lcd_print(str);
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fd8a 	bl	8001640 <lcd_print>
	          printf("%s\n\r", str);  // Enviar a consola UART
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	4837      	ldr	r0, [pc, #220]	@ (8001c10 <main+0x308>)
 8001b34:	f005 fa34 	bl	8006fa0 <iprintf>
	          break;
 8001b38:	e0b2      	b.n	8001ca0 <main+0x398>

	      case 'n':
	          sprintf(str, "Min: %.1f%c %.1f%%", minTemp, tempUnit, minHum);
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <main+0x2d4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd02 	bl	8000548 <__aeabi_f2d>
 8001b44:	4604      	mov	r4, r0
 8001b46:	460d      	mov	r5, r1
 8001b48:	f897 6023 	ldrb.w	r6, [r7, #35]	@ 0x23
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <main+0x2dc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fcf9 	bl	8000548 <__aeabi_f2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	f107 0008 	add.w	r0, r7, #8
 8001b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b62:	9600      	str	r6, [sp, #0]
 8001b64:	4622      	mov	r2, r4
 8001b66:	462b      	mov	r3, r5
 8001b68:	492b      	ldr	r1, [pc, #172]	@ (8001c18 <main+0x310>)
 8001b6a:	f005 fa2b 	bl	8006fc4 <siprintf>
	          moveToXY(0, 0);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff fdd7 	bl	8001724 <moveToXY>
	          lcd_print(str);
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fd60 	bl	8001640 <lcd_print>
	          printf("%s\n\r", str);  // Enviar a consola UART
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	4619      	mov	r1, r3
 8001b86:	4822      	ldr	r0, [pc, #136]	@ (8001c10 <main+0x308>)
 8001b88:	f005 fa0a 	bl	8006fa0 <iprintf>

	          sprintf(str, "Pres: %.1f%s", minPress, pressUnit);
 8001b8c:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <main+0x2e4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcd9 	bl	8000548 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	f107 0008 	add.w	r0, r7, #8
 8001b9e:	69f9      	ldr	r1, [r7, #28]
 8001ba0:	9100      	str	r1, [sp, #0]
 8001ba2:	491c      	ldr	r1, [pc, #112]	@ (8001c14 <main+0x30c>)
 8001ba4:	f005 fa0e 	bl	8006fc4 <siprintf>
	          moveToXY(1, 1);
 8001ba8:	2101      	movs	r1, #1
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff fdba 	bl	8001724 <moveToXY>
	          lcd_print(str);
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fd43 	bl	8001640 <lcd_print>
	          printf("%s\n\r", str);  // Enviar a consola UART
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4813      	ldr	r0, [pc, #76]	@ (8001c10 <main+0x308>)
 8001bc2:	f005 f9ed 	bl	8006fa0 <iprintf>
	          break;
 8001bc6:	e06b      	b.n	8001ca0 <main+0x398>
 8001bc8:	d4413554 	.word	0xd4413554
 8001bcc:	3fe8007d 	.word	0x3fe8007d
 8001bd0:	20000314 	.word	0x20000314
 8001bd4:	2000028c 	.word	0x2000028c
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	2000031c 	.word	0x2000031c
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	20000320 	.word	0x20000320
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	20000318 	.word	0x20000318
 8001bf4:	40220000 	.word	0x40220000
 8001bf8:	40140000 	.word	0x40140000
 8001bfc:	40400000 	.word	0x40400000
 8001c00:	08009240 	.word	0x08009240
 8001c04:	08009248 	.word	0x08009248
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	0800924c 	.word	0x0800924c
 8001c10:	08009260 	.word	0x08009260
 8001c14:	08009268 	.word	0x08009268
 8001c18:	08009278 	.word	0x08009278

	      default:
	          sprintf(str, "T:%.1f%c H:%.1f%%", tempToShow, tempUnit, ths.hum);
 8001c1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c1e:	f7fe fc93 	bl	8000548 <__aeabi_f2d>
 8001c22:	4604      	mov	r4, r0
 8001c24:	460d      	mov	r5, r1
 8001c26:	f897 6023 	ldrb.w	r6, [r7, #35]	@ 0x23
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc8b 	bl	8000548 <__aeabi_f2d>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	f107 0008 	add.w	r0, r7, #8
 8001c3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c3e:	9600      	str	r6, [sp, #0]
 8001c40:	4622      	mov	r2, r4
 8001c42:	462b      	mov	r3, r5
 8001c44:	4919      	ldr	r1, [pc, #100]	@ (8001cac <main+0x3a4>)
 8001c46:	f005 f9bd 	bl	8006fc4 <siprintf>
	          moveToXY(0, 0);
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7ff fd69 	bl	8001724 <moveToXY>
	          lcd_print(str);
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fcf2 	bl	8001640 <lcd_print>
	          printf("%s\n\r", str);  // Enviar a consola UART
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4619      	mov	r1, r3
 8001c62:	4813      	ldr	r0, [pc, #76]	@ (8001cb0 <main+0x3a8>)
 8001c64:	f005 f99c 	bl	8006fa0 <iprintf>

	          sprintf(str, "Pres: %.1f%s", pressureToShow, pressUnit);
 8001c68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c6a:	f7fe fc6d 	bl	8000548 <__aeabi_f2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	f107 0008 	add.w	r0, r7, #8
 8001c76:	69f9      	ldr	r1, [r7, #28]
 8001c78:	9100      	str	r1, [sp, #0]
 8001c7a:	490e      	ldr	r1, [pc, #56]	@ (8001cb4 <main+0x3ac>)
 8001c7c:	f005 f9a2 	bl	8006fc4 <siprintf>
	          moveToXY(1, 1);
 8001c80:	2101      	movs	r1, #1
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff fd4e 	bl	8001724 <moveToXY>
	          lcd_print(str);
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fcd7 	bl	8001640 <lcd_print>
	          printf("%s\n\r", str);  // Enviar a consola UART
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <main+0x3a8>)
 8001c9a:	f005 f981 	bl	8006fa0 <iprintf>
	          break;
 8001c9e:	bf00      	nop
	  }




	  HAL_Delay(500);
 8001ca0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ca4:	f000 fbbe 	bl	8002424 <HAL_Delay>
  {
 8001ca8:	e64d      	b.n	8001946 <main+0x3e>
 8001caa:	bf00      	nop
 8001cac:	0800928c 	.word	0x0800928c
 8001cb0:	08009260 	.word	0x08009260
 8001cb4:	08009268 	.word	0x08009268

08001cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b096      	sub	sp, #88	@ 0x58
 8001cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	2244      	movs	r2, #68	@ 0x44
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 f9df 	bl	800708a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001cde:	f001 fd49 	bl	8003774 <HAL_PWREx_ControlVoltageScaling>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ce8:	f000 f8fe 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001cec:	2310      	movs	r3, #16
 8001cee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001cf8:	2360      	movs	r3, #96	@ 0x60
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d00:	2301      	movs	r3, #1
 8001d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d08:	2328      	movs	r3, #40	@ 0x28
 8001d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fd7f 	bl	8003820 <HAL_RCC_OscConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001d28:	f000 f8de 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	2303      	movs	r3, #3
 8001d32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	2104      	movs	r1, #4
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 f947 	bl	8003fd8 <HAL_RCC_ClockConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d50:	f000 f8ca 	bl	8001ee8 <Error_Handler>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3758      	adds	r7, #88	@ 0x58
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d62:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd4 <MX_I2C2_Init+0x78>)
 8001d64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d68:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <MX_I2C2_Init+0x7c>)
 8001d6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d96:	480e      	ldr	r0, [pc, #56]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001d98:	f000 feba 	bl	8002b10 <HAL_I2C_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001da2:	f000 f8a1 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001da6:	2100      	movs	r1, #0
 8001da8:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001daa:	f001 fc3d 	bl	8003628 <HAL_I2CEx_ConfigAnalogFilter>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001db4:	f000 f898 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001db8:	2100      	movs	r1, #0
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_I2C2_Init+0x74>)
 8001dbc:	f001 fc7f 	bl	80036be <HAL_I2CEx_ConfigDigitalFilter>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001dc6:	f000 f88f 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000238 	.word	0x20000238
 8001dd4:	40005800 	.word	0x40005800
 8001dd8:	10d19ce4 	.word	0x10d19ce4

08001ddc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001de2:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <MX_USART1_UART_Init+0x5c>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_USART1_UART_Init+0x58>)
 8001e20:	f002 ffba 	bl	8004d98 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e2a:	f000 f85d 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000028c 	.word	0x2000028c
 8001e38:	40013800 	.word	0x40013800

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <MX_GPIO_Init+0xa4>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	4a22      	ldr	r2, [pc, #136]	@ (8001ee0 <MX_GPIO_Init+0xa4>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <MX_GPIO_Init+0xa4>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <MX_GPIO_Init+0xa4>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee0 <MX_GPIO_Init+0xa4>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <MX_GPIO_Init+0xa4>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|E_LCD_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	f248 011c 	movw	r1, #32796	@ 0x801c
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8c:	f000 fe28 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|D5_LCD_Pin, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2116      	movs	r1, #22
 8001e94:	4813      	ldr	r0, [pc, #76]	@ (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e96:	f000 fe23 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|E_LCD_Pin;
 8001e9a:	f248 031c 	movw	r3, #32796	@ 0x801c
 8001e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb6:	f000 fc69 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin D5_LCD_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|D5_LCD_Pin;
 8001eba:	2316      	movs	r3, #22
 8001ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <MX_GPIO_Init+0xa8>)
 8001ed2:	f000 fc5b 	bl	800278c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <Error_Handler+0x8>

08001ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <HAL_MspInit+0x44>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efe:	4a0e      	ldr	r2, [pc, #56]	@ (8001f38 <HAL_MspInit+0x44>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f06:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <HAL_MspInit+0x44>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <HAL_MspInit+0x44>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f16:	4a08      	ldr	r2, [pc, #32]	@ (8001f38 <HAL_MspInit+0x44>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_MspInit+0x44>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0ac      	sub	sp, #176	@ 0xb0
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2288      	movs	r2, #136	@ 0x88
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f005 f894 	bl	800708a <memset>
  if(hi2c->Instance==I2C2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <HAL_I2C_MspInit+0xb0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d13b      	bne.n	8001fe4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fa51 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f84:	f7ff ffb0 	bl	8001ee8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <HAL_I2C_MspInit+0xb4>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8c:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <HAL_I2C_MspInit+0xb4>)
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
 8001f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <HAL_I2C_MspInit+0xb4>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fa0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa8:	2312      	movs	r3, #18
 8001faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	480b      	ldr	r0, [pc, #44]	@ (8001ff4 <HAL_I2C_MspInit+0xb8>)
 8001fc8:	f000 fbe0 	bl	800278c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <HAL_I2C_MspInit+0xb4>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	4a07      	ldr	r2, [pc, #28]	@ (8001ff0 <HAL_I2C_MspInit+0xb4>)
 8001fd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <HAL_I2C_MspInit+0xb4>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001fe4:	bf00      	nop
 8001fe6:	37b0      	adds	r7, #176	@ 0xb0
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40005800 	.word	0x40005800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48000400 	.word	0x48000400

08001ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0ac      	sub	sp, #176	@ 0xb0
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2288      	movs	r2, #136	@ 0x88
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f005 f836 	bl	800708a <memset>
  if(huart->Instance==USART1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a25      	ldr	r2, [pc, #148]	@ (80020b8 <HAL_UART_MspInit+0xc0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d142      	bne.n	80020ae <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002028:	2301      	movs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800202c:	2300      	movs	r3, #0
 800202e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4618      	mov	r0, r3
 8002036:	f002 f9f3 	bl	8004420 <HAL_RCCEx_PeriphCLKConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002040:	f7ff ff52 	bl	8001ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002044:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_UART_MspInit+0xc4>)
 8002046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002048:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <HAL_UART_MspInit+0xc4>)
 800204a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800204e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002050:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <HAL_UART_MspInit+0xc4>)
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <HAL_UART_MspInit+0xc4>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002060:	4a16      	ldr	r2, [pc, #88]	@ (80020bc <HAL_UART_MspInit+0xc4>)
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_UART_MspInit+0xc4>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002074:	23c0      	movs	r3, #192	@ 0xc0
 8002076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800208c:	2307      	movs	r3, #7
 800208e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002096:	4619      	mov	r1, r3
 8002098:	4809      	ldr	r0, [pc, #36]	@ (80020c0 <HAL_UART_MspInit+0xc8>)
 800209a:	f000 fb77 	bl	800278c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2025      	movs	r0, #37	@ 0x25
 80020a4:	f000 fabd 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020a8:	2025      	movs	r0, #37	@ 0x25
 80020aa:	f000 fad6 	bl	800265a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80020ae:	bf00      	nop
 80020b0:	37b0      	adds	r7, #176	@ 0xb0
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40013800 	.word	0x40013800
 80020bc:	40021000 	.word	0x40021000
 80020c0:	48000400 	.word	0x48000400

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <NMI_Handler+0x4>

080020cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <MemManage_Handler+0x4>

080020dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211a:	f000 f963 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <USART1_IRQHandler+0x10>)
 800212a:	f002 ff59 	bl	8004fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000028c 	.word	0x2000028c

08002138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_kill>:

int _kill(int pid, int sig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002152:	f004 ffed 	bl	8007130 <__errno>
 8002156:	4603      	mov	r3, r0
 8002158:	2216      	movs	r2, #22
 800215a:	601a      	str	r2, [r3, #0]
  return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_exit>:

void _exit (int status)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffe7 	bl	8002148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800217a:	bf00      	nop
 800217c:	e7fd      	b.n	800217a <_exit+0x12>

0800217e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e00a      	b.n	80021a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002190:	f3af 8000 	nop.w
 8002194:	4601      	mov	r1, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	60ba      	str	r2, [r7, #8]
 800219c:	b2ca      	uxtb	r2, r1
 800219e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	dbf0      	blt.n	8002190 <_read+0x12>
  }

  return len;
 80021ae:	687b      	ldr	r3, [r7, #4]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e009      	b.n	80021de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	60ba      	str	r2, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fb24 	bl	8001820 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	dbf1      	blt.n	80021ca <_write+0x12>
  }
  return len;
 80021e6:	687b      	ldr	r3, [r7, #4]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <_close>:

int _close(int file)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002218:	605a      	str	r2, [r3, #4]
  return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_isatty>:

int _isatty(int file)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002230:	2301      	movs	r3, #1
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f004 ff52 	bl	8007130 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20018000 	.word	0x20018000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	20000324 	.word	0x20000324
 80022c0:	20000478 	.word	0x20000478

080022c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002320 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022ec:	f7ff ffea 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f0:	480c      	ldr	r0, [pc, #48]	@ (8002324 <LoopForever+0x6>)
  ldr r1, =_edata
 80022f2:	490d      	ldr	r1, [pc, #52]	@ (8002328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <LoopForever+0xe>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002308:	4c0a      	ldr	r4, [pc, #40]	@ (8002334 <LoopForever+0x16>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002316:	f004 ff11 	bl	800713c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800231a:	f7ff faf5 	bl	8001908 <main>

0800231e <LoopForever>:

LoopForever:
    b LoopForever
 800231e:	e7fe      	b.n	800231e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002320:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800232c:	08009668 	.word	0x08009668
  ldr r2, =_sbss
 8002330:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002334:	20000478 	.word	0x20000478

08002338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC1_2_IRQHandler>

0800233a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002344:	2003      	movs	r0, #3
 8002346:	f000 f961 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800234a:	200f      	movs	r0, #15
 800234c:	f000 f80e 	bl	800236c <HAL_InitTick>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	71fb      	strb	r3, [r7, #7]
 800235a:	e001      	b.n	8002360 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800235c:	f7ff fdca 	bl	8001ef4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002360:	79fb      	ldrb	r3, [r7, #7]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002378:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <HAL_InitTick+0x6c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d023      	beq.n	80023c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002380:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <HAL_InitTick+0x70>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <HAL_InitTick+0x6c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800238e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f96d 	bl	8002676 <HAL_SYSTICK_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b0f      	cmp	r3, #15
 80023a6:	d809      	bhi.n	80023bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a8:	2200      	movs	r2, #0
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f000 f937 	bl	8002622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023b4:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <HAL_InitTick+0x74>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e007      	b.n	80023cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e004      	b.n	80023cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	e001      	b.n	80023cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000001c 	.word	0x2000001c
 80023dc:	20000014 	.word	0x20000014
 80023e0:	20000018 	.word	0x20000018

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000001c 	.word	0x2000001c
 8002408:	20000328 	.word	0x20000328

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000328 	.word	0x20000328

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_Delay+0x44>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000001c 	.word	0x2000001c

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	@ (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	@ (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	@ (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d008      	beq.n	80026b8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2204      	movs	r2, #4
 80026aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e022      	b.n	80026fe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 020e 	bic.w	r2, r2, #14
 80026c6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026dc:	f003 021c 	and.w	r2, r3, #28
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d005      	beq.n	800272e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2204      	movs	r2, #4
 8002726:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e029      	b.n	8002782 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 020e 	bic.w	r2, r2, #14
 800273c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f003 021c 	and.w	r2, r3, #28
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
    }
  }
  return status;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279a:	e17f      	b.n	8002a9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2101      	movs	r1, #1
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8171 	beq.w	8002a96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d005      	beq.n	80027cc <HAL_GPIO_Init+0x40>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d130      	bne.n	800282e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002802:	2201      	movs	r2, #1
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	f003 0201 	and.w	r2, r3, #1
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b03      	cmp	r3, #3
 8002838:	d118      	bne.n	800286c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002840:	2201      	movs	r2, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f003 0201 	and.w	r2, r3, #1
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b03      	cmp	r3, #3
 8002876:	d017      	beq.n	80028a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d123      	bne.n	80028fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	6939      	ldr	r1, [r7, #16]
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80ac 	beq.w	8002a96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	4b5f      	ldr	r3, [pc, #380]	@ (8002abc <HAL_GPIO_Init+0x330>)
 8002940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002942:	4a5e      	ldr	r2, [pc, #376]	@ (8002abc <HAL_GPIO_Init+0x330>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6613      	str	r3, [r2, #96]	@ 0x60
 800294a:	4b5c      	ldr	r3, [pc, #368]	@ (8002abc <HAL_GPIO_Init+0x330>)
 800294c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002956:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac0 <HAL_GPIO_Init+0x334>)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002980:	d025      	beq.n	80029ce <HAL_GPIO_Init+0x242>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4f      	ldr	r2, [pc, #316]	@ (8002ac4 <HAL_GPIO_Init+0x338>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01f      	beq.n	80029ca <HAL_GPIO_Init+0x23e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac8 <HAL_GPIO_Init+0x33c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d019      	beq.n	80029c6 <HAL_GPIO_Init+0x23a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4d      	ldr	r2, [pc, #308]	@ (8002acc <HAL_GPIO_Init+0x340>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <HAL_GPIO_Init+0x236>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad0 <HAL_GPIO_Init+0x344>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00d      	beq.n	80029be <HAL_GPIO_Init+0x232>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ad4 <HAL_GPIO_Init+0x348>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <HAL_GPIO_Init+0x22e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad8 <HAL_GPIO_Init+0x34c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_GPIO_Init+0x22a>
 80029b2:	2306      	movs	r3, #6
 80029b4:	e00c      	b.n	80029d0 <HAL_GPIO_Init+0x244>
 80029b6:	2307      	movs	r3, #7
 80029b8:	e00a      	b.n	80029d0 <HAL_GPIO_Init+0x244>
 80029ba:	2305      	movs	r3, #5
 80029bc:	e008      	b.n	80029d0 <HAL_GPIO_Init+0x244>
 80029be:	2304      	movs	r3, #4
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x244>
 80029c2:	2303      	movs	r3, #3
 80029c4:	e004      	b.n	80029d0 <HAL_GPIO_Init+0x244>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e002      	b.n	80029d0 <HAL_GPIO_Init+0x244>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_GPIO_Init+0x244>
 80029ce:	2300      	movs	r3, #0
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	f002 0203 	and.w	r2, r2, #3
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	4093      	lsls	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029e0:	4937      	ldr	r1, [pc, #220]	@ (8002ac0 <HAL_GPIO_Init+0x334>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ee:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <HAL_GPIO_Init+0x350>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a12:	4a32      	ldr	r2, [pc, #200]	@ (8002adc <HAL_GPIO_Init+0x350>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a18:	4b30      	ldr	r3, [pc, #192]	@ (8002adc <HAL_GPIO_Init+0x350>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a3c:	4a27      	ldr	r2, [pc, #156]	@ (8002adc <HAL_GPIO_Init+0x350>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a42:	4b26      	ldr	r3, [pc, #152]	@ (8002adc <HAL_GPIO_Init+0x350>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a66:	4a1d      	ldr	r2, [pc, #116]	@ (8002adc <HAL_GPIO_Init+0x350>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <HAL_GPIO_Init+0x350>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a90:	4a12      	ldr	r2, [pc, #72]	@ (8002adc <HAL_GPIO_Init+0x350>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f47f ae78 	bne.w	800279c <HAL_GPIO_Init+0x10>
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	48000400 	.word	0x48000400
 8002ac8:	48000800 	.word	0x48000800
 8002acc:	48000c00 	.word	0x48000c00
 8002ad0:	48001000 	.word	0x48001000
 8002ad4:	48001400 	.word	0x48001400
 8002ad8:	48001800 	.word	0x48001800
 8002adc:	40010400 	.word	0x40010400

08002ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
 8002aec:	4613      	mov	r3, r2
 8002aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af0:	787b      	ldrb	r3, [r7, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e08d      	b.n	8002c3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fa00 	bl	8001f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	@ 0x24
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	e006      	b.n	8002b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d108      	bne.n	8002bb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	e007      	b.n	8002bc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69d9      	ldr	r1, [r3, #28]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	813b      	strh	r3, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	f040 80f9 	bne.w	8002e62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_I2C_Mem_Write+0x34>
 8002c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0ed      	b.n	8002e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_I2C_Mem_Write+0x4e>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e0e6      	b.n	8002e64 <HAL_I2C_Mem_Write+0x21c>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c9e:	f7ff fbb5 	bl	800240c <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2319      	movs	r3, #25
 8002caa:	2201      	movs	r2, #1
 8002cac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fac3 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0d1      	b.n	8002e64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2221      	movs	r2, #33	@ 0x21
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2240      	movs	r2, #64	@ 0x40
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a3a      	ldr	r2, [r7, #32]
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ce8:	88f8      	ldrh	r0, [r7, #6]
 8002cea:	893a      	ldrh	r2, [r7, #8]
 8002cec:	8979      	ldrh	r1, [r7, #10]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f9d3 	bl	80030a4 <I2C_RequestMemoryWrite>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0a9      	b.n	8002e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2bff      	cmp	r3, #255	@ 0xff
 8002d18:	d90e      	bls.n	8002d38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	22ff      	movs	r2, #255	@ 0xff
 8002d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	8979      	ldrh	r1, [r7, #10]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fc47 	bl	80035c4 <I2C_TransferConfig>
 8002d36:	e00f      	b.n	8002d58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	8979      	ldrh	r1, [r7, #10]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fc36 	bl	80035c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fac6 	bl	80032ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e07b      	b.n	8002e64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d034      	beq.n	8002e10 <HAL_I2C_Mem_Write+0x1c8>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d130      	bne.n	8002e10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db4:	2200      	movs	r2, #0
 8002db6:	2180      	movs	r1, #128	@ 0x80
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fa3f 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e04d      	b.n	8002e64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2bff      	cmp	r3, #255	@ 0xff
 8002dd0:	d90e      	bls.n	8002df0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	22ff      	movs	r2, #255	@ 0xff
 8002dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	2300      	movs	r3, #0
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fbeb 	bl	80035c4 <I2C_TransferConfig>
 8002dee:	e00f      	b.n	8002e10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fbda 	bl	80035c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d19e      	bne.n	8002d58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 faac 	bl	800337c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e01a      	b.n	8002e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2220      	movs	r2, #32
 8002e34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_I2C_Mem_Write+0x224>)
 8002e42:	400b      	ands	r3, r1
 8002e44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	fe00e800 	.word	0xfe00e800

08002e70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	817b      	strh	r3, [r7, #10]
 8002e82:	460b      	mov	r3, r1
 8002e84:	813b      	strh	r3, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	f040 80fd 	bne.w	8003092 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_I2C_Mem_Read+0x34>
 8002e9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0f1      	b.n	8003094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2C_Mem_Read+0x4e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0ea      	b.n	8003094 <HAL_I2C_Mem_Read+0x224>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ec6:	f7ff faa1 	bl	800240c <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2319      	movs	r3, #25
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f9af 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0d5      	b.n	8003094 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2222      	movs	r2, #34	@ 0x22
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a3a      	ldr	r2, [r7, #32]
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f10:	88f8      	ldrh	r0, [r7, #6]
 8002f12:	893a      	ldrh	r2, [r7, #8]
 8002f14:	8979      	ldrh	r1, [r7, #10]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4603      	mov	r3, r0
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f913 	bl	800314c <I2C_RequestMemoryRead>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0ad      	b.n	8003094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2bff      	cmp	r3, #255	@ 0xff
 8002f40:	d90e      	bls.n	8002f60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	8979      	ldrh	r1, [r7, #10]
 8002f50:	4b52      	ldr	r3, [pc, #328]	@ (800309c <HAL_I2C_Mem_Read+0x22c>)
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fb33 	bl	80035c4 <I2C_TransferConfig>
 8002f5e:	e00f      	b.n	8002f80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	4b4a      	ldr	r3, [pc, #296]	@ (800309c <HAL_I2C_Mem_Read+0x22c>)
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fb22 	bl	80035c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	2200      	movs	r2, #0
 8002f88:	2104      	movs	r1, #4
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f956 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e07c      	b.n	8003094 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d034      	beq.n	8003040 <HAL_I2C_Mem_Read+0x1d0>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d130      	bne.n	8003040 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2180      	movs	r1, #128	@ 0x80
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f927 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e04d      	b.n	8003094 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2bff      	cmp	r3, #255	@ 0xff
 8003000:	d90e      	bls.n	8003020 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	b2da      	uxtb	r2, r3
 800300e:	8979      	ldrh	r1, [r7, #10]
 8003010:	2300      	movs	r3, #0
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fad3 	bl	80035c4 <I2C_TransferConfig>
 800301e:	e00f      	b.n	8003040 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302e:	b2da      	uxtb	r2, r3
 8003030:	8979      	ldrh	r1, [r7, #10]
 8003032:	2300      	movs	r3, #0
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fac2 	bl	80035c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d19a      	bne.n	8002f80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f994 	bl	800337c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e01a      	b.n	8003094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2220      	movs	r2, #32
 8003064:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_I2C_Mem_Read+0x230>)
 8003072:	400b      	ands	r3, r1
 8003074:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	80002400 	.word	0x80002400
 80030a0:	fe00e800 	.word	0xfe00e800

080030a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	8979      	ldrh	r1, [r7, #10]
 80030c4:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <I2C_RequestMemoryWrite+0xa4>)
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fa79 	bl	80035c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	69b9      	ldr	r1, [r7, #24]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f909 	bl	80032ee <I2C_WaitOnTXISFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e02c      	b.n	8003140 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ec:	893b      	ldrh	r3, [r7, #8]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80030f6:	e015      	b.n	8003124 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	69b9      	ldr	r1, [r7, #24]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f8ef 	bl	80032ee <I2C_WaitOnTXISFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e012      	b.n	8003140 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800311a:	893b      	ldrh	r3, [r7, #8]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2200      	movs	r2, #0
 800312c:	2180      	movs	r1, #128	@ 0x80
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f884 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	80002000 	.word	0x80002000

0800314c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	4608      	mov	r0, r1
 8003156:	4611      	mov	r1, r2
 8003158:	461a      	mov	r2, r3
 800315a:	4603      	mov	r3, r0
 800315c:	817b      	strh	r3, [r7, #10]
 800315e:	460b      	mov	r3, r1
 8003160:	813b      	strh	r3, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	8979      	ldrh	r1, [r7, #10]
 800316c:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <I2C_RequestMemoryRead+0xa4>)
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2300      	movs	r3, #0
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fa26 	bl	80035c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	69b9      	ldr	r1, [r7, #24]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f8b6 	bl	80032ee <I2C_WaitOnTXISFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e02c      	b.n	80031e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003192:	893b      	ldrh	r3, [r7, #8]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	629a      	str	r2, [r3, #40]	@ 0x28
 800319c:	e015      	b.n	80031ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800319e:	893b      	ldrh	r3, [r7, #8]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	69b9      	ldr	r1, [r7, #24]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f89c 	bl	80032ee <I2C_WaitOnTXISFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e012      	b.n	80031e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031c0:	893b      	ldrh	r3, [r7, #8]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2140      	movs	r1, #64	@ 0x40
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f831 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	80002000 	.word	0x80002000

080031f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	d103      	bne.n	8003212 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d007      	beq.n	8003230 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	619a      	str	r2, [r3, #24]
  }
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324c:	e03b      	b.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f8d6 	bl	8003404 <I2C_IsErrorOccurred>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e041      	b.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d02d      	beq.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7ff f8cf 	bl	800240c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x44>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d122      	bne.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	429a      	cmp	r2, r3
 800329c:	d113      	bne.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00f      	b.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	bf0c      	ite	eq
 80032d6:	2301      	moveq	r3, #1
 80032d8:	2300      	movne	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d0b4      	beq.n	800324e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032fa:	e033      	b.n	8003364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f87f 	bl	8003404 <I2C_IsErrorOccurred>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e031      	b.n	8003374 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d025      	beq.n	8003364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003318:	f7ff f878 	bl	800240c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	429a      	cmp	r2, r3
 8003326:	d302      	bcc.n	800332e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11a      	bne.n	8003364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b02      	cmp	r3, #2
 800333a:	d013      	beq.n	8003364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e007      	b.n	8003374 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d1c4      	bne.n	80032fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003388:	e02f      	b.n	80033ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f838 	bl	8003404 <I2C_IsErrorOccurred>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e02d      	b.n	80033fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7ff f835 	bl	800240c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11a      	bne.n	80033ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d013      	beq.n	80033ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e007      	b.n	80033fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d1c8      	bne.n	800338a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	@ 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d068      	beq.n	8003502 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003438:	e049      	b.n	80034ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d045      	beq.n	80034ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fe ffe3 	bl	800240c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <I2C_IsErrorOccurred+0x54>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d13a      	bne.n	80034ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003462:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800346a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347a:	d121      	bne.n	80034c0 <I2C_IsErrorOccurred+0xbc>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003482:	d01d      	beq.n	80034c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	2b20      	cmp	r3, #32
 8003488:	d01a      	beq.n	80034c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003498:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800349a:	f7fe ffb7 	bl	800240c <HAL_GetTick>
 800349e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034a0:	e00e      	b.n	80034c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034a2:	f7fe ffb3 	bl	800240c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b19      	cmp	r3, #25
 80034ae:	d907      	bls.n	80034c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f043 0320 	orr.w	r3, r3, #32
 80034b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034be:	e006      	b.n	80034ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d1e9      	bne.n	80034a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d003      	beq.n	80034e4 <I2C_IsErrorOccurred+0xe0>
 80034dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0aa      	beq.n	800343a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2220      	movs	r2, #32
 80034f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00b      	beq.n	800352c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003546:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01c      	beq.n	80035b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff fe3b 	bl	80031f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <I2C_IsErrorOccurred+0x1bc>)
 800358a:	400b      	ands	r3, r1
 800358c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3728      	adds	r7, #40	@ 0x28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	fe00e800 	.word	0xfe00e800

080035c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	817b      	strh	r3, [r7, #10]
 80035d2:	4613      	mov	r3, r2
 80035d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035d6:	897b      	ldrh	r3, [r7, #10]
 80035d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035dc:	7a7b      	ldrb	r3, [r7, #9]
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	0d5b      	lsrs	r3, r3, #21
 80035fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003602:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <I2C_TransferConfig+0x60>)
 8003604:	430b      	orrs	r3, r1
 8003606:	43db      	mvns	r3, r3
 8003608:	ea02 0103 	and.w	r1, r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	03ff63ff 	.word	0x03ff63ff

08003628 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b20      	cmp	r3, #32
 800363c:	d138      	bne.n	80036b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003648:	2302      	movs	r3, #2
 800364a:	e032      	b.n	80036b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800367a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d139      	bne.n	8003748 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036de:	2302      	movs	r3, #2
 80036e0:	e033      	b.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2224      	movs	r2, #36	@ 0x24
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003710:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800375c:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <HAL_PWREx_GetVoltageRange+0x18>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40007000 	.word	0x40007000

08003774 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003782:	d130      	bne.n	80037e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003784:	4b23      	ldr	r3, [pc, #140]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800378c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003790:	d038      	beq.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003792:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800379a:	4a1e      	ldr	r2, [pc, #120]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2232      	movs	r2, #50	@ 0x32
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	4a1b      	ldr	r2, [pc, #108]	@ (800381c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0c9b      	lsrs	r3, r3, #18
 80037b4:	3301      	adds	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b8:	e002      	b.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b01      	subs	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c0:	4b14      	ldr	r3, [pc, #80]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037cc:	d102      	bne.n	80037d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f2      	bne.n	80037ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e0:	d110      	bne.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e00f      	b.n	8003806 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f2:	d007      	beq.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037f4:	4b07      	ldr	r3, [pc, #28]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037fc:	4a05      	ldr	r2, [pc, #20]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003802:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40007000 	.word	0x40007000
 8003818:	20000014 	.word	0x20000014
 800381c:	431bde83 	.word	0x431bde83

08003820 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e3ca      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003832:	4b97      	ldr	r3, [pc, #604]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800383c:	4b94      	ldr	r3, [pc, #592]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80e4 	beq.w	8003a1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_RCC_OscConfig+0x4a>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	f040 808b 	bne.w	8003978 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b01      	cmp	r3, #1
 8003866:	f040 8087 	bne.w	8003978 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800386a:	4b89      	ldr	r3, [pc, #548]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_RCC_OscConfig+0x62>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e3a2      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	4b82      	ldr	r3, [pc, #520]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <HAL_RCC_OscConfig+0x7c>
 8003892:	4b7f      	ldr	r3, [pc, #508]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800389a:	e005      	b.n	80038a8 <HAL_RCC_OscConfig+0x88>
 800389c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d223      	bcs.n	80038f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fd55 	bl	8004360 <RCC_SetFlashLatencyFromMSIRange>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e383      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c0:	4b73      	ldr	r3, [pc, #460]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a72      	ldr	r2, [pc, #456]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038c6:	f043 0308 	orr.w	r3, r3, #8
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b70      	ldr	r3, [pc, #448]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	496d      	ldr	r1, [pc, #436]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038de:	4b6c      	ldr	r3, [pc, #432]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	4968      	ldr	r1, [pc, #416]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
 80038f2:	e025      	b.n	8003940 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f4:	4b66      	ldr	r3, [pc, #408]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a65      	ldr	r2, [pc, #404]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80038fa:	f043 0308 	orr.w	r3, r3, #8
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4960      	ldr	r1, [pc, #384]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003912:	4b5f      	ldr	r3, [pc, #380]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	495b      	ldr	r1, [pc, #364]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fd15 	bl	8004360 <RCC_SetFlashLatencyFromMSIRange>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e343      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003940:	f000 fc4a 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b52      	ldr	r3, [pc, #328]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	4950      	ldr	r1, [pc, #320]	@ (8003a94 <HAL_RCC_OscConfig+0x274>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a98 <HAL_RCC_OscConfig+0x278>)
 800395e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003960:	4b4e      	ldr	r3, [pc, #312]	@ (8003a9c <HAL_RCC_OscConfig+0x27c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe fd01 	bl	800236c <HAL_InitTick>
 800396a:	4603      	mov	r3, r0
 800396c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d052      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	e327      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d032      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003980:	4b43      	ldr	r3, [pc, #268]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a42      	ldr	r2, [pc, #264]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800398c:	f7fe fd3e 	bl	800240c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003994:	f7fe fd3a 	bl	800240c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e310      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b2:	4b37      	ldr	r3, [pc, #220]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a36      	ldr	r2, [pc, #216]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039b8:	f043 0308 	orr.w	r3, r3, #8
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4b34      	ldr	r3, [pc, #208]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4931      	ldr	r1, [pc, #196]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	492c      	ldr	r1, [pc, #176]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
 80039e4:	e01a      	b.n	8003a1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a29      	ldr	r2, [pc, #164]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f2:	f7fe fd0b 	bl	800240c <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039fa:	f7fe fd07 	bl	800240c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e2dd      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a0c:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCC_OscConfig+0x1da>
 8003a18:	e000      	b.n	8003a1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d074      	beq.n	8003b12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d005      	beq.n	8003a3a <HAL_RCC_OscConfig+0x21a>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d10e      	bne.n	8003a52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d10b      	bne.n	8003a52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d064      	beq.n	8003b10 <HAL_RCC_OscConfig+0x2f0>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d160      	bne.n	8003b10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e2ba      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x24a>
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e026      	b.n	8003ab8 <HAL_RCC_OscConfig+0x298>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a72:	d115      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x280>
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a02      	ldr	r2, [pc, #8]	@ (8003a90 <HAL_RCC_OscConfig+0x270>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCC_OscConfig+0x298>
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	080092a0 	.word	0x080092a0
 8003a98:	20000014 	.word	0x20000014
 8003a9c:	20000018 	.word	0x20000018
 8003aa0:	4ba0      	ldr	r3, [pc, #640]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a9f      	ldr	r2, [pc, #636]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b9d      	ldr	r3, [pc, #628]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a9c      	ldr	r2, [pc, #624]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d013      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fca4 	bl	800240c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fe fca0 	bl	800240c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	@ 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e276      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ada:	4b92      	ldr	r3, [pc, #584]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x2a8>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fe fc90 	bl	800240c <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fe fc8c 	bl	800240c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	@ 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e262      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b02:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x2d0>
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d060      	beq.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_OscConfig+0x310>
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d119      	bne.n	8003b5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d116      	bne.n	8003b5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b30:	4b7c      	ldr	r3, [pc, #496]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_OscConfig+0x328>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e23f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b48:	4b76      	ldr	r3, [pc, #472]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	4973      	ldr	r1, [pc, #460]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5c:	e040      	b.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d023      	beq.n	8003bae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b66:	4b6f      	ldr	r3, [pc, #444]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fe fc4b 	bl	800240c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fe fc47 	bl	800240c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e21d      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b8c:	4b65      	ldr	r3, [pc, #404]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b62      	ldr	r3, [pc, #392]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	495f      	ldr	r1, [pc, #380]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
 8003bac:	e018      	b.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bae:	4b5d      	ldr	r3, [pc, #372]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fe fc27 	bl	800240c <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fc23 	bl	800240c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1f9      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd4:	4b53      	ldr	r3, [pc, #332]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d03c      	beq.n	8003c66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01c      	beq.n	8003c2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fe fc02 	bl	800240c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fe fbfe 	bl	800240c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1d4      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c1e:	4b41      	ldr	r3, [pc, #260]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <HAL_RCC_OscConfig+0x3ec>
 8003c2c:	e01b      	b.n	8003c66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c34:	4a3b      	ldr	r2, [pc, #236]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3e:	f7fe fbe5 	bl	800240c <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fe fbe1 	bl	800240c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1b7      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c58:	4b32      	ldr	r3, [pc, #200]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ef      	bne.n	8003c46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80a6 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c74:	2300      	movs	r3, #0
 8003c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c78:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10d      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c84:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	4a26      	ldr	r2, [pc, #152]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c90:	4b24      	ldr	r3, [pc, #144]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca0:	4b21      	ldr	r3, [pc, #132]	@ (8003d28 <HAL_RCC_OscConfig+0x508>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d118      	bne.n	8003cde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cac:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <HAL_RCC_OscConfig+0x508>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <HAL_RCC_OscConfig+0x508>)
 8003cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb8:	f7fe fba8 	bl	800240c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc0:	f7fe fba4 	bl	800240c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e17a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd2:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <HAL_RCC_OscConfig+0x508>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4d8>
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cec:	4a0d      	ldr	r2, [pc, #52]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cf6:	e029      	b.n	8003d4c <HAL_RCC_OscConfig+0x52c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d115      	bne.n	8003d2c <HAL_RCC_OscConfig+0x50c>
 8003d00:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d06:	4a07      	ldr	r2, [pc, #28]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	4a03      	ldr	r2, [pc, #12]	@ (8003d24 <HAL_RCC_OscConfig+0x504>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d20:	e014      	b.n	8003d4c <HAL_RCC_OscConfig+0x52c>
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	4a9b      	ldr	r2, [pc, #620]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d3c:	4b98      	ldr	r3, [pc, #608]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	4a97      	ldr	r2, [pc, #604]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fe fb5a 	bl	800240c <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fe fb56 	bl	800240c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e12a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d72:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0ed      	beq.n	8003d5c <HAL_RCC_OscConfig+0x53c>
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fe fb43 	bl	800240c <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8a:	f7fe fb3f 	bl	800240c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e113      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da0:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ed      	bne.n	8003d8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dae:	7ffb      	ldrb	r3, [r7, #31]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	4a79      	ldr	r2, [pc, #484]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80fe 	beq.w	8003fc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	f040 80d0 	bne.w	8003f74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dd4:	4b72      	ldr	r3, [pc, #456]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d130      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	3b01      	subs	r3, #1
 8003df4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d127      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d11f      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e14:	2a07      	cmp	r2, #7
 8003e16:	bf14      	ite	ne
 8003e18:	2201      	movne	r2, #1
 8003e1a:	2200      	moveq	r2, #0
 8003e1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d113      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d109      	bne.n	8003e4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	3b01      	subs	r3, #1
 8003e44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d06e      	beq.n	8003f28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d069      	beq.n	8003f24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e50:	4b53      	ldr	r3, [pc, #332]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e5c:	4b50      	ldr	r3, [pc, #320]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0ad      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e78:	f7fe fac8 	bl	800240c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fe fac4 	bl	800240c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e09a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e92:	4b43      	ldr	r3, [pc, #268]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9e:	4b40      	ldr	r3, [pc, #256]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	4b40      	ldr	r3, [pc, #256]	@ (8003fa4 <HAL_RCC_OscConfig+0x784>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	0112      	lsls	r2, r2, #4
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003eb8:	0212      	lsls	r2, r2, #8
 8003eba:	4311      	orrs	r1, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ec0:	0852      	lsrs	r2, r2, #1
 8003ec2:	3a01      	subs	r2, #1
 8003ec4:	0552      	lsls	r2, r2, #21
 8003ec6:	4311      	orrs	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ecc:	0852      	lsrs	r2, r2, #1
 8003ece:	3a01      	subs	r2, #1
 8003ed0:	0652      	lsls	r2, r2, #25
 8003ed2:	4311      	orrs	r1, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ed8:	0912      	lsrs	r2, r2, #4
 8003eda:	0452      	lsls	r2, r2, #17
 8003edc:	430a      	orrs	r2, r1
 8003ede:	4930      	ldr	r1, [pc, #192]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003efc:	f7fe fa86 	bl	800240c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fe fa82 	bl	800240c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e058      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f22:	e050      	b.n	8003fc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e04f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f28:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d148      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f40:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f4c:	f7fe fa5e 	bl	800240c <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe fa5a 	bl	800240c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e030      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x734>
 8003f72:	e028      	b.n	8003fc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d023      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <HAL_RCC_OscConfig+0x780>)
 8003f80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fe fa41 	bl	800240c <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8c:	e00c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fe fa3d 	bl	800240c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d905      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e013      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCC_OscConfig+0x7b0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ec      	bne.n	8003f8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <HAL_RCC_OscConfig+0x7b0>)
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	4905      	ldr	r1, [pc, #20]	@ (8003fd0 <HAL_RCC_OscConfig+0x7b0>)
 8003fba:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <HAL_RCC_OscConfig+0x7b4>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60cb      	str	r3, [r1, #12]
 8003fc0:	e001      	b.n	8003fc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	feeefffc 	.word	0xfeeefffc

08003fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0e7      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b75      	ldr	r3, [pc, #468]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d910      	bls.n	800401c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b72      	ldr	r3, [pc, #456]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 0207 	bic.w	r2, r3, #7
 8004002:	4970      	ldr	r1, [pc, #448]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b6e      	ldr	r3, [pc, #440]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0cf      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b66      	ldr	r3, [pc, #408]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004034:	429a      	cmp	r2, r3
 8004036:	d908      	bls.n	800404a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b63      	ldr	r3, [pc, #396]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4960      	ldr	r1, [pc, #384]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d04c      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	4b5a      	ldr	r3, [pc, #360]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d121      	bne.n	80040ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0a6      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004076:	4b54      	ldr	r3, [pc, #336]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d115      	bne.n	80040ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e09a      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800408e:	4b4e      	ldr	r3, [pc, #312]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e08e      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409e:	4b4a      	ldr	r3, [pc, #296]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e086      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b46      	ldr	r3, [pc, #280]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4943      	ldr	r1, [pc, #268]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fe f9a4 	bl	800240c <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fe f9a0 	bl	800240c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e06e      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	4b3a      	ldr	r3, [pc, #232]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 020c 	and.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1eb      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	4b31      	ldr	r3, [pc, #196]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004108:	429a      	cmp	r2, r3
 800410a:	d208      	bcs.n	800411e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b2e      	ldr	r3, [pc, #184]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	492b      	ldr	r1, [pc, #172]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800411e:	4b29      	ldr	r3, [pc, #164]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d210      	bcs.n	800414e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412c:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 0207 	bic.w	r2, r3, #7
 8004134:	4923      	ldr	r1, [pc, #140]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413c:	4b21      	ldr	r3, [pc, #132]	@ (80041c4 <HAL_RCC_ClockConfig+0x1ec>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e036      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800415a:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4918      	ldr	r1, [pc, #96]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004178:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4910      	ldr	r1, [pc, #64]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800418c:	f000 f824 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	490b      	ldr	r1, [pc, #44]	@ (80041cc <HAL_RCC_ClockConfig+0x1f4>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
 80041a8:	4a09      	ldr	r2, [pc, #36]	@ (80041d0 <HAL_RCC_ClockConfig+0x1f8>)
 80041aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041ac:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_ClockConfig+0x1fc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe f8db 	bl	800236c <HAL_InitTick>
 80041b6:	4603      	mov	r3, r0
 80041b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80041ba:	7afb      	ldrb	r3, [r7, #11]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40021000 	.word	0x40021000
 80041cc:	080092a0 	.word	0x080092a0
 80041d0:	20000014 	.word	0x20000014
 80041d4:	20000018 	.word	0x20000018

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	@ 0x24
 80041dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e6:	4b3e      	ldr	r3, [pc, #248]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f0:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x34>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d121      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d11e      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800420c:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d107      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004218:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e005      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004228:	4b2d      	ldr	r3, [pc, #180]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004234:	4a2b      	ldr	r2, [pc, #172]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10d      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d102      	bne.n	8004256 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e004      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d101      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800425c:	4b23      	ldr	r3, [pc, #140]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x114>)
 800425e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d134      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d003      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0xa6>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d003      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0xac>
 800427c:	e005      	b.n	800428a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800427e:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004280:	617b      	str	r3, [r7, #20]
      break;
 8004282:	e005      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004286:	617b      	str	r3, [r7, #20]
      break;
 8004288:	e002      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	617b      	str	r3, [r7, #20]
      break;
 800428e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004290:	4b13      	ldr	r3, [pc, #76]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	3301      	adds	r3, #1
 800429c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800429e:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	fb03 f202 	mul.w	r2, r3, r2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	0e5b      	lsrs	r3, r3, #25
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	3301      	adds	r3, #1
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042d0:	69bb      	ldr	r3, [r7, #24]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3724      	adds	r7, #36	@ 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
 80042e4:	080092b8 	.word	0x080092b8
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	007a1200 	.word	0x007a1200

080042f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b03      	ldr	r3, [pc, #12]	@ (8004304 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000014 	.word	0x20000014

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800430c:	f7ff fff0 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4904      	ldr	r1, [pc, #16]	@ (8004330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	080092b0 	.word	0x080092b0

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004338:	f7ff ffda 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0adb      	lsrs	r3, r3, #11
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4904      	ldr	r1, [pc, #16]	@ (800435c <HAL_RCC_GetPCLK2Freq+0x28>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	080092b0 	.word	0x080092b0

08004360 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800436c:	4b2a      	ldr	r3, [pc, #168]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004378:	f7ff f9ee 	bl	8003758 <HAL_PWREx_GetVoltageRange>
 800437c:	6178      	str	r0, [r7, #20]
 800437e:	e014      	b.n	80043aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004380:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004384:	4a24      	ldr	r2, [pc, #144]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438a:	6593      	str	r3, [r2, #88]	@ 0x58
 800438c:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004398:	f7ff f9de 	bl	8003758 <HAL_PWREx_GetVoltageRange>
 800439c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800439e:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b0:	d10b      	bne.n	80043ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b80      	cmp	r3, #128	@ 0x80
 80043b6:	d919      	bls.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80043bc:	d902      	bls.n	80043c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043be:	2302      	movs	r3, #2
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	e013      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043c4:	2301      	movs	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e010      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b80      	cmp	r3, #128	@ 0x80
 80043ce:	d902      	bls.n	80043d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043d0:	2303      	movs	r3, #3
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	e00a      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b80      	cmp	r3, #128	@ 0x80
 80043da:	d102      	bne.n	80043e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043dc:	2302      	movs	r3, #2
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	e004      	b.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b70      	cmp	r3, #112	@ 0x70
 80043e6:	d101      	bne.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043e8:	2301      	movs	r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 0207 	bic.w	r2, r3, #7
 80043f4:	4909      	ldr	r1, [pc, #36]	@ (800441c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043fc:	4b07      	ldr	r3, [pc, #28]	@ (800441c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	d001      	beq.n	800440e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	40022000 	.word	0x40022000

08004420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004428:	2300      	movs	r3, #0
 800442a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800442c:	2300      	movs	r3, #0
 800442e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004438:	2b00      	cmp	r3, #0
 800443a:	d041      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004440:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004444:	d02a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004446:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800444a:	d824      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800444c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004450:	d008      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004456:	d81e      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800445c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004460:	d010      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004462:	e018      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004464:	4b86      	ldr	r3, [pc, #536]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a85      	ldr	r2, [pc, #532]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004470:	e015      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fabb 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004482:	e00c      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3320      	adds	r3, #32
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fba6 	bl	8004bdc <RCCEx_PLLSAI2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004494:	e003      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	74fb      	strb	r3, [r7, #19]
      break;
 800449a:	e000      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800449c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a4:	4b76      	ldr	r3, [pc, #472]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b2:	4973      	ldr	r1, [pc, #460]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044ba:	e001      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d041      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044d4:	d02a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044da:	d824      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044e0:	d008      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044e6:	d81e      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f0:	d010      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044f2:	e018      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044f4:	4b62      	ldr	r3, [pc, #392]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a61      	ldr	r2, [pc, #388]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004500:	e015      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fa73 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004512:	e00c      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3320      	adds	r3, #32
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fb5e 	bl	8004bdc <RCCEx_PLLSAI2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	74fb      	strb	r3, [r7, #19]
      break;
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800452c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004534:	4b52      	ldr	r3, [pc, #328]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004542:	494f      	ldr	r1, [pc, #316]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800454a:	e001      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a0 	beq.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004562:	4b47      	ldr	r3, [pc, #284]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	4b41      	ldr	r3, [pc, #260]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	4a40      	ldr	r2, [pc, #256]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004582:	6593      	str	r3, [r2, #88]	@ 0x58
 8004584:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004590:	2301      	movs	r3, #1
 8004592:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004594:	4b3b      	ldr	r3, [pc, #236]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a3a      	ldr	r2, [pc, #232]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800459a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045a0:	f7fd ff34 	bl	800240c <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045a6:	e009      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a8:	f7fd ff30 	bl	800240c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d902      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	74fb      	strb	r3, [r7, #19]
        break;
 80045ba:	e005      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045bc:	4b31      	ldr	r3, [pc, #196]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ef      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045c8:	7cfb      	ldrb	r3, [r7, #19]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d15c      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01f      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d019      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045ec:	4b24      	ldr	r3, [pc, #144]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045f8:	4b21      	ldr	r3, [pc, #132]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fe:	4a20      	ldr	r2, [pc, #128]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460e:	4a1c      	ldr	r2, [pc, #112]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004618:	4a19      	ldr	r2, [pc, #100]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fd feef 	bl	800240c <HAL_GetTick>
 800462e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004630:	e00b      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fd feeb 	bl	800240c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d902      	bls.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	74fb      	strb	r3, [r7, #19]
            break;
 8004648:	e006      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ec      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466e:	4904      	ldr	r1, [pc, #16]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004676:	e009      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
 800467c:	e006      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468c:	7c7b      	ldrb	r3, [r7, #17]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d105      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004692:	4b9e      	ldr	r3, [pc, #632]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004696:	4a9d      	ldr	r2, [pc, #628]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800469c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046aa:	4b98      	ldr	r3, [pc, #608]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	f023 0203 	bic.w	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b8:	4994      	ldr	r1, [pc, #592]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046cc:	4b8f      	ldr	r3, [pc, #572]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d2:	f023 020c 	bic.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046da:	498c      	ldr	r1, [pc, #560]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ee:	4b87      	ldr	r3, [pc, #540]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	4983      	ldr	r1, [pc, #524]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004710:	4b7e      	ldr	r3, [pc, #504]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	497b      	ldr	r1, [pc, #492]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004732:	4b76      	ldr	r3, [pc, #472]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004740:	4972      	ldr	r1, [pc, #456]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004754:	4b6d      	ldr	r3, [pc, #436]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004762:	496a      	ldr	r1, [pc, #424]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004776:	4b65      	ldr	r3, [pc, #404]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004784:	4961      	ldr	r1, [pc, #388]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004798:	4b5c      	ldr	r3, [pc, #368]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a6:	4959      	ldr	r1, [pc, #356]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ba:	4b54      	ldr	r3, [pc, #336]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c8:	4950      	ldr	r1, [pc, #320]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047dc:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ea:	4948      	ldr	r1, [pc, #288]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047fe:	4b43      	ldr	r3, [pc, #268]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004804:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	493f      	ldr	r1, [pc, #252]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d028      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004820:	4b3a      	ldr	r3, [pc, #232]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004826:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800482e:	4937      	ldr	r1, [pc, #220]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800483a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483e:	d106      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004840:	4b32      	ldr	r3, [pc, #200]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a31      	ldr	r2, [pc, #196]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800484a:	60d3      	str	r3, [r2, #12]
 800484c:	e011      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004856:	d10c      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	2101      	movs	r1, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f8c8 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d028      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800487e:	4b23      	ldr	r3, [pc, #140]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004884:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	491f      	ldr	r1, [pc, #124]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800489c:	d106      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489e:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4a1a      	ldr	r2, [pc, #104]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048a8:	60d3      	str	r3, [r2, #12]
 80048aa:	e011      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f899 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d02b      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ea:	4908      	ldr	r1, [pc, #32]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048fa:	d109      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a02      	ldr	r2, [pc, #8]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
 8004908:	e014      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3304      	adds	r3, #4
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f867 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02f      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004940:	4b2b      	ldr	r3, [pc, #172]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800494e:	4928      	ldr	r1, [pc, #160]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800495a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800495e:	d10d      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f844 	bl	80049f4 <RCCEx_PLLSAI1_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d014      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004976:	7cfb      	ldrb	r3, [r7, #19]
 8004978:	74bb      	strb	r3, [r7, #18]
 800497a:	e011      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3320      	adds	r3, #32
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f925 	bl	8004bdc <RCCEx_PLLSAI2_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049ac:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ba:	490d      	ldr	r1, [pc, #52]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ce:	4b08      	ldr	r3, [pc, #32]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049de:	4904      	ldr	r1, [pc, #16]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000

080049f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a02:	4b75      	ldr	r3, [pc, #468]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a0e:	4b72      	ldr	r3, [pc, #456]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0203 	and.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d10d      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
       ||
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a26:	4b6c      	ldr	r3, [pc, #432]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
       ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d047      	beq.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e044      	b.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d018      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x86>
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d825      	bhi.n	8004a98 <RCCEx_PLLSAI1_Config+0xa4>
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d002      	beq.n	8004a56 <RCCEx_PLLSAI1_Config+0x62>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d009      	beq.n	8004a68 <RCCEx_PLLSAI1_Config+0x74>
 8004a54:	e020      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a56:	4b60      	ldr	r3, [pc, #384]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11d      	bne.n	8004a9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a66:	e01a      	b.n	8004a9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a68:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d116      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a78:	e013      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a7a:	4b57      	ldr	r3, [pc, #348]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a86:	4b54      	ldr	r3, [pc, #336]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a96:	e006      	b.n	8004aa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9c:	e004      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aae:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	4944      	ldr	r1, [pc, #272]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d17d      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ad0:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a40      	ldr	r2, [pc, #256]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004adc:	f7fd fc96 	bl	800240c <HAL_GetTick>
 8004ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae2:	e009      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae4:	f7fd fc92 	bl	800240c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d902      	bls.n	8004af8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	73fb      	strb	r3, [r7, #15]
        break;
 8004af6:	e005      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af8:	4b37      	ldr	r3, [pc, #220]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ef      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d160      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d111      	bne.n	8004b34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b10:	4b31      	ldr	r3, [pc, #196]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6892      	ldr	r2, [r2, #8]
 8004b20:	0211      	lsls	r1, r2, #8
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68d2      	ldr	r2, [r2, #12]
 8004b26:	0912      	lsrs	r2, r2, #4
 8004b28:	0452      	lsls	r2, r2, #17
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	492a      	ldr	r1, [pc, #168]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	610b      	str	r3, [r1, #16]
 8004b32:	e027      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d112      	bne.n	8004b60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b3a:	4b27      	ldr	r3, [pc, #156]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6892      	ldr	r2, [r2, #8]
 8004b4a:	0211      	lsls	r1, r2, #8
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6912      	ldr	r2, [r2, #16]
 8004b50:	0852      	lsrs	r2, r2, #1
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0552      	lsls	r2, r2, #21
 8004b56:	430a      	orrs	r2, r1
 8004b58:	491f      	ldr	r1, [pc, #124]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	610b      	str	r3, [r1, #16]
 8004b5e:	e011      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b60:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6892      	ldr	r2, [r2, #8]
 8004b70:	0211      	lsls	r1, r2, #8
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6952      	ldr	r2, [r2, #20]
 8004b76:	0852      	lsrs	r2, r2, #1
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	0652      	lsls	r2, r2, #25
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	4916      	ldr	r1, [pc, #88]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b84:	4b14      	ldr	r3, [pc, #80]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a13      	ldr	r2, [pc, #76]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fd fc3c 	bl	800240c <HAL_GetTick>
 8004b94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b96:	e009      	b.n	8004bac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b98:	f7fd fc38 	bl	800240c <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d902      	bls.n	8004bac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	73fb      	strb	r3, [r7, #15]
          break;
 8004baa:	e005      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bac:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ef      	beq.n	8004b98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000

08004bdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bea:	4b6a      	ldr	r3, [pc, #424]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bf6:	4b67      	ldr	r3, [pc, #412]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0203 	and.w	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d10d      	bne.n	8004c22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
       ||
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c0e:	4b61      	ldr	r3, [pc, #388]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d047      	beq.n	8004cb2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	e044      	b.n	8004cb2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d018      	beq.n	8004c62 <RCCEx_PLLSAI2_Config+0x86>
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d825      	bhi.n	8004c80 <RCCEx_PLLSAI2_Config+0xa4>
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d002      	beq.n	8004c3e <RCCEx_PLLSAI2_Config+0x62>
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d009      	beq.n	8004c50 <RCCEx_PLLSAI2_Config+0x74>
 8004c3c:	e020      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c3e:	4b55      	ldr	r3, [pc, #340]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d11d      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4e:	e01a      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c50:	4b50      	ldr	r3, [pc, #320]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e013      	b.n	8004c8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c62:	4b4c      	ldr	r3, [pc, #304]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c6e:	4b49      	ldr	r3, [pc, #292]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c7e:	e006      	b.n	8004c8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      break;
 8004c84:	e004      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c86:	bf00      	nop
 8004c88:	e002      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c96:	4b3f      	ldr	r3, [pc, #252]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	430b      	orrs	r3, r1
 8004cac:	4939      	ldr	r1, [pc, #228]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d167      	bne.n	8004d88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cb8:	4b36      	ldr	r3, [pc, #216]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a35      	ldr	r2, [pc, #212]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc4:	f7fd fba2 	bl	800240c <HAL_GetTick>
 8004cc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cca:	e009      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ccc:	f7fd fb9e 	bl	800240c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d902      	bls.n	8004ce0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cde:	e005      	b.n	8004cec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1ef      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d14a      	bne.n	8004d88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d111      	bne.n	8004d1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cf8:	4b26      	ldr	r3, [pc, #152]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6892      	ldr	r2, [r2, #8]
 8004d08:	0211      	lsls	r1, r2, #8
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68d2      	ldr	r2, [r2, #12]
 8004d0e:	0912      	lsrs	r2, r2, #4
 8004d10:	0452      	lsls	r2, r2, #17
 8004d12:	430a      	orrs	r2, r1
 8004d14:	491f      	ldr	r1, [pc, #124]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	614b      	str	r3, [r1, #20]
 8004d1a:	e011      	b.n	8004d40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	0211      	lsls	r1, r2, #8
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6912      	ldr	r2, [r2, #16]
 8004d32:	0852      	lsrs	r2, r2, #1
 8004d34:	3a01      	subs	r2, #1
 8004d36:	0652      	lsls	r2, r2, #25
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	4916      	ldr	r1, [pc, #88]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d40:	4b14      	ldr	r3, [pc, #80]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a13      	ldr	r2, [pc, #76]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fd fb5e 	bl	800240c <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d52:	e009      	b.n	8004d68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d54:	f7fd fb5a 	bl	800240c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d902      	bls.n	8004d68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	73fb      	strb	r3, [r7, #15]
          break;
 8004d66:	e005      	b.n	8004d74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d68:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ef      	beq.n	8004d54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d7a:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4904      	ldr	r1, [pc, #16]	@ (8004d94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000

08004d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e040      	b.n	8004e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fd f91c 	bl	8001ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2224      	movs	r2, #36	@ 0x24
 8004dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fedc 	bl	8005b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fc21 	bl	800562c <UART_SetConfig>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e01b      	b.n	8004e2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 ff5b 	bl	8005ce0 <UART_CheckIdleState>
 8004e2a:	4603      	mov	r3, r0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	@ 0x28
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d177      	bne.n	8004f3c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_UART_Transmit+0x24>
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e070      	b.n	8004f3e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2221      	movs	r2, #33	@ 0x21
 8004e68:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e6a:	f7fd facf 	bl	800240c <HAL_GetTick>
 8004e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e88:	d108      	bne.n	8004e9c <HAL_UART_Transmit+0x68>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	e003      	b.n	8004ea4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ea4:	e02f      	b.n	8004f06 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2180      	movs	r1, #128	@ 0x80
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 ffbd 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e03b      	b.n	8004f3e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10b      	bne.n	8004ee4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed8:	b292      	uxth	r2, r2
 8004eda:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	3302      	adds	r3, #2
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e007      	b.n	8004ef4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1c9      	bne.n	8004ea6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2140      	movs	r1, #64	@ 0x40
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 ff87 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e005      	b.n	8004f3e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	@ 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d137      	bne.n	8004fd0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Receive_IT+0x24>
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e030      	b.n	8004fd2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a18      	ldr	r2, [pc, #96]	@ (8004fdc <HAL_UART_Receive_IT+0x94>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d01f      	beq.n	8004fc0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	69f9      	ldr	r1, [r7, #28]
 8004fb2:	6a3a      	ldr	r2, [r7, #32]
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e6      	bne.n	8004f8e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 ffa0 	bl	8005f0c <UART_Start_Receive_IT>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	e000      	b.n	8004fd2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3728      	adds	r7, #40	@ 0x28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40008000 	.word	0x40008000

08004fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800500a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800500e:	4013      	ands	r3, r2
 8005010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d115      	bne.n	8005048 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800501c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00f      	beq.n	8005048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 82ca 	beq.w	80055d2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      }
      return;
 8005046:	e2c4      	b.n	80055d2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8117 	beq.w	8005280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800505e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005062:	4b85      	ldr	r3, [pc, #532]	@ (8005278 <HAL_UART_IRQHandler+0x298>)
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 810a 	beq.w	8005280 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d011      	beq.n	800509c <HAL_UART_IRQHandler+0xbc>
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d011      	beq.n	80050cc <HAL_UART_IRQHandler+0xec>
 80050a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2202      	movs	r2, #2
 80050ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050c2:	f043 0204 	orr.w	r2, r3, #4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d011      	beq.n	80050fc <HAL_UART_IRQHandler+0x11c>
 80050d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2204      	movs	r2, #4
 80050ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f2:	f043 0202 	orr.w	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d017      	beq.n	8005138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2208      	movs	r2, #8
 8005126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800512e:	f043 0208 	orr.w	r2, r3, #8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800513c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <HAL_UART_IRQHandler+0x18a>
 8005144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00c      	beq.n	800516a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8230 	beq.w	80055d6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00d      	beq.n	800519e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b2:	2b40      	cmp	r3, #64	@ 0x40
 80051b4:	d005      	beq.n	80051c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d04f      	beq.n	8005262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 ff68 	bl	8006098 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d2:	2b40      	cmp	r3, #64	@ 0x40
 80051d4:	d141      	bne.n	800525a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3308      	adds	r3, #8
 80051dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800520e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800521a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1d9      	bne.n	80051d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005226:	2b00      	cmp	r3, #0
 8005228:	d013      	beq.n	8005252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522e:	4a13      	ldr	r2, [pc, #76]	@ (800527c <HAL_UART_IRQHandler+0x29c>)
 8005230:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd fa67 	bl	800270a <HAL_DMA_Abort_IT>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d017      	beq.n	8005272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	e00f      	b.n	8005272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9d4 	bl	8005600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	e00b      	b.n	8005272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9d0 	bl	8005600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	e007      	b.n	8005272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9cc 	bl	8005600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005270:	e1b1      	b.n	80055d6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005272:	bf00      	nop
    return;
 8005274:	e1af      	b.n	80055d6 <HAL_UART_IRQHandler+0x5f6>
 8005276:	bf00      	nop
 8005278:	04000120 	.word	0x04000120
 800527c:	08006161 	.word	0x08006161

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005284:	2b01      	cmp	r3, #1
 8005286:	f040 816a 	bne.w	800555e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8163 	beq.w	800555e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 815c 	beq.w	800555e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2210      	movs	r2, #16
 80052ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b8:	2b40      	cmp	r3, #64	@ 0x40
 80052ba:	f040 80d4 	bne.w	8005466 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80ad 	beq.w	800542e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052de:	429a      	cmp	r2, r3
 80052e0:	f080 80a5 	bcs.w	800542e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f040 8086 	bne.w	800540c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005314:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800531c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800532a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800532e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005336:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005342:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1da      	bne.n	8005300 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3308      	adds	r3, #8
 8005350:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800535a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3308      	adds	r3, #8
 800536a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800536e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005372:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005376:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e1      	bne.n	800534a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e3      	bne.n	8005386 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e4      	bne.n	80053cc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005406:	4618      	mov	r0, r3
 8005408:	f7fd f941 	bl	800268e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800541e:	b29b      	uxth	r3, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	b29b      	uxth	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8f4 	bl	8005614 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800542c:	e0d5      	b.n	80055da <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005438:	429a      	cmp	r2, r3
 800543a:	f040 80ce 	bne.w	80055da <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b20      	cmp	r3, #32
 800544c:	f040 80c5 	bne.w	80055da <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8d8 	bl	8005614 <HAL_UARTEx_RxEventCallback>
      return;
 8005464:	e0b9      	b.n	80055da <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005472:	b29b      	uxth	r3, r3
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80ab 	beq.w	80055de <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80a6 	beq.w	80055de <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e4      	bne.n	8005492 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	623b      	str	r3, [r7, #32]
   return(result);
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80054ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e3      	bne.n	80054c8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	60fb      	str	r3, [r7, #12]
   return(result);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f023 0310 	bic.w	r3, r3, #16
 8005528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	69b9      	ldr	r1, [r7, #24]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	617b      	str	r3, [r7, #20]
   return(result);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e4      	bne.n	8005514 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f85c 	bl	8005614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800555c:	e03f      	b.n	80055de <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <HAL_UART_IRQHandler+0x5a8>
 800556a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800556e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800557e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 ffe9 	bl	8006558 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005586:	e02d      	b.n	80055e4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00e      	beq.n	80055b2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01c      	beq.n	80055e2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	4798      	blx	r3
    }
    return;
 80055b0:	e017      	b.n	80055e2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d012      	beq.n	80055e4 <HAL_UART_IRQHandler+0x604>
 80055be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00c      	beq.n	80055e4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fdde 	bl	800618c <UART_EndTransmit_IT>
    return;
 80055d0:	e008      	b.n	80055e4 <HAL_UART_IRQHandler+0x604>
      return;
 80055d2:	bf00      	nop
 80055d4:	e006      	b.n	80055e4 <HAL_UART_IRQHandler+0x604>
    return;
 80055d6:	bf00      	nop
 80055d8:	e004      	b.n	80055e4 <HAL_UART_IRQHandler+0x604>
      return;
 80055da:	bf00      	nop
 80055dc:	e002      	b.n	80055e4 <HAL_UART_IRQHandler+0x604>
      return;
 80055de:	bf00      	nop
 80055e0:	e000      	b.n	80055e4 <HAL_UART_IRQHandler+0x604>
    return;
 80055e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80055e4:	37e8      	adds	r7, #232	@ 0xe8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop

080055ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800562c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005630:	b08a      	sub	sp, #40	@ 0x28
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	431a      	orrs	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	431a      	orrs	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	4313      	orrs	r3, r2
 8005652:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4ba4      	ldr	r3, [pc, #656]	@ (80058ec <UART_SetConfig+0x2c0>)
 800565c:	4013      	ands	r3, r2
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005664:	430b      	orrs	r3, r1
 8005666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a99      	ldr	r2, [pc, #612]	@ (80058f0 <UART_SetConfig+0x2c4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005694:	4313      	orrs	r3, r2
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a8:	430a      	orrs	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a90      	ldr	r2, [pc, #576]	@ (80058f4 <UART_SetConfig+0x2c8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d126      	bne.n	8005704 <UART_SetConfig+0xd8>
 80056b6:	4b90      	ldr	r3, [pc, #576]	@ (80058f8 <UART_SetConfig+0x2cc>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d81b      	bhi.n	80056fc <UART_SetConfig+0xd0>
 80056c4:	a201      	add	r2, pc, #4	@ (adr r2, 80056cc <UART_SetConfig+0xa0>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056f5 	.word	0x080056f5
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e2:	e116      	b.n	8005912 <UART_SetConfig+0x2e6>
 80056e4:	2302      	movs	r3, #2
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ea:	e112      	b.n	8005912 <UART_SetConfig+0x2e6>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f2:	e10e      	b.n	8005912 <UART_SetConfig+0x2e6>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fa:	e10a      	b.n	8005912 <UART_SetConfig+0x2e6>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005702:	e106      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a7c      	ldr	r2, [pc, #496]	@ (80058fc <UART_SetConfig+0x2d0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d138      	bne.n	8005780 <UART_SetConfig+0x154>
 800570e:	4b7a      	ldr	r3, [pc, #488]	@ (80058f8 <UART_SetConfig+0x2cc>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b0c      	cmp	r3, #12
 800571a:	d82d      	bhi.n	8005778 <UART_SetConfig+0x14c>
 800571c:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <UART_SetConfig+0xf8>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005759 	.word	0x08005759
 8005728:	08005779 	.word	0x08005779
 800572c:	08005779 	.word	0x08005779
 8005730:	08005779 	.word	0x08005779
 8005734:	08005769 	.word	0x08005769
 8005738:	08005779 	.word	0x08005779
 800573c:	08005779 	.word	0x08005779
 8005740:	08005779 	.word	0x08005779
 8005744:	08005761 	.word	0x08005761
 8005748:	08005779 	.word	0x08005779
 800574c:	08005779 	.word	0x08005779
 8005750:	08005779 	.word	0x08005779
 8005754:	08005771 	.word	0x08005771
 8005758:	2300      	movs	r3, #0
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575e:	e0d8      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005760:	2302      	movs	r3, #2
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005766:	e0d4      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576e:	e0d0      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005776:	e0cc      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800577e:	e0c8      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a5e      	ldr	r2, [pc, #376]	@ (8005900 <UART_SetConfig+0x2d4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d125      	bne.n	80057d6 <UART_SetConfig+0x1aa>
 800578a:	4b5b      	ldr	r3, [pc, #364]	@ (80058f8 <UART_SetConfig+0x2cc>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005790:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005794:	2b30      	cmp	r3, #48	@ 0x30
 8005796:	d016      	beq.n	80057c6 <UART_SetConfig+0x19a>
 8005798:	2b30      	cmp	r3, #48	@ 0x30
 800579a:	d818      	bhi.n	80057ce <UART_SetConfig+0x1a2>
 800579c:	2b20      	cmp	r3, #32
 800579e:	d00a      	beq.n	80057b6 <UART_SetConfig+0x18a>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d814      	bhi.n	80057ce <UART_SetConfig+0x1a2>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <UART_SetConfig+0x182>
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d008      	beq.n	80057be <UART_SetConfig+0x192>
 80057ac:	e00f      	b.n	80057ce <UART_SetConfig+0x1a2>
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b4:	e0ad      	b.n	8005912 <UART_SetConfig+0x2e6>
 80057b6:	2302      	movs	r3, #2
 80057b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057bc:	e0a9      	b.n	8005912 <UART_SetConfig+0x2e6>
 80057be:	2304      	movs	r3, #4
 80057c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c4:	e0a5      	b.n	8005912 <UART_SetConfig+0x2e6>
 80057c6:	2308      	movs	r3, #8
 80057c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057cc:	e0a1      	b.n	8005912 <UART_SetConfig+0x2e6>
 80057ce:	2310      	movs	r3, #16
 80057d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057d4:	e09d      	b.n	8005912 <UART_SetConfig+0x2e6>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a4a      	ldr	r2, [pc, #296]	@ (8005904 <UART_SetConfig+0x2d8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d125      	bne.n	800582c <UART_SetConfig+0x200>
 80057e0:	4b45      	ldr	r3, [pc, #276]	@ (80058f8 <UART_SetConfig+0x2cc>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80057ec:	d016      	beq.n	800581c <UART_SetConfig+0x1f0>
 80057ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80057f0:	d818      	bhi.n	8005824 <UART_SetConfig+0x1f8>
 80057f2:	2b80      	cmp	r3, #128	@ 0x80
 80057f4:	d00a      	beq.n	800580c <UART_SetConfig+0x1e0>
 80057f6:	2b80      	cmp	r3, #128	@ 0x80
 80057f8:	d814      	bhi.n	8005824 <UART_SetConfig+0x1f8>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <UART_SetConfig+0x1d8>
 80057fe:	2b40      	cmp	r3, #64	@ 0x40
 8005800:	d008      	beq.n	8005814 <UART_SetConfig+0x1e8>
 8005802:	e00f      	b.n	8005824 <UART_SetConfig+0x1f8>
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580a:	e082      	b.n	8005912 <UART_SetConfig+0x2e6>
 800580c:	2302      	movs	r3, #2
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e07e      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005814:	2304      	movs	r3, #4
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581a:	e07a      	b.n	8005912 <UART_SetConfig+0x2e6>
 800581c:	2308      	movs	r3, #8
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e076      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005824:	2310      	movs	r3, #16
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582a:	e072      	b.n	8005912 <UART_SetConfig+0x2e6>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a35      	ldr	r2, [pc, #212]	@ (8005908 <UART_SetConfig+0x2dc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d12a      	bne.n	800588c <UART_SetConfig+0x260>
 8005836:	4b30      	ldr	r3, [pc, #192]	@ (80058f8 <UART_SetConfig+0x2cc>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005844:	d01a      	beq.n	800587c <UART_SetConfig+0x250>
 8005846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584a:	d81b      	bhi.n	8005884 <UART_SetConfig+0x258>
 800584c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005850:	d00c      	beq.n	800586c <UART_SetConfig+0x240>
 8005852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005856:	d815      	bhi.n	8005884 <UART_SetConfig+0x258>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <UART_SetConfig+0x238>
 800585c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005860:	d008      	beq.n	8005874 <UART_SetConfig+0x248>
 8005862:	e00f      	b.n	8005884 <UART_SetConfig+0x258>
 8005864:	2300      	movs	r3, #0
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586a:	e052      	b.n	8005912 <UART_SetConfig+0x2e6>
 800586c:	2302      	movs	r3, #2
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e04e      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005874:	2304      	movs	r3, #4
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e04a      	b.n	8005912 <UART_SetConfig+0x2e6>
 800587c:	2308      	movs	r3, #8
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005882:	e046      	b.n	8005912 <UART_SetConfig+0x2e6>
 8005884:	2310      	movs	r3, #16
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800588a:	e042      	b.n	8005912 <UART_SetConfig+0x2e6>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a17      	ldr	r2, [pc, #92]	@ (80058f0 <UART_SetConfig+0x2c4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d13a      	bne.n	800590c <UART_SetConfig+0x2e0>
 8005896:	4b18      	ldr	r3, [pc, #96]	@ (80058f8 <UART_SetConfig+0x2cc>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a4:	d01a      	beq.n	80058dc <UART_SetConfig+0x2b0>
 80058a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058aa:	d81b      	bhi.n	80058e4 <UART_SetConfig+0x2b8>
 80058ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058b0:	d00c      	beq.n	80058cc <UART_SetConfig+0x2a0>
 80058b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058b6:	d815      	bhi.n	80058e4 <UART_SetConfig+0x2b8>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <UART_SetConfig+0x298>
 80058bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c0:	d008      	beq.n	80058d4 <UART_SetConfig+0x2a8>
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x2b8>
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ca:	e022      	b.n	8005912 <UART_SetConfig+0x2e6>
 80058cc:	2302      	movs	r3, #2
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d2:	e01e      	b.n	8005912 <UART_SetConfig+0x2e6>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058da:	e01a      	b.n	8005912 <UART_SetConfig+0x2e6>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e2:	e016      	b.n	8005912 <UART_SetConfig+0x2e6>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ea:	e012      	b.n	8005912 <UART_SetConfig+0x2e6>
 80058ec:	efff69f3 	.word	0xefff69f3
 80058f0:	40008000 	.word	0x40008000
 80058f4:	40013800 	.word	0x40013800
 80058f8:	40021000 	.word	0x40021000
 80058fc:	40004400 	.word	0x40004400
 8005900:	40004800 	.word	0x40004800
 8005904:	40004c00 	.word	0x40004c00
 8005908:	40005000 	.word	0x40005000
 800590c:	2310      	movs	r3, #16
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a9f      	ldr	r2, [pc, #636]	@ (8005b94 <UART_SetConfig+0x568>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d17a      	bne.n	8005a12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800591c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005920:	2b08      	cmp	r3, #8
 8005922:	d824      	bhi.n	800596e <UART_SetConfig+0x342>
 8005924:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <UART_SetConfig+0x300>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	08005951 	.word	0x08005951
 8005930:	0800596f 	.word	0x0800596f
 8005934:	08005959 	.word	0x08005959
 8005938:	0800596f 	.word	0x0800596f
 800593c:	0800595f 	.word	0x0800595f
 8005940:	0800596f 	.word	0x0800596f
 8005944:	0800596f 	.word	0x0800596f
 8005948:	0800596f 	.word	0x0800596f
 800594c:	08005967 	.word	0x08005967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005950:	f7fe fcda 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8005954:	61f8      	str	r0, [r7, #28]
        break;
 8005956:	e010      	b.n	800597a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b8f      	ldr	r3, [pc, #572]	@ (8005b98 <UART_SetConfig+0x56c>)
 800595a:	61fb      	str	r3, [r7, #28]
        break;
 800595c:	e00d      	b.n	800597a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7fe fc3b 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8005962:	61f8      	str	r0, [r7, #28]
        break;
 8005964:	e009      	b.n	800597a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800596a:	61fb      	str	r3, [r7, #28]
        break;
 800596c:	e005      	b.n	800597a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005978:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80fb 	beq.w	8005b78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	4413      	add	r3, r2
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	429a      	cmp	r2, r3
 8005990:	d305      	bcc.n	800599e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	429a      	cmp	r2, r3
 800599c:	d903      	bls.n	80059a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059a4:	e0e8      	b.n	8005b78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2200      	movs	r2, #0
 80059aa:	461c      	mov	r4, r3
 80059ac:	4615      	mov	r5, r2
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	022b      	lsls	r3, r5, #8
 80059b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059bc:	0222      	lsls	r2, r4, #8
 80059be:	68f9      	ldr	r1, [r7, #12]
 80059c0:	6849      	ldr	r1, [r1, #4]
 80059c2:	0849      	lsrs	r1, r1, #1
 80059c4:	2000      	movs	r0, #0
 80059c6:	4688      	mov	r8, r1
 80059c8:	4681      	mov	r9, r0
 80059ca:	eb12 0a08 	adds.w	sl, r2, r8
 80059ce:	eb43 0b09 	adc.w	fp, r3, r9
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e0:	4650      	mov	r0, sl
 80059e2:	4659      	mov	r1, fp
 80059e4:	f7fb f930 	bl	8000c48 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f6:	d308      	bcc.n	8005a0a <UART_SetConfig+0x3de>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fe:	d204      	bcs.n	8005a0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	e0b6      	b.n	8005b78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a10:	e0b2      	b.n	8005b78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a1a:	d15e      	bne.n	8005ada <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d828      	bhi.n	8005a76 <UART_SetConfig+0x44a>
 8005a24:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <UART_SetConfig+0x400>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	08005a77 	.word	0x08005a77
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005a77 	.word	0x08005a77
 8005a44:	08005a77 	.word	0x08005a77
 8005a48:	08005a77 	.word	0x08005a77
 8005a4c:	08005a6f 	.word	0x08005a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a50:	f7fe fc5a 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8005a54:	61f8      	str	r0, [r7, #28]
        break;
 8005a56:	e014      	b.n	8005a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fe fc6c 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8005a5c:	61f8      	str	r0, [r7, #28]
        break;
 8005a5e:	e010      	b.n	8005a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a60:	4b4d      	ldr	r3, [pc, #308]	@ (8005b98 <UART_SetConfig+0x56c>)
 8005a62:	61fb      	str	r3, [r7, #28]
        break;
 8005a64:	e00d      	b.n	8005a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a66:	f7fe fbb7 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8005a6a:	61f8      	str	r0, [r7, #28]
        break;
 8005a6c:	e009      	b.n	8005a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a72:	61fb      	str	r3, [r7, #28]
        break;
 8005a74:	e005      	b.n	8005a82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d077      	beq.n	8005b78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	005a      	lsls	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	441a      	add	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2b0f      	cmp	r3, #15
 8005aa2:	d916      	bls.n	8005ad2 <UART_SetConfig+0x4a6>
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aaa:	d212      	bcs.n	8005ad2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f023 030f 	bic.w	r3, r3, #15
 8005ab4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	8afb      	ldrh	r3, [r7, #22]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	8afa      	ldrh	r2, [r7, #22]
 8005ace:	60da      	str	r2, [r3, #12]
 8005ad0:	e052      	b.n	8005b78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ad8:	e04e      	b.n	8005b78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ada:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d827      	bhi.n	8005b32 <UART_SetConfig+0x506>
 8005ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <UART_SetConfig+0x4bc>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b0d 	.word	0x08005b0d
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b1d 	.word	0x08005b1d
 8005af4:	08005b33 	.word	0x08005b33
 8005af8:	08005b23 	.word	0x08005b23
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b33 	.word	0x08005b33
 8005b04:	08005b33 	.word	0x08005b33
 8005b08:	08005b2b 	.word	0x08005b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b0c:	f7fe fbfc 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8005b10:	61f8      	str	r0, [r7, #28]
        break;
 8005b12:	e014      	b.n	8005b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fe fc0e 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8005b18:	61f8      	str	r0, [r7, #28]
        break;
 8005b1a:	e010      	b.n	8005b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b98 <UART_SetConfig+0x56c>)
 8005b1e:	61fb      	str	r3, [r7, #28]
        break;
 8005b20:	e00d      	b.n	8005b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b22:	f7fe fb59 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8005b26:	61f8      	str	r0, [r7, #28]
        break;
 8005b28:	e009      	b.n	8005b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b2e:	61fb      	str	r3, [r7, #28]
        break;
 8005b30:	e005      	b.n	8005b3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d019      	beq.n	8005b78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	085a      	lsrs	r2, r3, #1
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	441a      	add	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b0f      	cmp	r3, #15
 8005b5c:	d909      	bls.n	8005b72 <UART_SetConfig+0x546>
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b64:	d205      	bcs.n	8005b72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60da      	str	r2, [r3, #12]
 8005b70:	e002      	b.n	8005b78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3728      	adds	r7, #40	@ 0x28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b92:	bf00      	nop
 8005b94:	40008000 	.word	0x40008000
 8005b98:	00f42400 	.word	0x00f42400

08005b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01a      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9a:	d10a      	bne.n	8005cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b098      	sub	sp, #96	@ 0x60
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf0:	f7fc fb8c 	bl	800240c <HAL_GetTick>
 8005cf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d12e      	bne.n	8005d62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f88c 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d021      	beq.n	8005d62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e062      	b.n	8005e28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d149      	bne.n	8005e04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f856 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03c      	beq.n	8005e04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	623b      	str	r3, [r7, #32]
   return(result);
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ddc:	61fa      	str	r2, [r7, #28]
 8005dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e5      	bne.n	8005dbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e011      	b.n	8005e28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3758      	adds	r7, #88	@ 0x58
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e40:	e04f      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d04b      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fc fadf 	bl	800240c <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e04e      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d037      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b80      	cmp	r3, #128	@ 0x80
 8005e76:	d034      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d031      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d110      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2208      	movs	r2, #8
 8005e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f8ff 	bl	8006098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e029      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ebc:	d111      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f8e5 	bl	8006098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e00f      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4013      	ands	r3, r2
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d0a0      	beq.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b097      	sub	sp, #92	@ 0x5c
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	88fa      	ldrh	r2, [r7, #6]
 8005f24:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	88fa      	ldrh	r2, [r7, #6]
 8005f2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3e:	d10e      	bne.n	8005f5e <UART_Start_Receive_IT+0x52>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <UART_Start_Receive_IT+0x48>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f52:	e02d      	b.n	8005fb0 <UART_Start_Receive_IT+0xa4>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	22ff      	movs	r2, #255	@ 0xff
 8005f58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f5c:	e028      	b.n	8005fb0 <UART_Start_Receive_IT+0xa4>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10d      	bne.n	8005f82 <UART_Start_Receive_IT+0x76>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <UART_Start_Receive_IT+0x6c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	22ff      	movs	r2, #255	@ 0xff
 8005f72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f76:	e01b      	b.n	8005fb0 <UART_Start_Receive_IT+0xa4>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	227f      	movs	r2, #127	@ 0x7f
 8005f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f80:	e016      	b.n	8005fb0 <UART_Start_Receive_IT+0xa4>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f8a:	d10d      	bne.n	8005fa8 <UART_Start_Receive_IT+0x9c>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <UART_Start_Receive_IT+0x92>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	227f      	movs	r2, #127	@ 0x7f
 8005f98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f9c:	e008      	b.n	8005fb0 <UART_Start_Receive_IT+0xa4>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	223f      	movs	r2, #63	@ 0x3f
 8005fa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005fa6:	e003      	b.n	8005fb0 <UART_Start_Receive_IT+0xa4>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2222      	movs	r2, #34	@ 0x22
 8005fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fe0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005fe2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e5      	bne.n	8005fc0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ffc:	d107      	bne.n	800600e <UART_Start_Receive_IT+0x102>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4a21      	ldr	r2, [pc, #132]	@ (8006090 <UART_Start_Receive_IT+0x184>)
 800600a:	669a      	str	r2, [r3, #104]	@ 0x68
 800600c:	e002      	b.n	8006014 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4a20      	ldr	r2, [pc, #128]	@ (8006094 <UART_Start_Receive_IT+0x188>)
 8006012:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d019      	beq.n	8006050 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800603a:	637b      	str	r3, [r7, #52]	@ 0x34
 800603c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e6      	bne.n	800601c <UART_Start_Receive_IT+0x110>
 800604e:	e018      	b.n	8006082 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	613b      	str	r3, [r7, #16]
   return(result);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f043 0320 	orr.w	r3, r3, #32
 8006064:	653b      	str	r3, [r7, #80]	@ 0x50
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800606e:	623b      	str	r3, [r7, #32]
 8006070:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	69f9      	ldr	r1, [r7, #28]
 8006074:	6a3a      	ldr	r2, [r7, #32]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	61bb      	str	r3, [r7, #24]
   return(result);
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e6      	bne.n	8006050 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	375c      	adds	r7, #92	@ 0x5c
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	0800639d 	.word	0x0800639d
 8006094:	080061e1 	.word	0x080061e1

08006098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b095      	sub	sp, #84	@ 0x54
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060be:	643b      	str	r3, [r7, #64]	@ 0x40
 80060c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e6      	bne.n	80060a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800610a:	2b01      	cmp	r3, #1
 800610c:	d118      	bne.n	8006140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60bb      	str	r3, [r7, #8]
   return(result);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	647b      	str	r3, [r7, #68]	@ 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	613b      	str	r3, [r7, #16]
   return(result);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e6      	bne.n	800610e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006154:	bf00      	nop
 8006156:	3754      	adds	r7, #84	@ 0x54
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fa3e 	bl	8005600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6979      	ldr	r1, [r7, #20]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	613b      	str	r3, [r7, #16]
   return(result);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e6      	bne.n	8006194 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fa0a 	bl	80055ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d8:	bf00      	nop
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b09c      	sub	sp, #112	@ 0x70
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061f8:	2b22      	cmp	r3, #34	@ 0x22
 80061fa:	f040 80be 	bne.w	800637a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006204:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006208:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800620c:	b2d9      	uxtb	r1, r3
 800620e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006212:	b2da      	uxtb	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006218:	400a      	ands	r2, r1
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 80a3 	bne.w	800638e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800625c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006266:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006268:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800626c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e6      	bne.n	8006248 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3308      	adds	r3, #8
 8006280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800628a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	667b      	str	r3, [r7, #100]	@ 0x64
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800629a:	647a      	str	r2, [r7, #68]	@ 0x44
 800629c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e5      	bne.n	800627a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a34      	ldr	r2, [pc, #208]	@ (8006398 <UART_RxISR_8BIT+0x1b8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d01f      	beq.n	800630c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d018      	beq.n	800630c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	623b      	str	r3, [r7, #32]
   return(result);
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e6      	bne.n	80062da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006310:	2b01      	cmp	r3, #1
 8006312:	d12e      	bne.n	8006372 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	60fb      	str	r3, [r7, #12]
   return(result);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0310 	bic.w	r3, r3, #16
 800632e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	69b9      	ldr	r1, [r7, #24]
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	617b      	str	r3, [r7, #20]
   return(result);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e6      	bne.n	800631a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b10      	cmp	r3, #16
 8006358:	d103      	bne.n	8006362 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2210      	movs	r2, #16
 8006360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff f952 	bl	8005614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006370:	e00d      	b.n	800638e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fb fa68 	bl	8001848 <HAL_UART_RxCpltCallback>
}
 8006378:	e009      	b.n	800638e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	8b1b      	ldrh	r3, [r3, #24]
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0208 	orr.w	r2, r2, #8
 800638a:	b292      	uxth	r2, r2
 800638c:	831a      	strh	r2, [r3, #24]
}
 800638e:	bf00      	nop
 8006390:	3770      	adds	r7, #112	@ 0x70
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40008000 	.word	0x40008000

0800639c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b09c      	sub	sp, #112	@ 0x70
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063b4:	2b22      	cmp	r3, #34	@ 0x22
 80063b6:	f040 80be 	bne.w	8006536 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80063c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80063ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80063ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80063d2:	4013      	ands	r3, r2
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063de:	1c9a      	adds	r2, r3, #2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 80a3 	bne.w	800654a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006414:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006418:	667b      	str	r3, [r7, #100]	@ 0x64
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006422:	657b      	str	r3, [r7, #84]	@ 0x54
 8006424:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006428:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e6      	bne.n	8006404 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3308      	adds	r3, #8
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	663b      	str	r3, [r7, #96]	@ 0x60
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3308      	adds	r3, #8
 8006454:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006456:	643a      	str	r2, [r7, #64]	@ 0x40
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800645c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e5      	bne.n	8006436 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a34      	ldr	r2, [pc, #208]	@ (8006554 <UART_RxISR_16BIT+0x1b8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d01f      	beq.n	80064c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d018      	beq.n	80064c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e6      	bne.n	8006496 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d12e      	bne.n	800652e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f023 0310 	bic.w	r3, r3, #16
 80064ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6979      	ldr	r1, [r7, #20]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	613b      	str	r3, [r7, #16]
   return(result);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e6      	bne.n	80064d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b10      	cmp	r3, #16
 8006514:	d103      	bne.n	800651e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2210      	movs	r2, #16
 800651c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff f874 	bl	8005614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800652c:	e00d      	b.n	800654a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fb f98a 	bl	8001848 <HAL_UART_RxCpltCallback>
}
 8006534:	e009      	b.n	800654a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	8b1b      	ldrh	r3, [r3, #24]
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0208 	orr.w	r2, r2, #8
 8006546:	b292      	uxth	r2, r2
 8006548:	831a      	strh	r2, [r3, #24]
}
 800654a:	bf00      	nop
 800654c:	3770      	adds	r7, #112	@ 0x70
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40008000 	.word	0x40008000

08006558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <__cvt>:
 800656c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	ec57 6b10 	vmov	r6, r7, d0
 8006574:	2f00      	cmp	r7, #0
 8006576:	460c      	mov	r4, r1
 8006578:	4619      	mov	r1, r3
 800657a:	463b      	mov	r3, r7
 800657c:	bfbb      	ittet	lt
 800657e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006582:	461f      	movlt	r7, r3
 8006584:	2300      	movge	r3, #0
 8006586:	232d      	movlt	r3, #45	@ 0x2d
 8006588:	700b      	strb	r3, [r1, #0]
 800658a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800658c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006590:	4691      	mov	r9, r2
 8006592:	f023 0820 	bic.w	r8, r3, #32
 8006596:	bfbc      	itt	lt
 8006598:	4632      	movlt	r2, r6
 800659a:	4616      	movlt	r6, r2
 800659c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065a0:	d005      	beq.n	80065ae <__cvt+0x42>
 80065a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065a6:	d100      	bne.n	80065aa <__cvt+0x3e>
 80065a8:	3401      	adds	r4, #1
 80065aa:	2102      	movs	r1, #2
 80065ac:	e000      	b.n	80065b0 <__cvt+0x44>
 80065ae:	2103      	movs	r1, #3
 80065b0:	ab03      	add	r3, sp, #12
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	ab02      	add	r3, sp, #8
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	ec47 6b10 	vmov	d0, r6, r7
 80065bc:	4653      	mov	r3, sl
 80065be:	4622      	mov	r2, r4
 80065c0:	f000 fe6e 	bl	80072a0 <_dtoa_r>
 80065c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065c8:	4605      	mov	r5, r0
 80065ca:	d119      	bne.n	8006600 <__cvt+0x94>
 80065cc:	f019 0f01 	tst.w	r9, #1
 80065d0:	d00e      	beq.n	80065f0 <__cvt+0x84>
 80065d2:	eb00 0904 	add.w	r9, r0, r4
 80065d6:	2200      	movs	r2, #0
 80065d8:	2300      	movs	r3, #0
 80065da:	4630      	mov	r0, r6
 80065dc:	4639      	mov	r1, r7
 80065de:	f7fa fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 80065e2:	b108      	cbz	r0, 80065e8 <__cvt+0x7c>
 80065e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80065e8:	2230      	movs	r2, #48	@ 0x30
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	454b      	cmp	r3, r9
 80065ee:	d31e      	bcc.n	800662e <__cvt+0xc2>
 80065f0:	9b03      	ldr	r3, [sp, #12]
 80065f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065f4:	1b5b      	subs	r3, r3, r5
 80065f6:	4628      	mov	r0, r5
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	b004      	add	sp, #16
 80065fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006600:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006604:	eb00 0904 	add.w	r9, r0, r4
 8006608:	d1e5      	bne.n	80065d6 <__cvt+0x6a>
 800660a:	7803      	ldrb	r3, [r0, #0]
 800660c:	2b30      	cmp	r3, #48	@ 0x30
 800660e:	d10a      	bne.n	8006626 <__cvt+0xba>
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	4630      	mov	r0, r6
 8006616:	4639      	mov	r1, r7
 8006618:	f7fa fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800661c:	b918      	cbnz	r0, 8006626 <__cvt+0xba>
 800661e:	f1c4 0401 	rsb	r4, r4, #1
 8006622:	f8ca 4000 	str.w	r4, [sl]
 8006626:	f8da 3000 	ldr.w	r3, [sl]
 800662a:	4499      	add	r9, r3
 800662c:	e7d3      	b.n	80065d6 <__cvt+0x6a>
 800662e:	1c59      	adds	r1, r3, #1
 8006630:	9103      	str	r1, [sp, #12]
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	e7d9      	b.n	80065ea <__cvt+0x7e>

08006636 <__exponent>:
 8006636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006638:	2900      	cmp	r1, #0
 800663a:	bfba      	itte	lt
 800663c:	4249      	neglt	r1, r1
 800663e:	232d      	movlt	r3, #45	@ 0x2d
 8006640:	232b      	movge	r3, #43	@ 0x2b
 8006642:	2909      	cmp	r1, #9
 8006644:	7002      	strb	r2, [r0, #0]
 8006646:	7043      	strb	r3, [r0, #1]
 8006648:	dd29      	ble.n	800669e <__exponent+0x68>
 800664a:	f10d 0307 	add.w	r3, sp, #7
 800664e:	461d      	mov	r5, r3
 8006650:	270a      	movs	r7, #10
 8006652:	461a      	mov	r2, r3
 8006654:	fbb1 f6f7 	udiv	r6, r1, r7
 8006658:	fb07 1416 	mls	r4, r7, r6, r1
 800665c:	3430      	adds	r4, #48	@ 0x30
 800665e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006662:	460c      	mov	r4, r1
 8006664:	2c63      	cmp	r4, #99	@ 0x63
 8006666:	f103 33ff 	add.w	r3, r3, #4294967295
 800666a:	4631      	mov	r1, r6
 800666c:	dcf1      	bgt.n	8006652 <__exponent+0x1c>
 800666e:	3130      	adds	r1, #48	@ 0x30
 8006670:	1e94      	subs	r4, r2, #2
 8006672:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006676:	1c41      	adds	r1, r0, #1
 8006678:	4623      	mov	r3, r4
 800667a:	42ab      	cmp	r3, r5
 800667c:	d30a      	bcc.n	8006694 <__exponent+0x5e>
 800667e:	f10d 0309 	add.w	r3, sp, #9
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	42ac      	cmp	r4, r5
 8006686:	bf88      	it	hi
 8006688:	2300      	movhi	r3, #0
 800668a:	3302      	adds	r3, #2
 800668c:	4403      	add	r3, r0
 800668e:	1a18      	subs	r0, r3, r0
 8006690:	b003      	add	sp, #12
 8006692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006694:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006698:	f801 6f01 	strb.w	r6, [r1, #1]!
 800669c:	e7ed      	b.n	800667a <__exponent+0x44>
 800669e:	2330      	movs	r3, #48	@ 0x30
 80066a0:	3130      	adds	r1, #48	@ 0x30
 80066a2:	7083      	strb	r3, [r0, #2]
 80066a4:	70c1      	strb	r1, [r0, #3]
 80066a6:	1d03      	adds	r3, r0, #4
 80066a8:	e7f1      	b.n	800668e <__exponent+0x58>
	...

080066ac <_printf_float>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	b08d      	sub	sp, #52	@ 0x34
 80066b2:	460c      	mov	r4, r1
 80066b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066b8:	4616      	mov	r6, r2
 80066ba:	461f      	mov	r7, r3
 80066bc:	4605      	mov	r5, r0
 80066be:	f000 fced 	bl	800709c <_localeconv_r>
 80066c2:	6803      	ldr	r3, [r0, #0]
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7f9 fdd2 	bl	8000270 <strlen>
 80066cc:	2300      	movs	r3, #0
 80066ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80066d0:	f8d8 3000 	ldr.w	r3, [r8]
 80066d4:	9005      	str	r0, [sp, #20]
 80066d6:	3307      	adds	r3, #7
 80066d8:	f023 0307 	bic.w	r3, r3, #7
 80066dc:	f103 0208 	add.w	r2, r3, #8
 80066e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066e4:	f8d4 b000 	ldr.w	fp, [r4]
 80066e8:	f8c8 2000 	str.w	r2, [r8]
 80066ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066f4:	9307      	str	r3, [sp, #28]
 80066f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80066fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006702:	4b9c      	ldr	r3, [pc, #624]	@ (8006974 <_printf_float+0x2c8>)
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	f7fa fa10 	bl	8000b2c <__aeabi_dcmpun>
 800670c:	bb70      	cbnz	r0, 800676c <_printf_float+0xc0>
 800670e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006712:	4b98      	ldr	r3, [pc, #608]	@ (8006974 <_printf_float+0x2c8>)
 8006714:	f04f 32ff 	mov.w	r2, #4294967295
 8006718:	f7fa f9ea 	bl	8000af0 <__aeabi_dcmple>
 800671c:	bb30      	cbnz	r0, 800676c <_printf_float+0xc0>
 800671e:	2200      	movs	r2, #0
 8006720:	2300      	movs	r3, #0
 8006722:	4640      	mov	r0, r8
 8006724:	4649      	mov	r1, r9
 8006726:	f7fa f9d9 	bl	8000adc <__aeabi_dcmplt>
 800672a:	b110      	cbz	r0, 8006732 <_printf_float+0x86>
 800672c:	232d      	movs	r3, #45	@ 0x2d
 800672e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006732:	4a91      	ldr	r2, [pc, #580]	@ (8006978 <_printf_float+0x2cc>)
 8006734:	4b91      	ldr	r3, [pc, #580]	@ (800697c <_printf_float+0x2d0>)
 8006736:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800673a:	bf94      	ite	ls
 800673c:	4690      	movls	r8, r2
 800673e:	4698      	movhi	r8, r3
 8006740:	2303      	movs	r3, #3
 8006742:	6123      	str	r3, [r4, #16]
 8006744:	f02b 0304 	bic.w	r3, fp, #4
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	f04f 0900 	mov.w	r9, #0
 800674e:	9700      	str	r7, [sp, #0]
 8006750:	4633      	mov	r3, r6
 8006752:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006754:	4621      	mov	r1, r4
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f9d2 	bl	8006b00 <_printf_common>
 800675c:	3001      	adds	r0, #1
 800675e:	f040 808d 	bne.w	800687c <_printf_float+0x1d0>
 8006762:	f04f 30ff 	mov.w	r0, #4294967295
 8006766:	b00d      	add	sp, #52	@ 0x34
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	4642      	mov	r2, r8
 800676e:	464b      	mov	r3, r9
 8006770:	4640      	mov	r0, r8
 8006772:	4649      	mov	r1, r9
 8006774:	f7fa f9da 	bl	8000b2c <__aeabi_dcmpun>
 8006778:	b140      	cbz	r0, 800678c <_printf_float+0xe0>
 800677a:	464b      	mov	r3, r9
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfbc      	itt	lt
 8006780:	232d      	movlt	r3, #45	@ 0x2d
 8006782:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006786:	4a7e      	ldr	r2, [pc, #504]	@ (8006980 <_printf_float+0x2d4>)
 8006788:	4b7e      	ldr	r3, [pc, #504]	@ (8006984 <_printf_float+0x2d8>)
 800678a:	e7d4      	b.n	8006736 <_printf_float+0x8a>
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006792:	9206      	str	r2, [sp, #24]
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	d13b      	bne.n	8006810 <_printf_float+0x164>
 8006798:	2306      	movs	r3, #6
 800679a:	6063      	str	r3, [r4, #4]
 800679c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067a0:	2300      	movs	r3, #0
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	9303      	str	r3, [sp, #12]
 80067a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80067a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067ac:	ab09      	add	r3, sp, #36	@ 0x24
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	6861      	ldr	r1, [r4, #4]
 80067b2:	ec49 8b10 	vmov	d0, r8, r9
 80067b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067ba:	4628      	mov	r0, r5
 80067bc:	f7ff fed6 	bl	800656c <__cvt>
 80067c0:	9b06      	ldr	r3, [sp, #24]
 80067c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067c4:	2b47      	cmp	r3, #71	@ 0x47
 80067c6:	4680      	mov	r8, r0
 80067c8:	d129      	bne.n	800681e <_printf_float+0x172>
 80067ca:	1cc8      	adds	r0, r1, #3
 80067cc:	db02      	blt.n	80067d4 <_printf_float+0x128>
 80067ce:	6863      	ldr	r3, [r4, #4]
 80067d0:	4299      	cmp	r1, r3
 80067d2:	dd41      	ble.n	8006858 <_printf_float+0x1ac>
 80067d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80067d8:	fa5f fa8a 	uxtb.w	sl, sl
 80067dc:	3901      	subs	r1, #1
 80067de:	4652      	mov	r2, sl
 80067e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80067e6:	f7ff ff26 	bl	8006636 <__exponent>
 80067ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067ec:	1813      	adds	r3, r2, r0
 80067ee:	2a01      	cmp	r2, #1
 80067f0:	4681      	mov	r9, r0
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	dc02      	bgt.n	80067fc <_printf_float+0x150>
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	07d2      	lsls	r2, r2, #31
 80067fa:	d501      	bpl.n	8006800 <_printf_float+0x154>
 80067fc:	3301      	adds	r3, #1
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0a2      	beq.n	800674e <_printf_float+0xa2>
 8006808:	232d      	movs	r3, #45	@ 0x2d
 800680a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800680e:	e79e      	b.n	800674e <_printf_float+0xa2>
 8006810:	9a06      	ldr	r2, [sp, #24]
 8006812:	2a47      	cmp	r2, #71	@ 0x47
 8006814:	d1c2      	bne.n	800679c <_printf_float+0xf0>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1c0      	bne.n	800679c <_printf_float+0xf0>
 800681a:	2301      	movs	r3, #1
 800681c:	e7bd      	b.n	800679a <_printf_float+0xee>
 800681e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006822:	d9db      	bls.n	80067dc <_printf_float+0x130>
 8006824:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006828:	d118      	bne.n	800685c <_printf_float+0x1b0>
 800682a:	2900      	cmp	r1, #0
 800682c:	6863      	ldr	r3, [r4, #4]
 800682e:	dd0b      	ble.n	8006848 <_printf_float+0x19c>
 8006830:	6121      	str	r1, [r4, #16]
 8006832:	b913      	cbnz	r3, 800683a <_printf_float+0x18e>
 8006834:	6822      	ldr	r2, [r4, #0]
 8006836:	07d0      	lsls	r0, r2, #31
 8006838:	d502      	bpl.n	8006840 <_printf_float+0x194>
 800683a:	3301      	adds	r3, #1
 800683c:	440b      	add	r3, r1
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006842:	f04f 0900 	mov.w	r9, #0
 8006846:	e7db      	b.n	8006800 <_printf_float+0x154>
 8006848:	b913      	cbnz	r3, 8006850 <_printf_float+0x1a4>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	07d2      	lsls	r2, r2, #31
 800684e:	d501      	bpl.n	8006854 <_printf_float+0x1a8>
 8006850:	3302      	adds	r3, #2
 8006852:	e7f4      	b.n	800683e <_printf_float+0x192>
 8006854:	2301      	movs	r3, #1
 8006856:	e7f2      	b.n	800683e <_printf_float+0x192>
 8006858:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800685c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800685e:	4299      	cmp	r1, r3
 8006860:	db05      	blt.n	800686e <_printf_float+0x1c2>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	6121      	str	r1, [r4, #16]
 8006866:	07d8      	lsls	r0, r3, #31
 8006868:	d5ea      	bpl.n	8006840 <_printf_float+0x194>
 800686a:	1c4b      	adds	r3, r1, #1
 800686c:	e7e7      	b.n	800683e <_printf_float+0x192>
 800686e:	2900      	cmp	r1, #0
 8006870:	bfd4      	ite	le
 8006872:	f1c1 0202 	rsble	r2, r1, #2
 8006876:	2201      	movgt	r2, #1
 8006878:	4413      	add	r3, r2
 800687a:	e7e0      	b.n	800683e <_printf_float+0x192>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	055a      	lsls	r2, r3, #21
 8006880:	d407      	bmi.n	8006892 <_printf_float+0x1e6>
 8006882:	6923      	ldr	r3, [r4, #16]
 8006884:	4642      	mov	r2, r8
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	d12b      	bne.n	80068e8 <_printf_float+0x23c>
 8006890:	e767      	b.n	8006762 <_printf_float+0xb6>
 8006892:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006896:	f240 80dd 	bls.w	8006a54 <_printf_float+0x3a8>
 800689a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800689e:	2200      	movs	r2, #0
 80068a0:	2300      	movs	r3, #0
 80068a2:	f7fa f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d033      	beq.n	8006912 <_printf_float+0x266>
 80068aa:	4a37      	ldr	r2, [pc, #220]	@ (8006988 <_printf_float+0x2dc>)
 80068ac:	2301      	movs	r3, #1
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b8      	blx	r7
 80068b4:	3001      	adds	r0, #1
 80068b6:	f43f af54 	beq.w	8006762 <_printf_float+0xb6>
 80068ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068be:	4543      	cmp	r3, r8
 80068c0:	db02      	blt.n	80068c8 <_printf_float+0x21c>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	07d8      	lsls	r0, r3, #31
 80068c6:	d50f      	bpl.n	80068e8 <_printf_float+0x23c>
 80068c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af45 	beq.w	8006762 <_printf_float+0xb6>
 80068d8:	f04f 0900 	mov.w	r9, #0
 80068dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80068e0:	f104 0a1a 	add.w	sl, r4, #26
 80068e4:	45c8      	cmp	r8, r9
 80068e6:	dc09      	bgt.n	80068fc <_printf_float+0x250>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	079b      	lsls	r3, r3, #30
 80068ec:	f100 8103 	bmi.w	8006af6 <_printf_float+0x44a>
 80068f0:	68e0      	ldr	r0, [r4, #12]
 80068f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f4:	4298      	cmp	r0, r3
 80068f6:	bfb8      	it	lt
 80068f8:	4618      	movlt	r0, r3
 80068fa:	e734      	b.n	8006766 <_printf_float+0xba>
 80068fc:	2301      	movs	r3, #1
 80068fe:	4652      	mov	r2, sl
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f af2b 	beq.w	8006762 <_printf_float+0xb6>
 800690c:	f109 0901 	add.w	r9, r9, #1
 8006910:	e7e8      	b.n	80068e4 <_printf_float+0x238>
 8006912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	dc39      	bgt.n	800698c <_printf_float+0x2e0>
 8006918:	4a1b      	ldr	r2, [pc, #108]	@ (8006988 <_printf_float+0x2dc>)
 800691a:	2301      	movs	r3, #1
 800691c:	4631      	mov	r1, r6
 800691e:	4628      	mov	r0, r5
 8006920:	47b8      	blx	r7
 8006922:	3001      	adds	r0, #1
 8006924:	f43f af1d 	beq.w	8006762 <_printf_float+0xb6>
 8006928:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800692c:	ea59 0303 	orrs.w	r3, r9, r3
 8006930:	d102      	bne.n	8006938 <_printf_float+0x28c>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	07d9      	lsls	r1, r3, #31
 8006936:	d5d7      	bpl.n	80068e8 <_printf_float+0x23c>
 8006938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	f43f af0d 	beq.w	8006762 <_printf_float+0xb6>
 8006948:	f04f 0a00 	mov.w	sl, #0
 800694c:	f104 0b1a 	add.w	fp, r4, #26
 8006950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006952:	425b      	negs	r3, r3
 8006954:	4553      	cmp	r3, sl
 8006956:	dc01      	bgt.n	800695c <_printf_float+0x2b0>
 8006958:	464b      	mov	r3, r9
 800695a:	e793      	b.n	8006884 <_printf_float+0x1d8>
 800695c:	2301      	movs	r3, #1
 800695e:	465a      	mov	r2, fp
 8006960:	4631      	mov	r1, r6
 8006962:	4628      	mov	r0, r5
 8006964:	47b8      	blx	r7
 8006966:	3001      	adds	r0, #1
 8006968:	f43f aefb 	beq.w	8006762 <_printf_float+0xb6>
 800696c:	f10a 0a01 	add.w	sl, sl, #1
 8006970:	e7ee      	b.n	8006950 <_printf_float+0x2a4>
 8006972:	bf00      	nop
 8006974:	7fefffff 	.word	0x7fefffff
 8006978:	080092e8 	.word	0x080092e8
 800697c:	080092ec 	.word	0x080092ec
 8006980:	080092f0 	.word	0x080092f0
 8006984:	080092f4 	.word	0x080092f4
 8006988:	080092f8 	.word	0x080092f8
 800698c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800698e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006992:	4553      	cmp	r3, sl
 8006994:	bfa8      	it	ge
 8006996:	4653      	movge	r3, sl
 8006998:	2b00      	cmp	r3, #0
 800699a:	4699      	mov	r9, r3
 800699c:	dc36      	bgt.n	8006a0c <_printf_float+0x360>
 800699e:	f04f 0b00 	mov.w	fp, #0
 80069a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069a6:	f104 021a 	add.w	r2, r4, #26
 80069aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069ac:	9306      	str	r3, [sp, #24]
 80069ae:	eba3 0309 	sub.w	r3, r3, r9
 80069b2:	455b      	cmp	r3, fp
 80069b4:	dc31      	bgt.n	8006a1a <_printf_float+0x36e>
 80069b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b8:	459a      	cmp	sl, r3
 80069ba:	dc3a      	bgt.n	8006a32 <_printf_float+0x386>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	07da      	lsls	r2, r3, #31
 80069c0:	d437      	bmi.n	8006a32 <_printf_float+0x386>
 80069c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c4:	ebaa 0903 	sub.w	r9, sl, r3
 80069c8:	9b06      	ldr	r3, [sp, #24]
 80069ca:	ebaa 0303 	sub.w	r3, sl, r3
 80069ce:	4599      	cmp	r9, r3
 80069d0:	bfa8      	it	ge
 80069d2:	4699      	movge	r9, r3
 80069d4:	f1b9 0f00 	cmp.w	r9, #0
 80069d8:	dc33      	bgt.n	8006a42 <_printf_float+0x396>
 80069da:	f04f 0800 	mov.w	r8, #0
 80069de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069e2:	f104 0b1a 	add.w	fp, r4, #26
 80069e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e8:	ebaa 0303 	sub.w	r3, sl, r3
 80069ec:	eba3 0309 	sub.w	r3, r3, r9
 80069f0:	4543      	cmp	r3, r8
 80069f2:	f77f af79 	ble.w	80068e8 <_printf_float+0x23c>
 80069f6:	2301      	movs	r3, #1
 80069f8:	465a      	mov	r2, fp
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b8      	blx	r7
 8006a00:	3001      	adds	r0, #1
 8006a02:	f43f aeae 	beq.w	8006762 <_printf_float+0xb6>
 8006a06:	f108 0801 	add.w	r8, r8, #1
 8006a0a:	e7ec      	b.n	80069e6 <_printf_float+0x33a>
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	d1c2      	bne.n	800699e <_printf_float+0x2f2>
 8006a18:	e6a3      	b.n	8006762 <_printf_float+0xb6>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	4628      	mov	r0, r5
 8006a20:	9206      	str	r2, [sp, #24]
 8006a22:	47b8      	blx	r7
 8006a24:	3001      	adds	r0, #1
 8006a26:	f43f ae9c 	beq.w	8006762 <_printf_float+0xb6>
 8006a2a:	9a06      	ldr	r2, [sp, #24]
 8006a2c:	f10b 0b01 	add.w	fp, fp, #1
 8006a30:	e7bb      	b.n	80069aa <_printf_float+0x2fe>
 8006a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d1c0      	bne.n	80069c2 <_printf_float+0x316>
 8006a40:	e68f      	b.n	8006762 <_printf_float+0xb6>
 8006a42:	9a06      	ldr	r2, [sp, #24]
 8006a44:	464b      	mov	r3, r9
 8006a46:	4442      	add	r2, r8
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d1c3      	bne.n	80069da <_printf_float+0x32e>
 8006a52:	e686      	b.n	8006762 <_printf_float+0xb6>
 8006a54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a58:	f1ba 0f01 	cmp.w	sl, #1
 8006a5c:	dc01      	bgt.n	8006a62 <_printf_float+0x3b6>
 8006a5e:	07db      	lsls	r3, r3, #31
 8006a60:	d536      	bpl.n	8006ad0 <_printf_float+0x424>
 8006a62:	2301      	movs	r3, #1
 8006a64:	4642      	mov	r2, r8
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f ae78 	beq.w	8006762 <_printf_float+0xb6>
 8006a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f43f ae70 	beq.w	8006762 <_printf_float+0xb6>
 8006a82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a86:	2200      	movs	r2, #0
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a8e:	f7fa f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a92:	b9c0      	cbnz	r0, 8006ac6 <_printf_float+0x41a>
 8006a94:	4653      	mov	r3, sl
 8006a96:	f108 0201 	add.w	r2, r8, #1
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d10c      	bne.n	8006abe <_printf_float+0x412>
 8006aa4:	e65d      	b.n	8006762 <_printf_float+0xb6>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	465a      	mov	r2, fp
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f ae56 	beq.w	8006762 <_printf_float+0xb6>
 8006ab6:	f108 0801 	add.w	r8, r8, #1
 8006aba:	45d0      	cmp	r8, sl
 8006abc:	dbf3      	blt.n	8006aa6 <_printf_float+0x3fa>
 8006abe:	464b      	mov	r3, r9
 8006ac0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ac4:	e6df      	b.n	8006886 <_printf_float+0x1da>
 8006ac6:	f04f 0800 	mov.w	r8, #0
 8006aca:	f104 0b1a 	add.w	fp, r4, #26
 8006ace:	e7f4      	b.n	8006aba <_printf_float+0x40e>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	e7e1      	b.n	8006a9a <_printf_float+0x3ee>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	464a      	mov	r2, r9
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f43f ae3e 	beq.w	8006762 <_printf_float+0xb6>
 8006ae6:	f108 0801 	add.w	r8, r8, #1
 8006aea:	68e3      	ldr	r3, [r4, #12]
 8006aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006aee:	1a5b      	subs	r3, r3, r1
 8006af0:	4543      	cmp	r3, r8
 8006af2:	dcf0      	bgt.n	8006ad6 <_printf_float+0x42a>
 8006af4:	e6fc      	b.n	80068f0 <_printf_float+0x244>
 8006af6:	f04f 0800 	mov.w	r8, #0
 8006afa:	f104 0919 	add.w	r9, r4, #25
 8006afe:	e7f4      	b.n	8006aea <_printf_float+0x43e>

08006b00 <_printf_common>:
 8006b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	4616      	mov	r6, r2
 8006b06:	4698      	mov	r8, r3
 8006b08:	688a      	ldr	r2, [r1, #8]
 8006b0a:	690b      	ldr	r3, [r1, #16]
 8006b0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	bfb8      	it	lt
 8006b14:	4613      	movlt	r3, r2
 8006b16:	6033      	str	r3, [r6, #0]
 8006b18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b1c:	4607      	mov	r7, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	b10a      	cbz	r2, 8006b26 <_printf_common+0x26>
 8006b22:	3301      	adds	r3, #1
 8006b24:	6033      	str	r3, [r6, #0]
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	0699      	lsls	r1, r3, #26
 8006b2a:	bf42      	ittt	mi
 8006b2c:	6833      	ldrmi	r3, [r6, #0]
 8006b2e:	3302      	addmi	r3, #2
 8006b30:	6033      	strmi	r3, [r6, #0]
 8006b32:	6825      	ldr	r5, [r4, #0]
 8006b34:	f015 0506 	ands.w	r5, r5, #6
 8006b38:	d106      	bne.n	8006b48 <_printf_common+0x48>
 8006b3a:	f104 0a19 	add.w	sl, r4, #25
 8006b3e:	68e3      	ldr	r3, [r4, #12]
 8006b40:	6832      	ldr	r2, [r6, #0]
 8006b42:	1a9b      	subs	r3, r3, r2
 8006b44:	42ab      	cmp	r3, r5
 8006b46:	dc26      	bgt.n	8006b96 <_printf_common+0x96>
 8006b48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	3b00      	subs	r3, #0
 8006b50:	bf18      	it	ne
 8006b52:	2301      	movne	r3, #1
 8006b54:	0692      	lsls	r2, r2, #26
 8006b56:	d42b      	bmi.n	8006bb0 <_printf_common+0xb0>
 8006b58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b5c:	4641      	mov	r1, r8
 8006b5e:	4638      	mov	r0, r7
 8006b60:	47c8      	blx	r9
 8006b62:	3001      	adds	r0, #1
 8006b64:	d01e      	beq.n	8006ba4 <_printf_common+0xa4>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	f003 0306 	and.w	r3, r3, #6
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	bf02      	ittt	eq
 8006b72:	68e5      	ldreq	r5, [r4, #12]
 8006b74:	6833      	ldreq	r3, [r6, #0]
 8006b76:	1aed      	subeq	r5, r5, r3
 8006b78:	68a3      	ldr	r3, [r4, #8]
 8006b7a:	bf0c      	ite	eq
 8006b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b80:	2500      	movne	r5, #0
 8006b82:	4293      	cmp	r3, r2
 8006b84:	bfc4      	itt	gt
 8006b86:	1a9b      	subgt	r3, r3, r2
 8006b88:	18ed      	addgt	r5, r5, r3
 8006b8a:	2600      	movs	r6, #0
 8006b8c:	341a      	adds	r4, #26
 8006b8e:	42b5      	cmp	r5, r6
 8006b90:	d11a      	bne.n	8006bc8 <_printf_common+0xc8>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e008      	b.n	8006ba8 <_printf_common+0xa8>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4652      	mov	r2, sl
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	47c8      	blx	r9
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d103      	bne.n	8006bac <_printf_common+0xac>
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bac:	3501      	adds	r5, #1
 8006bae:	e7c6      	b.n	8006b3e <_printf_common+0x3e>
 8006bb0:	18e1      	adds	r1, r4, r3
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	2030      	movs	r0, #48	@ 0x30
 8006bb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bba:	4422      	add	r2, r4
 8006bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	e7c7      	b.n	8006b58 <_printf_common+0x58>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4622      	mov	r2, r4
 8006bcc:	4641      	mov	r1, r8
 8006bce:	4638      	mov	r0, r7
 8006bd0:	47c8      	blx	r9
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d0e6      	beq.n	8006ba4 <_printf_common+0xa4>
 8006bd6:	3601      	adds	r6, #1
 8006bd8:	e7d9      	b.n	8006b8e <_printf_common+0x8e>
	...

08006bdc <_printf_i>:
 8006bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	7e0f      	ldrb	r7, [r1, #24]
 8006be2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006be4:	2f78      	cmp	r7, #120	@ 0x78
 8006be6:	4691      	mov	r9, r2
 8006be8:	4680      	mov	r8, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	469a      	mov	sl, r3
 8006bee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bf2:	d807      	bhi.n	8006c04 <_printf_i+0x28>
 8006bf4:	2f62      	cmp	r7, #98	@ 0x62
 8006bf6:	d80a      	bhi.n	8006c0e <_printf_i+0x32>
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	f000 80d2 	beq.w	8006da2 <_printf_i+0x1c6>
 8006bfe:	2f58      	cmp	r7, #88	@ 0x58
 8006c00:	f000 80b9 	beq.w	8006d76 <_printf_i+0x19a>
 8006c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c0c:	e03a      	b.n	8006c84 <_printf_i+0xa8>
 8006c0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c12:	2b15      	cmp	r3, #21
 8006c14:	d8f6      	bhi.n	8006c04 <_printf_i+0x28>
 8006c16:	a101      	add	r1, pc, #4	@ (adr r1, 8006c1c <_printf_i+0x40>)
 8006c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c1c:	08006c75 	.word	0x08006c75
 8006c20:	08006c89 	.word	0x08006c89
 8006c24:	08006c05 	.word	0x08006c05
 8006c28:	08006c05 	.word	0x08006c05
 8006c2c:	08006c05 	.word	0x08006c05
 8006c30:	08006c05 	.word	0x08006c05
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006c05 	.word	0x08006c05
 8006c3c:	08006c05 	.word	0x08006c05
 8006c40:	08006c05 	.word	0x08006c05
 8006c44:	08006c05 	.word	0x08006c05
 8006c48:	08006d89 	.word	0x08006d89
 8006c4c:	08006cb3 	.word	0x08006cb3
 8006c50:	08006d43 	.word	0x08006d43
 8006c54:	08006c05 	.word	0x08006c05
 8006c58:	08006c05 	.word	0x08006c05
 8006c5c:	08006dab 	.word	0x08006dab
 8006c60:	08006c05 	.word	0x08006c05
 8006c64:	08006cb3 	.word	0x08006cb3
 8006c68:	08006c05 	.word	0x08006c05
 8006c6c:	08006c05 	.word	0x08006c05
 8006c70:	08006d4b 	.word	0x08006d4b
 8006c74:	6833      	ldr	r3, [r6, #0]
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6032      	str	r2, [r6, #0]
 8006c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c84:	2301      	movs	r3, #1
 8006c86:	e09d      	b.n	8006dc4 <_printf_i+0x1e8>
 8006c88:	6833      	ldr	r3, [r6, #0]
 8006c8a:	6820      	ldr	r0, [r4, #0]
 8006c8c:	1d19      	adds	r1, r3, #4
 8006c8e:	6031      	str	r1, [r6, #0]
 8006c90:	0606      	lsls	r6, r0, #24
 8006c92:	d501      	bpl.n	8006c98 <_printf_i+0xbc>
 8006c94:	681d      	ldr	r5, [r3, #0]
 8006c96:	e003      	b.n	8006ca0 <_printf_i+0xc4>
 8006c98:	0645      	lsls	r5, r0, #25
 8006c9a:	d5fb      	bpl.n	8006c94 <_printf_i+0xb8>
 8006c9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ca0:	2d00      	cmp	r5, #0
 8006ca2:	da03      	bge.n	8006cac <_printf_i+0xd0>
 8006ca4:	232d      	movs	r3, #45	@ 0x2d
 8006ca6:	426d      	negs	r5, r5
 8006ca8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cac:	4859      	ldr	r0, [pc, #356]	@ (8006e14 <_printf_i+0x238>)
 8006cae:	230a      	movs	r3, #10
 8006cb0:	e011      	b.n	8006cd6 <_printf_i+0xfa>
 8006cb2:	6821      	ldr	r1, [r4, #0]
 8006cb4:	6833      	ldr	r3, [r6, #0]
 8006cb6:	0608      	lsls	r0, r1, #24
 8006cb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cbc:	d402      	bmi.n	8006cc4 <_printf_i+0xe8>
 8006cbe:	0649      	lsls	r1, r1, #25
 8006cc0:	bf48      	it	mi
 8006cc2:	b2ad      	uxthmi	r5, r5
 8006cc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cc6:	4853      	ldr	r0, [pc, #332]	@ (8006e14 <_printf_i+0x238>)
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	bf14      	ite	ne
 8006ccc:	230a      	movne	r3, #10
 8006cce:	2308      	moveq	r3, #8
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cd6:	6866      	ldr	r6, [r4, #4]
 8006cd8:	60a6      	str	r6, [r4, #8]
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	bfa2      	ittt	ge
 8006cde:	6821      	ldrge	r1, [r4, #0]
 8006ce0:	f021 0104 	bicge.w	r1, r1, #4
 8006ce4:	6021      	strge	r1, [r4, #0]
 8006ce6:	b90d      	cbnz	r5, 8006cec <_printf_i+0x110>
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	d04b      	beq.n	8006d84 <_printf_i+0x1a8>
 8006cec:	4616      	mov	r6, r2
 8006cee:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cf2:	fb03 5711 	mls	r7, r3, r1, r5
 8006cf6:	5dc7      	ldrb	r7, [r0, r7]
 8006cf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cfc:	462f      	mov	r7, r5
 8006cfe:	42bb      	cmp	r3, r7
 8006d00:	460d      	mov	r5, r1
 8006d02:	d9f4      	bls.n	8006cee <_printf_i+0x112>
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d10b      	bne.n	8006d20 <_printf_i+0x144>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	07df      	lsls	r7, r3, #31
 8006d0c:	d508      	bpl.n	8006d20 <_printf_i+0x144>
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6861      	ldr	r1, [r4, #4]
 8006d12:	4299      	cmp	r1, r3
 8006d14:	bfde      	ittt	le
 8006d16:	2330      	movle	r3, #48	@ 0x30
 8006d18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d20:	1b92      	subs	r2, r2, r6
 8006d22:	6122      	str	r2, [r4, #16]
 8006d24:	f8cd a000 	str.w	sl, [sp]
 8006d28:	464b      	mov	r3, r9
 8006d2a:	aa03      	add	r2, sp, #12
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f7ff fee6 	bl	8006b00 <_printf_common>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d14a      	bne.n	8006dce <_printf_i+0x1f2>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	b004      	add	sp, #16
 8006d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f043 0320 	orr.w	r3, r3, #32
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	4833      	ldr	r0, [pc, #204]	@ (8006e18 <_printf_i+0x23c>)
 8006d4c:	2778      	movs	r7, #120	@ 0x78
 8006d4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	6831      	ldr	r1, [r6, #0]
 8006d56:	061f      	lsls	r7, r3, #24
 8006d58:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d5c:	d402      	bmi.n	8006d64 <_printf_i+0x188>
 8006d5e:	065f      	lsls	r7, r3, #25
 8006d60:	bf48      	it	mi
 8006d62:	b2ad      	uxthmi	r5, r5
 8006d64:	6031      	str	r1, [r6, #0]
 8006d66:	07d9      	lsls	r1, r3, #31
 8006d68:	bf44      	itt	mi
 8006d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d6e:	6023      	strmi	r3, [r4, #0]
 8006d70:	b11d      	cbz	r5, 8006d7a <_printf_i+0x19e>
 8006d72:	2310      	movs	r3, #16
 8006d74:	e7ac      	b.n	8006cd0 <_printf_i+0xf4>
 8006d76:	4827      	ldr	r0, [pc, #156]	@ (8006e14 <_printf_i+0x238>)
 8006d78:	e7e9      	b.n	8006d4e <_printf_i+0x172>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	f023 0320 	bic.w	r3, r3, #32
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	e7f6      	b.n	8006d72 <_printf_i+0x196>
 8006d84:	4616      	mov	r6, r2
 8006d86:	e7bd      	b.n	8006d04 <_printf_i+0x128>
 8006d88:	6833      	ldr	r3, [r6, #0]
 8006d8a:	6825      	ldr	r5, [r4, #0]
 8006d8c:	6961      	ldr	r1, [r4, #20]
 8006d8e:	1d18      	adds	r0, r3, #4
 8006d90:	6030      	str	r0, [r6, #0]
 8006d92:	062e      	lsls	r6, r5, #24
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	d501      	bpl.n	8006d9c <_printf_i+0x1c0>
 8006d98:	6019      	str	r1, [r3, #0]
 8006d9a:	e002      	b.n	8006da2 <_printf_i+0x1c6>
 8006d9c:	0668      	lsls	r0, r5, #25
 8006d9e:	d5fb      	bpl.n	8006d98 <_printf_i+0x1bc>
 8006da0:	8019      	strh	r1, [r3, #0]
 8006da2:	2300      	movs	r3, #0
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	4616      	mov	r6, r2
 8006da8:	e7bc      	b.n	8006d24 <_printf_i+0x148>
 8006daa:	6833      	ldr	r3, [r6, #0]
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	6032      	str	r2, [r6, #0]
 8006db0:	681e      	ldr	r6, [r3, #0]
 8006db2:	6862      	ldr	r2, [r4, #4]
 8006db4:	2100      	movs	r1, #0
 8006db6:	4630      	mov	r0, r6
 8006db8:	f7f9 fa0a 	bl	80001d0 <memchr>
 8006dbc:	b108      	cbz	r0, 8006dc2 <_printf_i+0x1e6>
 8006dbe:	1b80      	subs	r0, r0, r6
 8006dc0:	6060      	str	r0, [r4, #4]
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dcc:	e7aa      	b.n	8006d24 <_printf_i+0x148>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	4632      	mov	r2, r6
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	47d0      	blx	sl
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d0ad      	beq.n	8006d38 <_printf_i+0x15c>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	079b      	lsls	r3, r3, #30
 8006de0:	d413      	bmi.n	8006e0a <_printf_i+0x22e>
 8006de2:	68e0      	ldr	r0, [r4, #12]
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	4298      	cmp	r0, r3
 8006de8:	bfb8      	it	lt
 8006dea:	4618      	movlt	r0, r3
 8006dec:	e7a6      	b.n	8006d3c <_printf_i+0x160>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4632      	mov	r2, r6
 8006df2:	4649      	mov	r1, r9
 8006df4:	4640      	mov	r0, r8
 8006df6:	47d0      	blx	sl
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d09d      	beq.n	8006d38 <_printf_i+0x15c>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	68e3      	ldr	r3, [r4, #12]
 8006e00:	9903      	ldr	r1, [sp, #12]
 8006e02:	1a5b      	subs	r3, r3, r1
 8006e04:	42ab      	cmp	r3, r5
 8006e06:	dcf2      	bgt.n	8006dee <_printf_i+0x212>
 8006e08:	e7eb      	b.n	8006de2 <_printf_i+0x206>
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	f104 0619 	add.w	r6, r4, #25
 8006e10:	e7f5      	b.n	8006dfe <_printf_i+0x222>
 8006e12:	bf00      	nop
 8006e14:	080092fa 	.word	0x080092fa
 8006e18:	0800930b 	.word	0x0800930b

08006e1c <std>:
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	b510      	push	{r4, lr}
 8006e20:	4604      	mov	r4, r0
 8006e22:	e9c0 3300 	strd	r3, r3, [r0]
 8006e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e2a:	6083      	str	r3, [r0, #8]
 8006e2c:	8181      	strh	r1, [r0, #12]
 8006e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e30:	81c2      	strh	r2, [r0, #14]
 8006e32:	6183      	str	r3, [r0, #24]
 8006e34:	4619      	mov	r1, r3
 8006e36:	2208      	movs	r2, #8
 8006e38:	305c      	adds	r0, #92	@ 0x5c
 8006e3a:	f000 f926 	bl	800708a <memset>
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e74 <std+0x58>)
 8006e40:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <std+0x5c>)
 8006e44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e46:	4b0d      	ldr	r3, [pc, #52]	@ (8006e7c <std+0x60>)
 8006e48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e80 <std+0x64>)
 8006e4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <std+0x68>)
 8006e50:	6224      	str	r4, [r4, #32]
 8006e52:	429c      	cmp	r4, r3
 8006e54:	d006      	beq.n	8006e64 <std+0x48>
 8006e56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e5a:	4294      	cmp	r4, r2
 8006e5c:	d002      	beq.n	8006e64 <std+0x48>
 8006e5e:	33d0      	adds	r3, #208	@ 0xd0
 8006e60:	429c      	cmp	r4, r3
 8006e62:	d105      	bne.n	8006e70 <std+0x54>
 8006e64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e6c:	f000 b98a 	b.w	8007184 <__retarget_lock_init_recursive>
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	bf00      	nop
 8006e74:	08007005 	.word	0x08007005
 8006e78:	08007027 	.word	0x08007027
 8006e7c:	0800705f 	.word	0x0800705f
 8006e80:	08007083 	.word	0x08007083
 8006e84:	2000032c 	.word	0x2000032c

08006e88 <stdio_exit_handler>:
 8006e88:	4a02      	ldr	r2, [pc, #8]	@ (8006e94 <stdio_exit_handler+0xc>)
 8006e8a:	4903      	ldr	r1, [pc, #12]	@ (8006e98 <stdio_exit_handler+0x10>)
 8006e8c:	4803      	ldr	r0, [pc, #12]	@ (8006e9c <stdio_exit_handler+0x14>)
 8006e8e:	f000 b869 	b.w	8006f64 <_fwalk_sglue>
 8006e92:	bf00      	nop
 8006e94:	20000020 	.word	0x20000020
 8006e98:	08008d69 	.word	0x08008d69
 8006e9c:	20000030 	.word	0x20000030

08006ea0 <cleanup_stdio>:
 8006ea0:	6841      	ldr	r1, [r0, #4]
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed4 <cleanup_stdio+0x34>)
 8006ea4:	4299      	cmp	r1, r3
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	d001      	beq.n	8006eb0 <cleanup_stdio+0x10>
 8006eac:	f001 ff5c 	bl	8008d68 <_fflush_r>
 8006eb0:	68a1      	ldr	r1, [r4, #8]
 8006eb2:	4b09      	ldr	r3, [pc, #36]	@ (8006ed8 <cleanup_stdio+0x38>)
 8006eb4:	4299      	cmp	r1, r3
 8006eb6:	d002      	beq.n	8006ebe <cleanup_stdio+0x1e>
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f001 ff55 	bl	8008d68 <_fflush_r>
 8006ebe:	68e1      	ldr	r1, [r4, #12]
 8006ec0:	4b06      	ldr	r3, [pc, #24]	@ (8006edc <cleanup_stdio+0x3c>)
 8006ec2:	4299      	cmp	r1, r3
 8006ec4:	d004      	beq.n	8006ed0 <cleanup_stdio+0x30>
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ecc:	f001 bf4c 	b.w	8008d68 <_fflush_r>
 8006ed0:	bd10      	pop	{r4, pc}
 8006ed2:	bf00      	nop
 8006ed4:	2000032c 	.word	0x2000032c
 8006ed8:	20000394 	.word	0x20000394
 8006edc:	200003fc 	.word	0x200003fc

08006ee0 <global_stdio_init.part.0>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <global_stdio_init.part.0+0x30>)
 8006ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8006f14 <global_stdio_init.part.0+0x34>)
 8006ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8006f18 <global_stdio_init.part.0+0x38>)
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	4620      	mov	r0, r4
 8006eec:	2200      	movs	r2, #0
 8006eee:	2104      	movs	r1, #4
 8006ef0:	f7ff ff94 	bl	8006e1c <std>
 8006ef4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ef8:	2201      	movs	r2, #1
 8006efa:	2109      	movs	r1, #9
 8006efc:	f7ff ff8e 	bl	8006e1c <std>
 8006f00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f04:	2202      	movs	r2, #2
 8006f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f0a:	2112      	movs	r1, #18
 8006f0c:	f7ff bf86 	b.w	8006e1c <std>
 8006f10:	20000464 	.word	0x20000464
 8006f14:	2000032c 	.word	0x2000032c
 8006f18:	08006e89 	.word	0x08006e89

08006f1c <__sfp_lock_acquire>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	@ (8006f24 <__sfp_lock_acquire+0x8>)
 8006f1e:	f000 b932 	b.w	8007186 <__retarget_lock_acquire_recursive>
 8006f22:	bf00      	nop
 8006f24:	2000046d 	.word	0x2000046d

08006f28 <__sfp_lock_release>:
 8006f28:	4801      	ldr	r0, [pc, #4]	@ (8006f30 <__sfp_lock_release+0x8>)
 8006f2a:	f000 b92d 	b.w	8007188 <__retarget_lock_release_recursive>
 8006f2e:	bf00      	nop
 8006f30:	2000046d 	.word	0x2000046d

08006f34 <__sinit>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	4604      	mov	r4, r0
 8006f38:	f7ff fff0 	bl	8006f1c <__sfp_lock_acquire>
 8006f3c:	6a23      	ldr	r3, [r4, #32]
 8006f3e:	b11b      	cbz	r3, 8006f48 <__sinit+0x14>
 8006f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f44:	f7ff bff0 	b.w	8006f28 <__sfp_lock_release>
 8006f48:	4b04      	ldr	r3, [pc, #16]	@ (8006f5c <__sinit+0x28>)
 8006f4a:	6223      	str	r3, [r4, #32]
 8006f4c:	4b04      	ldr	r3, [pc, #16]	@ (8006f60 <__sinit+0x2c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f5      	bne.n	8006f40 <__sinit+0xc>
 8006f54:	f7ff ffc4 	bl	8006ee0 <global_stdio_init.part.0>
 8006f58:	e7f2      	b.n	8006f40 <__sinit+0xc>
 8006f5a:	bf00      	nop
 8006f5c:	08006ea1 	.word	0x08006ea1
 8006f60:	20000464 	.word	0x20000464

08006f64 <_fwalk_sglue>:
 8006f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f68:	4607      	mov	r7, r0
 8006f6a:	4688      	mov	r8, r1
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	2600      	movs	r6, #0
 8006f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f74:	f1b9 0901 	subs.w	r9, r9, #1
 8006f78:	d505      	bpl.n	8006f86 <_fwalk_sglue+0x22>
 8006f7a:	6824      	ldr	r4, [r4, #0]
 8006f7c:	2c00      	cmp	r4, #0
 8006f7e:	d1f7      	bne.n	8006f70 <_fwalk_sglue+0xc>
 8006f80:	4630      	mov	r0, r6
 8006f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d907      	bls.n	8006f9c <_fwalk_sglue+0x38>
 8006f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f90:	3301      	adds	r3, #1
 8006f92:	d003      	beq.n	8006f9c <_fwalk_sglue+0x38>
 8006f94:	4629      	mov	r1, r5
 8006f96:	4638      	mov	r0, r7
 8006f98:	47c0      	blx	r8
 8006f9a:	4306      	orrs	r6, r0
 8006f9c:	3568      	adds	r5, #104	@ 0x68
 8006f9e:	e7e9      	b.n	8006f74 <_fwalk_sglue+0x10>

08006fa0 <iprintf>:
 8006fa0:	b40f      	push	{r0, r1, r2, r3}
 8006fa2:	b507      	push	{r0, r1, r2, lr}
 8006fa4:	4906      	ldr	r1, [pc, #24]	@ (8006fc0 <iprintf+0x20>)
 8006fa6:	ab04      	add	r3, sp, #16
 8006fa8:	6808      	ldr	r0, [r1, #0]
 8006faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fae:	6881      	ldr	r1, [r0, #8]
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	f001 fd3d 	bl	8008a30 <_vfiprintf_r>
 8006fb6:	b003      	add	sp, #12
 8006fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fbc:	b004      	add	sp, #16
 8006fbe:	4770      	bx	lr
 8006fc0:	2000002c 	.word	0x2000002c

08006fc4 <siprintf>:
 8006fc4:	b40e      	push	{r1, r2, r3}
 8006fc6:	b500      	push	{lr}
 8006fc8:	b09c      	sub	sp, #112	@ 0x70
 8006fca:	ab1d      	add	r3, sp, #116	@ 0x74
 8006fcc:	9002      	str	r0, [sp, #8]
 8006fce:	9006      	str	r0, [sp, #24]
 8006fd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fd4:	4809      	ldr	r0, [pc, #36]	@ (8006ffc <siprintf+0x38>)
 8006fd6:	9107      	str	r1, [sp, #28]
 8006fd8:	9104      	str	r1, [sp, #16]
 8006fda:	4909      	ldr	r1, [pc, #36]	@ (8007000 <siprintf+0x3c>)
 8006fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe0:	9105      	str	r1, [sp, #20]
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	a902      	add	r1, sp, #8
 8006fe8:	f001 fbfc 	bl	80087e4 <_svfiprintf_r>
 8006fec:	9b02      	ldr	r3, [sp, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	b01c      	add	sp, #112	@ 0x70
 8006ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff8:	b003      	add	sp, #12
 8006ffa:	4770      	bx	lr
 8006ffc:	2000002c 	.word	0x2000002c
 8007000:	ffff0208 	.word	0xffff0208

08007004 <__sread>:
 8007004:	b510      	push	{r4, lr}
 8007006:	460c      	mov	r4, r1
 8007008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700c:	f000 f86c 	bl	80070e8 <_read_r>
 8007010:	2800      	cmp	r0, #0
 8007012:	bfab      	itete	ge
 8007014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007016:	89a3      	ldrhlt	r3, [r4, #12]
 8007018:	181b      	addge	r3, r3, r0
 800701a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800701e:	bfac      	ite	ge
 8007020:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007022:	81a3      	strhlt	r3, [r4, #12]
 8007024:	bd10      	pop	{r4, pc}

08007026 <__swrite>:
 8007026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702a:	461f      	mov	r7, r3
 800702c:	898b      	ldrh	r3, [r1, #12]
 800702e:	05db      	lsls	r3, r3, #23
 8007030:	4605      	mov	r5, r0
 8007032:	460c      	mov	r4, r1
 8007034:	4616      	mov	r6, r2
 8007036:	d505      	bpl.n	8007044 <__swrite+0x1e>
 8007038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703c:	2302      	movs	r3, #2
 800703e:	2200      	movs	r2, #0
 8007040:	f000 f840 	bl	80070c4 <_lseek_r>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800704a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800704e:	81a3      	strh	r3, [r4, #12]
 8007050:	4632      	mov	r2, r6
 8007052:	463b      	mov	r3, r7
 8007054:	4628      	mov	r0, r5
 8007056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800705a:	f000 b857 	b.w	800710c <_write_r>

0800705e <__sseek>:
 800705e:	b510      	push	{r4, lr}
 8007060:	460c      	mov	r4, r1
 8007062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007066:	f000 f82d 	bl	80070c4 <_lseek_r>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	bf15      	itete	ne
 8007070:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800707a:	81a3      	strheq	r3, [r4, #12]
 800707c:	bf18      	it	ne
 800707e:	81a3      	strhne	r3, [r4, #12]
 8007080:	bd10      	pop	{r4, pc}

08007082 <__sclose>:
 8007082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007086:	f000 b80d 	b.w	80070a4 <_close_r>

0800708a <memset>:
 800708a:	4402      	add	r2, r0
 800708c:	4603      	mov	r3, r0
 800708e:	4293      	cmp	r3, r2
 8007090:	d100      	bne.n	8007094 <memset+0xa>
 8007092:	4770      	bx	lr
 8007094:	f803 1b01 	strb.w	r1, [r3], #1
 8007098:	e7f9      	b.n	800708e <memset+0x4>
	...

0800709c <_localeconv_r>:
 800709c:	4800      	ldr	r0, [pc, #0]	@ (80070a0 <_localeconv_r+0x4>)
 800709e:	4770      	bx	lr
 80070a0:	2000016c 	.word	0x2000016c

080070a4 <_close_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d06      	ldr	r5, [pc, #24]	@ (80070c0 <_close_r+0x1c>)
 80070a8:	2300      	movs	r3, #0
 80070aa:	4604      	mov	r4, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	602b      	str	r3, [r5, #0]
 80070b0:	f7fb f89e 	bl	80021f0 <_close>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_close_r+0x1a>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_close_r+0x1a>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	20000468 	.word	0x20000468

080070c4 <_lseek_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d07      	ldr	r5, [pc, #28]	@ (80070e4 <_lseek_r+0x20>)
 80070c8:	4604      	mov	r4, r0
 80070ca:	4608      	mov	r0, r1
 80070cc:	4611      	mov	r1, r2
 80070ce:	2200      	movs	r2, #0
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f7fb f8b3 	bl	800223e <_lseek>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_lseek_r+0x1e>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_lseek_r+0x1e>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20000468 	.word	0x20000468

080070e8 <_read_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	@ (8007108 <_read_r+0x20>)
 80070ec:	4604      	mov	r4, r0
 80070ee:	4608      	mov	r0, r1
 80070f0:	4611      	mov	r1, r2
 80070f2:	2200      	movs	r2, #0
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f7fb f841 	bl	800217e <_read>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_read_r+0x1e>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_read_r+0x1e>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	20000468 	.word	0x20000468

0800710c <_write_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	@ (800712c <_write_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f7fb f84c 	bl	80021b8 <_write>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_write_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_write_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20000468 	.word	0x20000468

08007130 <__errno>:
 8007130:	4b01      	ldr	r3, [pc, #4]	@ (8007138 <__errno+0x8>)
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	2000002c 	.word	0x2000002c

0800713c <__libc_init_array>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4d0d      	ldr	r5, [pc, #52]	@ (8007174 <__libc_init_array+0x38>)
 8007140:	4c0d      	ldr	r4, [pc, #52]	@ (8007178 <__libc_init_array+0x3c>)
 8007142:	1b64      	subs	r4, r4, r5
 8007144:	10a4      	asrs	r4, r4, #2
 8007146:	2600      	movs	r6, #0
 8007148:	42a6      	cmp	r6, r4
 800714a:	d109      	bne.n	8007160 <__libc_init_array+0x24>
 800714c:	4d0b      	ldr	r5, [pc, #44]	@ (800717c <__libc_init_array+0x40>)
 800714e:	4c0c      	ldr	r4, [pc, #48]	@ (8007180 <__libc_init_array+0x44>)
 8007150:	f002 f868 	bl	8009224 <_init>
 8007154:	1b64      	subs	r4, r4, r5
 8007156:	10a4      	asrs	r4, r4, #2
 8007158:	2600      	movs	r6, #0
 800715a:	42a6      	cmp	r6, r4
 800715c:	d105      	bne.n	800716a <__libc_init_array+0x2e>
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	f855 3b04 	ldr.w	r3, [r5], #4
 8007164:	4798      	blx	r3
 8007166:	3601      	adds	r6, #1
 8007168:	e7ee      	b.n	8007148 <__libc_init_array+0xc>
 800716a:	f855 3b04 	ldr.w	r3, [r5], #4
 800716e:	4798      	blx	r3
 8007170:	3601      	adds	r6, #1
 8007172:	e7f2      	b.n	800715a <__libc_init_array+0x1e>
 8007174:	08009660 	.word	0x08009660
 8007178:	08009660 	.word	0x08009660
 800717c:	08009660 	.word	0x08009660
 8007180:	08009664 	.word	0x08009664

08007184 <__retarget_lock_init_recursive>:
 8007184:	4770      	bx	lr

08007186 <__retarget_lock_acquire_recursive>:
 8007186:	4770      	bx	lr

08007188 <__retarget_lock_release_recursive>:
 8007188:	4770      	bx	lr

0800718a <quorem>:
 800718a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718e:	6903      	ldr	r3, [r0, #16]
 8007190:	690c      	ldr	r4, [r1, #16]
 8007192:	42a3      	cmp	r3, r4
 8007194:	4607      	mov	r7, r0
 8007196:	db7e      	blt.n	8007296 <quorem+0x10c>
 8007198:	3c01      	subs	r4, #1
 800719a:	f101 0814 	add.w	r8, r1, #20
 800719e:	00a3      	lsls	r3, r4, #2
 80071a0:	f100 0514 	add.w	r5, r0, #20
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071b4:	3301      	adds	r3, #1
 80071b6:	429a      	cmp	r2, r3
 80071b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80071c0:	d32e      	bcc.n	8007220 <quorem+0x96>
 80071c2:	f04f 0a00 	mov.w	sl, #0
 80071c6:	46c4      	mov	ip, r8
 80071c8:	46ae      	mov	lr, r5
 80071ca:	46d3      	mov	fp, sl
 80071cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071d0:	b298      	uxth	r0, r3
 80071d2:	fb06 a000 	mla	r0, r6, r0, sl
 80071d6:	0c02      	lsrs	r2, r0, #16
 80071d8:	0c1b      	lsrs	r3, r3, #16
 80071da:	fb06 2303 	mla	r3, r6, r3, r2
 80071de:	f8de 2000 	ldr.w	r2, [lr]
 80071e2:	b280      	uxth	r0, r0
 80071e4:	b292      	uxth	r2, r2
 80071e6:	1a12      	subs	r2, r2, r0
 80071e8:	445a      	add	r2, fp
 80071ea:	f8de 0000 	ldr.w	r0, [lr]
 80071ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071fc:	b292      	uxth	r2, r2
 80071fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007202:	45e1      	cmp	r9, ip
 8007204:	f84e 2b04 	str.w	r2, [lr], #4
 8007208:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800720c:	d2de      	bcs.n	80071cc <quorem+0x42>
 800720e:	9b00      	ldr	r3, [sp, #0]
 8007210:	58eb      	ldr	r3, [r5, r3]
 8007212:	b92b      	cbnz	r3, 8007220 <quorem+0x96>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	3b04      	subs	r3, #4
 8007218:	429d      	cmp	r5, r3
 800721a:	461a      	mov	r2, r3
 800721c:	d32f      	bcc.n	800727e <quorem+0xf4>
 800721e:	613c      	str	r4, [r7, #16]
 8007220:	4638      	mov	r0, r7
 8007222:	f001 f97b 	bl	800851c <__mcmp>
 8007226:	2800      	cmp	r0, #0
 8007228:	db25      	blt.n	8007276 <quorem+0xec>
 800722a:	4629      	mov	r1, r5
 800722c:	2000      	movs	r0, #0
 800722e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007232:	f8d1 c000 	ldr.w	ip, [r1]
 8007236:	fa1f fe82 	uxth.w	lr, r2
 800723a:	fa1f f38c 	uxth.w	r3, ip
 800723e:	eba3 030e 	sub.w	r3, r3, lr
 8007242:	4403      	add	r3, r0
 8007244:	0c12      	lsrs	r2, r2, #16
 8007246:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800724a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800724e:	b29b      	uxth	r3, r3
 8007250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007254:	45c1      	cmp	r9, r8
 8007256:	f841 3b04 	str.w	r3, [r1], #4
 800725a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800725e:	d2e6      	bcs.n	800722e <quorem+0xa4>
 8007260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007264:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007268:	b922      	cbnz	r2, 8007274 <quorem+0xea>
 800726a:	3b04      	subs	r3, #4
 800726c:	429d      	cmp	r5, r3
 800726e:	461a      	mov	r2, r3
 8007270:	d30b      	bcc.n	800728a <quorem+0x100>
 8007272:	613c      	str	r4, [r7, #16]
 8007274:	3601      	adds	r6, #1
 8007276:	4630      	mov	r0, r6
 8007278:	b003      	add	sp, #12
 800727a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	3b04      	subs	r3, #4
 8007282:	2a00      	cmp	r2, #0
 8007284:	d1cb      	bne.n	800721e <quorem+0x94>
 8007286:	3c01      	subs	r4, #1
 8007288:	e7c6      	b.n	8007218 <quorem+0x8e>
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	3b04      	subs	r3, #4
 800728e:	2a00      	cmp	r2, #0
 8007290:	d1ef      	bne.n	8007272 <quorem+0xe8>
 8007292:	3c01      	subs	r4, #1
 8007294:	e7ea      	b.n	800726c <quorem+0xe2>
 8007296:	2000      	movs	r0, #0
 8007298:	e7ee      	b.n	8007278 <quorem+0xee>
 800729a:	0000      	movs	r0, r0
 800729c:	0000      	movs	r0, r0
	...

080072a0 <_dtoa_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	69c7      	ldr	r7, [r0, #28]
 80072a6:	b099      	sub	sp, #100	@ 0x64
 80072a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80072ac:	ec55 4b10 	vmov	r4, r5, d0
 80072b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80072b4:	4683      	mov	fp, r0
 80072b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80072b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072ba:	b97f      	cbnz	r7, 80072dc <_dtoa_r+0x3c>
 80072bc:	2010      	movs	r0, #16
 80072be:	f000 fdfd 	bl	8007ebc <malloc>
 80072c2:	4602      	mov	r2, r0
 80072c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80072c8:	b920      	cbnz	r0, 80072d4 <_dtoa_r+0x34>
 80072ca:	4ba7      	ldr	r3, [pc, #668]	@ (8007568 <_dtoa_r+0x2c8>)
 80072cc:	21ef      	movs	r1, #239	@ 0xef
 80072ce:	48a7      	ldr	r0, [pc, #668]	@ (800756c <_dtoa_r+0x2cc>)
 80072d0:	f001 fe3e 	bl	8008f50 <__assert_func>
 80072d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072d8:	6007      	str	r7, [r0, #0]
 80072da:	60c7      	str	r7, [r0, #12]
 80072dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072e0:	6819      	ldr	r1, [r3, #0]
 80072e2:	b159      	cbz	r1, 80072fc <_dtoa_r+0x5c>
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	604a      	str	r2, [r1, #4]
 80072e8:	2301      	movs	r3, #1
 80072ea:	4093      	lsls	r3, r2
 80072ec:	608b      	str	r3, [r1, #8]
 80072ee:	4658      	mov	r0, fp
 80072f0:	f000 feda 	bl	80080a8 <_Bfree>
 80072f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	1e2b      	subs	r3, r5, #0
 80072fe:	bfb9      	ittee	lt
 8007300:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007304:	9303      	strlt	r3, [sp, #12]
 8007306:	2300      	movge	r3, #0
 8007308:	6033      	strge	r3, [r6, #0]
 800730a:	9f03      	ldr	r7, [sp, #12]
 800730c:	4b98      	ldr	r3, [pc, #608]	@ (8007570 <_dtoa_r+0x2d0>)
 800730e:	bfbc      	itt	lt
 8007310:	2201      	movlt	r2, #1
 8007312:	6032      	strlt	r2, [r6, #0]
 8007314:	43bb      	bics	r3, r7
 8007316:	d112      	bne.n	800733e <_dtoa_r+0x9e>
 8007318:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800731a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007324:	4323      	orrs	r3, r4
 8007326:	f000 854d 	beq.w	8007dc4 <_dtoa_r+0xb24>
 800732a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800732c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007584 <_dtoa_r+0x2e4>
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 854f 	beq.w	8007dd4 <_dtoa_r+0xb34>
 8007336:	f10a 0303 	add.w	r3, sl, #3
 800733a:	f000 bd49 	b.w	8007dd0 <_dtoa_r+0xb30>
 800733e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007342:	2200      	movs	r2, #0
 8007344:	ec51 0b17 	vmov	r0, r1, d7
 8007348:	2300      	movs	r3, #0
 800734a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800734e:	f7f9 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007352:	4680      	mov	r8, r0
 8007354:	b158      	cbz	r0, 800736e <_dtoa_r+0xce>
 8007356:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007358:	2301      	movs	r3, #1
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800735e:	b113      	cbz	r3, 8007366 <_dtoa_r+0xc6>
 8007360:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007362:	4b84      	ldr	r3, [pc, #528]	@ (8007574 <_dtoa_r+0x2d4>)
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007588 <_dtoa_r+0x2e8>
 800736a:	f000 bd33 	b.w	8007dd4 <_dtoa_r+0xb34>
 800736e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007372:	aa16      	add	r2, sp, #88	@ 0x58
 8007374:	a917      	add	r1, sp, #92	@ 0x5c
 8007376:	4658      	mov	r0, fp
 8007378:	f001 f980 	bl	800867c <__d2b>
 800737c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007380:	4681      	mov	r9, r0
 8007382:	2e00      	cmp	r6, #0
 8007384:	d077      	beq.n	8007476 <_dtoa_r+0x1d6>
 8007386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007388:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800738c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007394:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007398:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800739c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073a0:	4619      	mov	r1, r3
 80073a2:	2200      	movs	r2, #0
 80073a4:	4b74      	ldr	r3, [pc, #464]	@ (8007578 <_dtoa_r+0x2d8>)
 80073a6:	f7f8 ff6f 	bl	8000288 <__aeabi_dsub>
 80073aa:	a369      	add	r3, pc, #420	@ (adr r3, 8007550 <_dtoa_r+0x2b0>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f9 f922 	bl	80005f8 <__aeabi_dmul>
 80073b4:	a368      	add	r3, pc, #416	@ (adr r3, 8007558 <_dtoa_r+0x2b8>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f7f8 ff67 	bl	800028c <__adddf3>
 80073be:	4604      	mov	r4, r0
 80073c0:	4630      	mov	r0, r6
 80073c2:	460d      	mov	r5, r1
 80073c4:	f7f9 f8ae 	bl	8000524 <__aeabi_i2d>
 80073c8:	a365      	add	r3, pc, #404	@ (adr r3, 8007560 <_dtoa_r+0x2c0>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f9 f913 	bl	80005f8 <__aeabi_dmul>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	f7f8 ff57 	bl	800028c <__adddf3>
 80073de:	4604      	mov	r4, r0
 80073e0:	460d      	mov	r5, r1
 80073e2:	f7f9 fbb9 	bl	8000b58 <__aeabi_d2iz>
 80073e6:	2200      	movs	r2, #0
 80073e8:	4607      	mov	r7, r0
 80073ea:	2300      	movs	r3, #0
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	f7f9 fb74 	bl	8000adc <__aeabi_dcmplt>
 80073f4:	b140      	cbz	r0, 8007408 <_dtoa_r+0x168>
 80073f6:	4638      	mov	r0, r7
 80073f8:	f7f9 f894 	bl	8000524 <__aeabi_i2d>
 80073fc:	4622      	mov	r2, r4
 80073fe:	462b      	mov	r3, r5
 8007400:	f7f9 fb62 	bl	8000ac8 <__aeabi_dcmpeq>
 8007404:	b900      	cbnz	r0, 8007408 <_dtoa_r+0x168>
 8007406:	3f01      	subs	r7, #1
 8007408:	2f16      	cmp	r7, #22
 800740a:	d851      	bhi.n	80074b0 <_dtoa_r+0x210>
 800740c:	4b5b      	ldr	r3, [pc, #364]	@ (800757c <_dtoa_r+0x2dc>)
 800740e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800741a:	f7f9 fb5f 	bl	8000adc <__aeabi_dcmplt>
 800741e:	2800      	cmp	r0, #0
 8007420:	d048      	beq.n	80074b4 <_dtoa_r+0x214>
 8007422:	3f01      	subs	r7, #1
 8007424:	2300      	movs	r3, #0
 8007426:	9312      	str	r3, [sp, #72]	@ 0x48
 8007428:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800742a:	1b9b      	subs	r3, r3, r6
 800742c:	1e5a      	subs	r2, r3, #1
 800742e:	bf44      	itt	mi
 8007430:	f1c3 0801 	rsbmi	r8, r3, #1
 8007434:	2300      	movmi	r3, #0
 8007436:	9208      	str	r2, [sp, #32]
 8007438:	bf54      	ite	pl
 800743a:	f04f 0800 	movpl.w	r8, #0
 800743e:	9308      	strmi	r3, [sp, #32]
 8007440:	2f00      	cmp	r7, #0
 8007442:	db39      	blt.n	80074b8 <_dtoa_r+0x218>
 8007444:	9b08      	ldr	r3, [sp, #32]
 8007446:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007448:	443b      	add	r3, r7
 800744a:	9308      	str	r3, [sp, #32]
 800744c:	2300      	movs	r3, #0
 800744e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007452:	2b09      	cmp	r3, #9
 8007454:	d864      	bhi.n	8007520 <_dtoa_r+0x280>
 8007456:	2b05      	cmp	r3, #5
 8007458:	bfc4      	itt	gt
 800745a:	3b04      	subgt	r3, #4
 800745c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007460:	f1a3 0302 	sub.w	r3, r3, #2
 8007464:	bfcc      	ite	gt
 8007466:	2400      	movgt	r4, #0
 8007468:	2401      	movle	r4, #1
 800746a:	2b03      	cmp	r3, #3
 800746c:	d863      	bhi.n	8007536 <_dtoa_r+0x296>
 800746e:	e8df f003 	tbb	[pc, r3]
 8007472:	372a      	.short	0x372a
 8007474:	5535      	.short	0x5535
 8007476:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800747a:	441e      	add	r6, r3
 800747c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007480:	2b20      	cmp	r3, #32
 8007482:	bfc1      	itttt	gt
 8007484:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007488:	409f      	lslgt	r7, r3
 800748a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800748e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007492:	bfd6      	itet	le
 8007494:	f1c3 0320 	rsble	r3, r3, #32
 8007498:	ea47 0003 	orrgt.w	r0, r7, r3
 800749c:	fa04 f003 	lslle.w	r0, r4, r3
 80074a0:	f7f9 f830 	bl	8000504 <__aeabi_ui2d>
 80074a4:	2201      	movs	r2, #1
 80074a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074aa:	3e01      	subs	r6, #1
 80074ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80074ae:	e777      	b.n	80073a0 <_dtoa_r+0x100>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e7b8      	b.n	8007426 <_dtoa_r+0x186>
 80074b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80074b6:	e7b7      	b.n	8007428 <_dtoa_r+0x188>
 80074b8:	427b      	negs	r3, r7
 80074ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80074bc:	2300      	movs	r3, #0
 80074be:	eba8 0807 	sub.w	r8, r8, r7
 80074c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074c4:	e7c4      	b.n	8007450 <_dtoa_r+0x1b0>
 80074c6:	2300      	movs	r3, #0
 80074c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dc35      	bgt.n	800753c <_dtoa_r+0x29c>
 80074d0:	2301      	movs	r3, #1
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	9307      	str	r3, [sp, #28]
 80074d6:	461a      	mov	r2, r3
 80074d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074da:	e00b      	b.n	80074f4 <_dtoa_r+0x254>
 80074dc:	2301      	movs	r3, #1
 80074de:	e7f3      	b.n	80074c8 <_dtoa_r+0x228>
 80074e0:	2300      	movs	r3, #0
 80074e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074e6:	18fb      	adds	r3, r7, r3
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	3301      	adds	r3, #1
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	bfb8      	it	lt
 80074f2:	2301      	movlt	r3, #1
 80074f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074f8:	2100      	movs	r1, #0
 80074fa:	2204      	movs	r2, #4
 80074fc:	f102 0514 	add.w	r5, r2, #20
 8007500:	429d      	cmp	r5, r3
 8007502:	d91f      	bls.n	8007544 <_dtoa_r+0x2a4>
 8007504:	6041      	str	r1, [r0, #4]
 8007506:	4658      	mov	r0, fp
 8007508:	f000 fd8e 	bl	8008028 <_Balloc>
 800750c:	4682      	mov	sl, r0
 800750e:	2800      	cmp	r0, #0
 8007510:	d13c      	bne.n	800758c <_dtoa_r+0x2ec>
 8007512:	4b1b      	ldr	r3, [pc, #108]	@ (8007580 <_dtoa_r+0x2e0>)
 8007514:	4602      	mov	r2, r0
 8007516:	f240 11af 	movw	r1, #431	@ 0x1af
 800751a:	e6d8      	b.n	80072ce <_dtoa_r+0x2e>
 800751c:	2301      	movs	r3, #1
 800751e:	e7e0      	b.n	80074e2 <_dtoa_r+0x242>
 8007520:	2401      	movs	r4, #1
 8007522:	2300      	movs	r3, #0
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007528:	f04f 33ff 	mov.w	r3, #4294967295
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	9307      	str	r3, [sp, #28]
 8007530:	2200      	movs	r2, #0
 8007532:	2312      	movs	r3, #18
 8007534:	e7d0      	b.n	80074d8 <_dtoa_r+0x238>
 8007536:	2301      	movs	r3, #1
 8007538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800753a:	e7f5      	b.n	8007528 <_dtoa_r+0x288>
 800753c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	9307      	str	r3, [sp, #28]
 8007542:	e7d7      	b.n	80074f4 <_dtoa_r+0x254>
 8007544:	3101      	adds	r1, #1
 8007546:	0052      	lsls	r2, r2, #1
 8007548:	e7d8      	b.n	80074fc <_dtoa_r+0x25c>
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w
 8007550:	636f4361 	.word	0x636f4361
 8007554:	3fd287a7 	.word	0x3fd287a7
 8007558:	8b60c8b3 	.word	0x8b60c8b3
 800755c:	3fc68a28 	.word	0x3fc68a28
 8007560:	509f79fb 	.word	0x509f79fb
 8007564:	3fd34413 	.word	0x3fd34413
 8007568:	08009329 	.word	0x08009329
 800756c:	08009340 	.word	0x08009340
 8007570:	7ff00000 	.word	0x7ff00000
 8007574:	080092f9 	.word	0x080092f9
 8007578:	3ff80000 	.word	0x3ff80000
 800757c:	08009438 	.word	0x08009438
 8007580:	08009398 	.word	0x08009398
 8007584:	08009325 	.word	0x08009325
 8007588:	080092f8 	.word	0x080092f8
 800758c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007590:	6018      	str	r0, [r3, #0]
 8007592:	9b07      	ldr	r3, [sp, #28]
 8007594:	2b0e      	cmp	r3, #14
 8007596:	f200 80a4 	bhi.w	80076e2 <_dtoa_r+0x442>
 800759a:	2c00      	cmp	r4, #0
 800759c:	f000 80a1 	beq.w	80076e2 <_dtoa_r+0x442>
 80075a0:	2f00      	cmp	r7, #0
 80075a2:	dd33      	ble.n	800760c <_dtoa_r+0x36c>
 80075a4:	4bad      	ldr	r3, [pc, #692]	@ (800785c <_dtoa_r+0x5bc>)
 80075a6:	f007 020f 	and.w	r2, r7, #15
 80075aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ae:	ed93 7b00 	vldr	d7, [r3]
 80075b2:	05f8      	lsls	r0, r7, #23
 80075b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075bc:	d516      	bpl.n	80075ec <_dtoa_r+0x34c>
 80075be:	4ba8      	ldr	r3, [pc, #672]	@ (8007860 <_dtoa_r+0x5c0>)
 80075c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075c8:	f7f9 f940 	bl	800084c <__aeabi_ddiv>
 80075cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d0:	f004 040f 	and.w	r4, r4, #15
 80075d4:	2603      	movs	r6, #3
 80075d6:	4da2      	ldr	r5, [pc, #648]	@ (8007860 <_dtoa_r+0x5c0>)
 80075d8:	b954      	cbnz	r4, 80075f0 <_dtoa_r+0x350>
 80075da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e2:	f7f9 f933 	bl	800084c <__aeabi_ddiv>
 80075e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ea:	e028      	b.n	800763e <_dtoa_r+0x39e>
 80075ec:	2602      	movs	r6, #2
 80075ee:	e7f2      	b.n	80075d6 <_dtoa_r+0x336>
 80075f0:	07e1      	lsls	r1, r4, #31
 80075f2:	d508      	bpl.n	8007606 <_dtoa_r+0x366>
 80075f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075fc:	f7f8 fffc 	bl	80005f8 <__aeabi_dmul>
 8007600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007604:	3601      	adds	r6, #1
 8007606:	1064      	asrs	r4, r4, #1
 8007608:	3508      	adds	r5, #8
 800760a:	e7e5      	b.n	80075d8 <_dtoa_r+0x338>
 800760c:	f000 80d2 	beq.w	80077b4 <_dtoa_r+0x514>
 8007610:	427c      	negs	r4, r7
 8007612:	4b92      	ldr	r3, [pc, #584]	@ (800785c <_dtoa_r+0x5bc>)
 8007614:	4d92      	ldr	r5, [pc, #584]	@ (8007860 <_dtoa_r+0x5c0>)
 8007616:	f004 020f 	and.w	r2, r4, #15
 800761a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007626:	f7f8 ffe7 	bl	80005f8 <__aeabi_dmul>
 800762a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800762e:	1124      	asrs	r4, r4, #4
 8007630:	2300      	movs	r3, #0
 8007632:	2602      	movs	r6, #2
 8007634:	2c00      	cmp	r4, #0
 8007636:	f040 80b2 	bne.w	800779e <_dtoa_r+0x4fe>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1d3      	bne.n	80075e6 <_dtoa_r+0x346>
 800763e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007640:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 80b7 	beq.w	80077b8 <_dtoa_r+0x518>
 800764a:	4b86      	ldr	r3, [pc, #536]	@ (8007864 <_dtoa_r+0x5c4>)
 800764c:	2200      	movs	r2, #0
 800764e:	4620      	mov	r0, r4
 8007650:	4629      	mov	r1, r5
 8007652:	f7f9 fa43 	bl	8000adc <__aeabi_dcmplt>
 8007656:	2800      	cmp	r0, #0
 8007658:	f000 80ae 	beq.w	80077b8 <_dtoa_r+0x518>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 80aa 	beq.w	80077b8 <_dtoa_r+0x518>
 8007664:	9b00      	ldr	r3, [sp, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	dd37      	ble.n	80076da <_dtoa_r+0x43a>
 800766a:	1e7b      	subs	r3, r7, #1
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	4620      	mov	r0, r4
 8007670:	4b7d      	ldr	r3, [pc, #500]	@ (8007868 <_dtoa_r+0x5c8>)
 8007672:	2200      	movs	r2, #0
 8007674:	4629      	mov	r1, r5
 8007676:	f7f8 ffbf 	bl	80005f8 <__aeabi_dmul>
 800767a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800767e:	9c00      	ldr	r4, [sp, #0]
 8007680:	3601      	adds	r6, #1
 8007682:	4630      	mov	r0, r6
 8007684:	f7f8 ff4e 	bl	8000524 <__aeabi_i2d>
 8007688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800768c:	f7f8 ffb4 	bl	80005f8 <__aeabi_dmul>
 8007690:	4b76      	ldr	r3, [pc, #472]	@ (800786c <_dtoa_r+0x5cc>)
 8007692:	2200      	movs	r2, #0
 8007694:	f7f8 fdfa 	bl	800028c <__adddf3>
 8007698:	4605      	mov	r5, r0
 800769a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800769e:	2c00      	cmp	r4, #0
 80076a0:	f040 808d 	bne.w	80077be <_dtoa_r+0x51e>
 80076a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a8:	4b71      	ldr	r3, [pc, #452]	@ (8007870 <_dtoa_r+0x5d0>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	f7f8 fdec 	bl	8000288 <__aeabi_dsub>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076b8:	462a      	mov	r2, r5
 80076ba:	4633      	mov	r3, r6
 80076bc:	f7f9 fa2c 	bl	8000b18 <__aeabi_dcmpgt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f040 828b 	bne.w	8007bdc <_dtoa_r+0x93c>
 80076c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ca:	462a      	mov	r2, r5
 80076cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076d0:	f7f9 fa04 	bl	8000adc <__aeabi_dcmplt>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f040 8128 	bne.w	800792a <_dtoa_r+0x68a>
 80076da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f2c0 815a 	blt.w	800799e <_dtoa_r+0x6fe>
 80076ea:	2f0e      	cmp	r7, #14
 80076ec:	f300 8157 	bgt.w	800799e <_dtoa_r+0x6fe>
 80076f0:	4b5a      	ldr	r3, [pc, #360]	@ (800785c <_dtoa_r+0x5bc>)
 80076f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076f6:	ed93 7b00 	vldr	d7, [r3]
 80076fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	ed8d 7b00 	vstr	d7, [sp]
 8007702:	da03      	bge.n	800770c <_dtoa_r+0x46c>
 8007704:	9b07      	ldr	r3, [sp, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	f340 8101 	ble.w	800790e <_dtoa_r+0x66e>
 800770c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007710:	4656      	mov	r6, sl
 8007712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	f7f9 f897 	bl	800084c <__aeabi_ddiv>
 800771e:	f7f9 fa1b 	bl	8000b58 <__aeabi_d2iz>
 8007722:	4680      	mov	r8, r0
 8007724:	f7f8 fefe 	bl	8000524 <__aeabi_i2d>
 8007728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800772c:	f7f8 ff64 	bl	80005f8 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4620      	mov	r0, r4
 8007736:	4629      	mov	r1, r5
 8007738:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800773c:	f7f8 fda4 	bl	8000288 <__aeabi_dsub>
 8007740:	f806 4b01 	strb.w	r4, [r6], #1
 8007744:	9d07      	ldr	r5, [sp, #28]
 8007746:	eba6 040a 	sub.w	r4, r6, sl
 800774a:	42a5      	cmp	r5, r4
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	f040 8117 	bne.w	8007982 <_dtoa_r+0x6e2>
 8007754:	f7f8 fd9a 	bl	800028c <__adddf3>
 8007758:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	f7f9 f9da 	bl	8000b18 <__aeabi_dcmpgt>
 8007764:	2800      	cmp	r0, #0
 8007766:	f040 80f9 	bne.w	800795c <_dtoa_r+0x6bc>
 800776a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	f7f9 f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007776:	b118      	cbz	r0, 8007780 <_dtoa_r+0x4e0>
 8007778:	f018 0f01 	tst.w	r8, #1
 800777c:	f040 80ee 	bne.w	800795c <_dtoa_r+0x6bc>
 8007780:	4649      	mov	r1, r9
 8007782:	4658      	mov	r0, fp
 8007784:	f000 fc90 	bl	80080a8 <_Bfree>
 8007788:	2300      	movs	r3, #0
 800778a:	7033      	strb	r3, [r6, #0]
 800778c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800778e:	3701      	adds	r7, #1
 8007790:	601f      	str	r7, [r3, #0]
 8007792:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 831d 	beq.w	8007dd4 <_dtoa_r+0xb34>
 800779a:	601e      	str	r6, [r3, #0]
 800779c:	e31a      	b.n	8007dd4 <_dtoa_r+0xb34>
 800779e:	07e2      	lsls	r2, r4, #31
 80077a0:	d505      	bpl.n	80077ae <_dtoa_r+0x50e>
 80077a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077a6:	f7f8 ff27 	bl	80005f8 <__aeabi_dmul>
 80077aa:	3601      	adds	r6, #1
 80077ac:	2301      	movs	r3, #1
 80077ae:	1064      	asrs	r4, r4, #1
 80077b0:	3508      	adds	r5, #8
 80077b2:	e73f      	b.n	8007634 <_dtoa_r+0x394>
 80077b4:	2602      	movs	r6, #2
 80077b6:	e742      	b.n	800763e <_dtoa_r+0x39e>
 80077b8:	9c07      	ldr	r4, [sp, #28]
 80077ba:	9704      	str	r7, [sp, #16]
 80077bc:	e761      	b.n	8007682 <_dtoa_r+0x3e2>
 80077be:	4b27      	ldr	r3, [pc, #156]	@ (800785c <_dtoa_r+0x5bc>)
 80077c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077ca:	4454      	add	r4, sl
 80077cc:	2900      	cmp	r1, #0
 80077ce:	d053      	beq.n	8007878 <_dtoa_r+0x5d8>
 80077d0:	4928      	ldr	r1, [pc, #160]	@ (8007874 <_dtoa_r+0x5d4>)
 80077d2:	2000      	movs	r0, #0
 80077d4:	f7f9 f83a 	bl	800084c <__aeabi_ddiv>
 80077d8:	4633      	mov	r3, r6
 80077da:	462a      	mov	r2, r5
 80077dc:	f7f8 fd54 	bl	8000288 <__aeabi_dsub>
 80077e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077e4:	4656      	mov	r6, sl
 80077e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ea:	f7f9 f9b5 	bl	8000b58 <__aeabi_d2iz>
 80077ee:	4605      	mov	r5, r0
 80077f0:	f7f8 fe98 	bl	8000524 <__aeabi_i2d>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fc:	f7f8 fd44 	bl	8000288 <__aeabi_dsub>
 8007800:	3530      	adds	r5, #48	@ 0x30
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800780a:	f806 5b01 	strb.w	r5, [r6], #1
 800780e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007812:	f7f9 f963 	bl	8000adc <__aeabi_dcmplt>
 8007816:	2800      	cmp	r0, #0
 8007818:	d171      	bne.n	80078fe <_dtoa_r+0x65e>
 800781a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800781e:	4911      	ldr	r1, [pc, #68]	@ (8007864 <_dtoa_r+0x5c4>)
 8007820:	2000      	movs	r0, #0
 8007822:	f7f8 fd31 	bl	8000288 <__aeabi_dsub>
 8007826:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800782a:	f7f9 f957 	bl	8000adc <__aeabi_dcmplt>
 800782e:	2800      	cmp	r0, #0
 8007830:	f040 8095 	bne.w	800795e <_dtoa_r+0x6be>
 8007834:	42a6      	cmp	r6, r4
 8007836:	f43f af50 	beq.w	80076da <_dtoa_r+0x43a>
 800783a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800783e:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <_dtoa_r+0x5c8>)
 8007840:	2200      	movs	r2, #0
 8007842:	f7f8 fed9 	bl	80005f8 <__aeabi_dmul>
 8007846:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <_dtoa_r+0x5c8>)
 8007848:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800784c:	2200      	movs	r2, #0
 800784e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007852:	f7f8 fed1 	bl	80005f8 <__aeabi_dmul>
 8007856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800785a:	e7c4      	b.n	80077e6 <_dtoa_r+0x546>
 800785c:	08009438 	.word	0x08009438
 8007860:	08009410 	.word	0x08009410
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	40240000 	.word	0x40240000
 800786c:	401c0000 	.word	0x401c0000
 8007870:	40140000 	.word	0x40140000
 8007874:	3fe00000 	.word	0x3fe00000
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	f7f8 febc 	bl	80005f8 <__aeabi_dmul>
 8007880:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007884:	9415      	str	r4, [sp, #84]	@ 0x54
 8007886:	4656      	mov	r6, sl
 8007888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788c:	f7f9 f964 	bl	8000b58 <__aeabi_d2iz>
 8007890:	4605      	mov	r5, r0
 8007892:	f7f8 fe47 	bl	8000524 <__aeabi_i2d>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800789e:	f7f8 fcf3 	bl	8000288 <__aeabi_dsub>
 80078a2:	3530      	adds	r5, #48	@ 0x30
 80078a4:	f806 5b01 	strb.w	r5, [r6], #1
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	42a6      	cmp	r6, r4
 80078ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078b2:	f04f 0200 	mov.w	r2, #0
 80078b6:	d124      	bne.n	8007902 <_dtoa_r+0x662>
 80078b8:	4bac      	ldr	r3, [pc, #688]	@ (8007b6c <_dtoa_r+0x8cc>)
 80078ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078be:	f7f8 fce5 	bl	800028c <__adddf3>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ca:	f7f9 f925 	bl	8000b18 <__aeabi_dcmpgt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d145      	bne.n	800795e <_dtoa_r+0x6be>
 80078d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078d6:	49a5      	ldr	r1, [pc, #660]	@ (8007b6c <_dtoa_r+0x8cc>)
 80078d8:	2000      	movs	r0, #0
 80078da:	f7f8 fcd5 	bl	8000288 <__aeabi_dsub>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e6:	f7f9 f8f9 	bl	8000adc <__aeabi_dcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f43f aef5 	beq.w	80076da <_dtoa_r+0x43a>
 80078f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078f2:	1e73      	subs	r3, r6, #1
 80078f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80078f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078fa:	2b30      	cmp	r3, #48	@ 0x30
 80078fc:	d0f8      	beq.n	80078f0 <_dtoa_r+0x650>
 80078fe:	9f04      	ldr	r7, [sp, #16]
 8007900:	e73e      	b.n	8007780 <_dtoa_r+0x4e0>
 8007902:	4b9b      	ldr	r3, [pc, #620]	@ (8007b70 <_dtoa_r+0x8d0>)
 8007904:	f7f8 fe78 	bl	80005f8 <__aeabi_dmul>
 8007908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800790c:	e7bc      	b.n	8007888 <_dtoa_r+0x5e8>
 800790e:	d10c      	bne.n	800792a <_dtoa_r+0x68a>
 8007910:	4b98      	ldr	r3, [pc, #608]	@ (8007b74 <_dtoa_r+0x8d4>)
 8007912:	2200      	movs	r2, #0
 8007914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007918:	f7f8 fe6e 	bl	80005f8 <__aeabi_dmul>
 800791c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007920:	f7f9 f8f0 	bl	8000b04 <__aeabi_dcmpge>
 8007924:	2800      	cmp	r0, #0
 8007926:	f000 8157 	beq.w	8007bd8 <_dtoa_r+0x938>
 800792a:	2400      	movs	r4, #0
 800792c:	4625      	mov	r5, r4
 800792e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007930:	43db      	mvns	r3, r3
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	4656      	mov	r6, sl
 8007936:	2700      	movs	r7, #0
 8007938:	4621      	mov	r1, r4
 800793a:	4658      	mov	r0, fp
 800793c:	f000 fbb4 	bl	80080a8 <_Bfree>
 8007940:	2d00      	cmp	r5, #0
 8007942:	d0dc      	beq.n	80078fe <_dtoa_r+0x65e>
 8007944:	b12f      	cbz	r7, 8007952 <_dtoa_r+0x6b2>
 8007946:	42af      	cmp	r7, r5
 8007948:	d003      	beq.n	8007952 <_dtoa_r+0x6b2>
 800794a:	4639      	mov	r1, r7
 800794c:	4658      	mov	r0, fp
 800794e:	f000 fbab 	bl	80080a8 <_Bfree>
 8007952:	4629      	mov	r1, r5
 8007954:	4658      	mov	r0, fp
 8007956:	f000 fba7 	bl	80080a8 <_Bfree>
 800795a:	e7d0      	b.n	80078fe <_dtoa_r+0x65e>
 800795c:	9704      	str	r7, [sp, #16]
 800795e:	4633      	mov	r3, r6
 8007960:	461e      	mov	r6, r3
 8007962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007966:	2a39      	cmp	r2, #57	@ 0x39
 8007968:	d107      	bne.n	800797a <_dtoa_r+0x6da>
 800796a:	459a      	cmp	sl, r3
 800796c:	d1f8      	bne.n	8007960 <_dtoa_r+0x6c0>
 800796e:	9a04      	ldr	r2, [sp, #16]
 8007970:	3201      	adds	r2, #1
 8007972:	9204      	str	r2, [sp, #16]
 8007974:	2230      	movs	r2, #48	@ 0x30
 8007976:	f88a 2000 	strb.w	r2, [sl]
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	3201      	adds	r2, #1
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	e7bd      	b.n	80078fe <_dtoa_r+0x65e>
 8007982:	4b7b      	ldr	r3, [pc, #492]	@ (8007b70 <_dtoa_r+0x8d0>)
 8007984:	2200      	movs	r2, #0
 8007986:	f7f8 fe37 	bl	80005f8 <__aeabi_dmul>
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	460d      	mov	r5, r1
 8007992:	f7f9 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f aebb 	beq.w	8007712 <_dtoa_r+0x472>
 800799c:	e6f0      	b.n	8007780 <_dtoa_r+0x4e0>
 800799e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	f000 80db 	beq.w	8007b5c <_dtoa_r+0x8bc>
 80079a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079a8:	2a01      	cmp	r2, #1
 80079aa:	f300 80bf 	bgt.w	8007b2c <_dtoa_r+0x88c>
 80079ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	f000 80b7 	beq.w	8007b24 <_dtoa_r+0x884>
 80079b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079bc:	4646      	mov	r6, r8
 80079be:	9a08      	ldr	r2, [sp, #32]
 80079c0:	2101      	movs	r1, #1
 80079c2:	441a      	add	r2, r3
 80079c4:	4658      	mov	r0, fp
 80079c6:	4498      	add	r8, r3
 80079c8:	9208      	str	r2, [sp, #32]
 80079ca:	f000 fc21 	bl	8008210 <__i2b>
 80079ce:	4605      	mov	r5, r0
 80079d0:	b15e      	cbz	r6, 80079ea <_dtoa_r+0x74a>
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dd08      	ble.n	80079ea <_dtoa_r+0x74a>
 80079d8:	42b3      	cmp	r3, r6
 80079da:	9a08      	ldr	r2, [sp, #32]
 80079dc:	bfa8      	it	ge
 80079de:	4633      	movge	r3, r6
 80079e0:	eba8 0803 	sub.w	r8, r8, r3
 80079e4:	1af6      	subs	r6, r6, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	9308      	str	r3, [sp, #32]
 80079ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ec:	b1f3      	cbz	r3, 8007a2c <_dtoa_r+0x78c>
 80079ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80b7 	beq.w	8007b64 <_dtoa_r+0x8c4>
 80079f6:	b18c      	cbz	r4, 8007a1c <_dtoa_r+0x77c>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4622      	mov	r2, r4
 80079fc:	4658      	mov	r0, fp
 80079fe:	f000 fcc7 	bl	8008390 <__pow5mult>
 8007a02:	464a      	mov	r2, r9
 8007a04:	4601      	mov	r1, r0
 8007a06:	4605      	mov	r5, r0
 8007a08:	4658      	mov	r0, fp
 8007a0a:	f000 fc17 	bl	800823c <__multiply>
 8007a0e:	4649      	mov	r1, r9
 8007a10:	9004      	str	r0, [sp, #16]
 8007a12:	4658      	mov	r0, fp
 8007a14:	f000 fb48 	bl	80080a8 <_Bfree>
 8007a18:	9b04      	ldr	r3, [sp, #16]
 8007a1a:	4699      	mov	r9, r3
 8007a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a1e:	1b1a      	subs	r2, r3, r4
 8007a20:	d004      	beq.n	8007a2c <_dtoa_r+0x78c>
 8007a22:	4649      	mov	r1, r9
 8007a24:	4658      	mov	r0, fp
 8007a26:	f000 fcb3 	bl	8008390 <__pow5mult>
 8007a2a:	4681      	mov	r9, r0
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4658      	mov	r0, fp
 8007a30:	f000 fbee 	bl	8008210 <__i2b>
 8007a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a36:	4604      	mov	r4, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 81cf 	beq.w	8007ddc <_dtoa_r+0xb3c>
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4601      	mov	r1, r0
 8007a42:	4658      	mov	r0, fp
 8007a44:	f000 fca4 	bl	8008390 <__pow5mult>
 8007a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	f300 8095 	bgt.w	8007b7c <_dtoa_r+0x8dc>
 8007a52:	9b02      	ldr	r3, [sp, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f040 8087 	bne.w	8007b68 <_dtoa_r+0x8c8>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 8089 	bne.w	8007b78 <_dtoa_r+0x8d8>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a6c:	0d1b      	lsrs	r3, r3, #20
 8007a6e:	051b      	lsls	r3, r3, #20
 8007a70:	b12b      	cbz	r3, 8007a7e <_dtoa_r+0x7de>
 8007a72:	9b08      	ldr	r3, [sp, #32]
 8007a74:	3301      	adds	r3, #1
 8007a76:	9308      	str	r3, [sp, #32]
 8007a78:	f108 0801 	add.w	r8, r8, #1
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 81b0 	beq.w	8007de8 <_dtoa_r+0xb48>
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a8e:	6918      	ldr	r0, [r3, #16]
 8007a90:	f000 fb72 	bl	8008178 <__hi0bits>
 8007a94:	f1c0 0020 	rsb	r0, r0, #32
 8007a98:	9b08      	ldr	r3, [sp, #32]
 8007a9a:	4418      	add	r0, r3
 8007a9c:	f010 001f 	ands.w	r0, r0, #31
 8007aa0:	d077      	beq.n	8007b92 <_dtoa_r+0x8f2>
 8007aa2:	f1c0 0320 	rsb	r3, r0, #32
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	dd6b      	ble.n	8007b82 <_dtoa_r+0x8e2>
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	f1c0 001c 	rsb	r0, r0, #28
 8007ab0:	4403      	add	r3, r0
 8007ab2:	4480      	add	r8, r0
 8007ab4:	4406      	add	r6, r0
 8007ab6:	9308      	str	r3, [sp, #32]
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	dd05      	ble.n	8007aca <_dtoa_r+0x82a>
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f000 fcbe 	bl	8008444 <__lshift>
 8007ac8:	4681      	mov	r9, r0
 8007aca:	9b08      	ldr	r3, [sp, #32]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dd05      	ble.n	8007adc <_dtoa_r+0x83c>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f000 fcb5 	bl	8008444 <__lshift>
 8007ada:	4604      	mov	r4, r0
 8007adc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d059      	beq.n	8007b96 <_dtoa_r+0x8f6>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4648      	mov	r0, r9
 8007ae6:	f000 fd19 	bl	800851c <__mcmp>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	da53      	bge.n	8007b96 <_dtoa_r+0x8f6>
 8007aee:	1e7b      	subs	r3, r7, #1
 8007af0:	9304      	str	r3, [sp, #16]
 8007af2:	4649      	mov	r1, r9
 8007af4:	2300      	movs	r3, #0
 8007af6:	220a      	movs	r2, #10
 8007af8:	4658      	mov	r0, fp
 8007afa:	f000 faf7 	bl	80080ec <__multadd>
 8007afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b00:	4681      	mov	r9, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8172 	beq.w	8007dec <_dtoa_r+0xb4c>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	220a      	movs	r2, #10
 8007b0e:	4658      	mov	r0, fp
 8007b10:	f000 faec 	bl	80080ec <__multadd>
 8007b14:	9b00      	ldr	r3, [sp, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	4605      	mov	r5, r0
 8007b1a:	dc67      	bgt.n	8007bec <_dtoa_r+0x94c>
 8007b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	dc41      	bgt.n	8007ba6 <_dtoa_r+0x906>
 8007b22:	e063      	b.n	8007bec <_dtoa_r+0x94c>
 8007b24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b2a:	e746      	b.n	80079ba <_dtoa_r+0x71a>
 8007b2c:	9b07      	ldr	r3, [sp, #28]
 8007b2e:	1e5c      	subs	r4, r3, #1
 8007b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b32:	42a3      	cmp	r3, r4
 8007b34:	bfbf      	itttt	lt
 8007b36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b3c:	1ae3      	sublt	r3, r4, r3
 8007b3e:	bfb4      	ite	lt
 8007b40:	18d2      	addlt	r2, r2, r3
 8007b42:	1b1c      	subge	r4, r3, r4
 8007b44:	9b07      	ldr	r3, [sp, #28]
 8007b46:	bfbc      	itt	lt
 8007b48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b4a:	2400      	movlt	r4, #0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bfb5      	itete	lt
 8007b50:	eba8 0603 	sublt.w	r6, r8, r3
 8007b54:	9b07      	ldrge	r3, [sp, #28]
 8007b56:	2300      	movlt	r3, #0
 8007b58:	4646      	movge	r6, r8
 8007b5a:	e730      	b.n	80079be <_dtoa_r+0x71e>
 8007b5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b60:	4646      	mov	r6, r8
 8007b62:	e735      	b.n	80079d0 <_dtoa_r+0x730>
 8007b64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b66:	e75c      	b.n	8007a22 <_dtoa_r+0x782>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e788      	b.n	8007a7e <_dtoa_r+0x7de>
 8007b6c:	3fe00000 	.word	0x3fe00000
 8007b70:	40240000 	.word	0x40240000
 8007b74:	40140000 	.word	0x40140000
 8007b78:	9b02      	ldr	r3, [sp, #8]
 8007b7a:	e780      	b.n	8007a7e <_dtoa_r+0x7de>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b80:	e782      	b.n	8007a88 <_dtoa_r+0x7e8>
 8007b82:	d099      	beq.n	8007ab8 <_dtoa_r+0x818>
 8007b84:	9a08      	ldr	r2, [sp, #32]
 8007b86:	331c      	adds	r3, #28
 8007b88:	441a      	add	r2, r3
 8007b8a:	4498      	add	r8, r3
 8007b8c:	441e      	add	r6, r3
 8007b8e:	9208      	str	r2, [sp, #32]
 8007b90:	e792      	b.n	8007ab8 <_dtoa_r+0x818>
 8007b92:	4603      	mov	r3, r0
 8007b94:	e7f6      	b.n	8007b84 <_dtoa_r+0x8e4>
 8007b96:	9b07      	ldr	r3, [sp, #28]
 8007b98:	9704      	str	r7, [sp, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dc20      	bgt.n	8007be0 <_dtoa_r+0x940>
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	dd1e      	ble.n	8007be4 <_dtoa_r+0x944>
 8007ba6:	9b00      	ldr	r3, [sp, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f47f aec0 	bne.w	800792e <_dtoa_r+0x68e>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f000 fa9a 	bl	80080ec <__multadd>
 8007bb8:	4601      	mov	r1, r0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f000 fcad 	bl	800851c <__mcmp>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f77f aeb3 	ble.w	800792e <_dtoa_r+0x68e>
 8007bc8:	4656      	mov	r6, sl
 8007bca:	2331      	movs	r3, #49	@ 0x31
 8007bcc:	f806 3b01 	strb.w	r3, [r6], #1
 8007bd0:	9b04      	ldr	r3, [sp, #16]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	e6ae      	b.n	8007936 <_dtoa_r+0x696>
 8007bd8:	9c07      	ldr	r4, [sp, #28]
 8007bda:	9704      	str	r7, [sp, #16]
 8007bdc:	4625      	mov	r5, r4
 8007bde:	e7f3      	b.n	8007bc8 <_dtoa_r+0x928>
 8007be0:	9b07      	ldr	r3, [sp, #28]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8104 	beq.w	8007df4 <_dtoa_r+0xb54>
 8007bec:	2e00      	cmp	r6, #0
 8007bee:	dd05      	ble.n	8007bfc <_dtoa_r+0x95c>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	4658      	mov	r0, fp
 8007bf6:	f000 fc25 	bl	8008444 <__lshift>
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d05a      	beq.n	8007cb8 <_dtoa_r+0xa18>
 8007c02:	6869      	ldr	r1, [r5, #4]
 8007c04:	4658      	mov	r0, fp
 8007c06:	f000 fa0f 	bl	8008028 <_Balloc>
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	b928      	cbnz	r0, 8007c1a <_dtoa_r+0x97a>
 8007c0e:	4b84      	ldr	r3, [pc, #528]	@ (8007e20 <_dtoa_r+0xb80>)
 8007c10:	4602      	mov	r2, r0
 8007c12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c16:	f7ff bb5a 	b.w	80072ce <_dtoa_r+0x2e>
 8007c1a:	692a      	ldr	r2, [r5, #16]
 8007c1c:	3202      	adds	r2, #2
 8007c1e:	0092      	lsls	r2, r2, #2
 8007c20:	f105 010c 	add.w	r1, r5, #12
 8007c24:	300c      	adds	r0, #12
 8007c26:	f001 f985 	bl	8008f34 <memcpy>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4658      	mov	r0, fp
 8007c30:	f000 fc08 	bl	8008444 <__lshift>
 8007c34:	f10a 0301 	add.w	r3, sl, #1
 8007c38:	9307      	str	r3, [sp, #28]
 8007c3a:	9b00      	ldr	r3, [sp, #0]
 8007c3c:	4453      	add	r3, sl
 8007c3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	462f      	mov	r7, r5
 8007c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	3b01      	subs	r3, #1
 8007c52:	4648      	mov	r0, r9
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	f7ff fa98 	bl	800718a <quorem>
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	9002      	str	r0, [sp, #8]
 8007c5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c62:	4648      	mov	r0, r9
 8007c64:	f000 fc5a 	bl	800851c <__mcmp>
 8007c68:	462a      	mov	r2, r5
 8007c6a:	9008      	str	r0, [sp, #32]
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4658      	mov	r0, fp
 8007c70:	f000 fc70 	bl	8008554 <__mdiff>
 8007c74:	68c2      	ldr	r2, [r0, #12]
 8007c76:	4606      	mov	r6, r0
 8007c78:	bb02      	cbnz	r2, 8007cbc <_dtoa_r+0xa1c>
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4648      	mov	r0, r9
 8007c7e:	f000 fc4d 	bl	800851c <__mcmp>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4631      	mov	r1, r6
 8007c86:	4658      	mov	r0, fp
 8007c88:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c8a:	f000 fa0d 	bl	80080a8 <_Bfree>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c92:	9e07      	ldr	r6, [sp, #28]
 8007c94:	ea43 0102 	orr.w	r1, r3, r2
 8007c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c9a:	4319      	orrs	r1, r3
 8007c9c:	d110      	bne.n	8007cc0 <_dtoa_r+0xa20>
 8007c9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ca2:	d029      	beq.n	8007cf8 <_dtoa_r+0xa58>
 8007ca4:	9b08      	ldr	r3, [sp, #32]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dd02      	ble.n	8007cb0 <_dtoa_r+0xa10>
 8007caa:	9b02      	ldr	r3, [sp, #8]
 8007cac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007cb0:	9b00      	ldr	r3, [sp, #0]
 8007cb2:	f883 8000 	strb.w	r8, [r3]
 8007cb6:	e63f      	b.n	8007938 <_dtoa_r+0x698>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e7bb      	b.n	8007c34 <_dtoa_r+0x994>
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	e7e1      	b.n	8007c84 <_dtoa_r+0x9e4>
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	db04      	blt.n	8007cd0 <_dtoa_r+0xa30>
 8007cc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	d120      	bne.n	8007d12 <_dtoa_r+0xa72>
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	dded      	ble.n	8007cb0 <_dtoa_r+0xa10>
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4658      	mov	r0, fp
 8007cda:	f000 fbb3 	bl	8008444 <__lshift>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4681      	mov	r9, r0
 8007ce2:	f000 fc1b 	bl	800851c <__mcmp>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	dc03      	bgt.n	8007cf2 <_dtoa_r+0xa52>
 8007cea:	d1e1      	bne.n	8007cb0 <_dtoa_r+0xa10>
 8007cec:	f018 0f01 	tst.w	r8, #1
 8007cf0:	d0de      	beq.n	8007cb0 <_dtoa_r+0xa10>
 8007cf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cf6:	d1d8      	bne.n	8007caa <_dtoa_r+0xa0a>
 8007cf8:	9a00      	ldr	r2, [sp, #0]
 8007cfa:	2339      	movs	r3, #57	@ 0x39
 8007cfc:	7013      	strb	r3, [r2, #0]
 8007cfe:	4633      	mov	r3, r6
 8007d00:	461e      	mov	r6, r3
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d08:	2a39      	cmp	r2, #57	@ 0x39
 8007d0a:	d052      	beq.n	8007db2 <_dtoa_r+0xb12>
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	e612      	b.n	8007938 <_dtoa_r+0x698>
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	dd07      	ble.n	8007d26 <_dtoa_r+0xa86>
 8007d16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d1a:	d0ed      	beq.n	8007cf8 <_dtoa_r+0xa58>
 8007d1c:	9a00      	ldr	r2, [sp, #0]
 8007d1e:	f108 0301 	add.w	r3, r8, #1
 8007d22:	7013      	strb	r3, [r2, #0]
 8007d24:	e608      	b.n	8007938 <_dtoa_r+0x698>
 8007d26:	9b07      	ldr	r3, [sp, #28]
 8007d28:	9a07      	ldr	r2, [sp, #28]
 8007d2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d028      	beq.n	8007d86 <_dtoa_r+0xae6>
 8007d34:	4649      	mov	r1, r9
 8007d36:	2300      	movs	r3, #0
 8007d38:	220a      	movs	r2, #10
 8007d3a:	4658      	mov	r0, fp
 8007d3c:	f000 f9d6 	bl	80080ec <__multadd>
 8007d40:	42af      	cmp	r7, r5
 8007d42:	4681      	mov	r9, r0
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	f04f 020a 	mov.w	r2, #10
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	4658      	mov	r0, fp
 8007d50:	d107      	bne.n	8007d62 <_dtoa_r+0xac2>
 8007d52:	f000 f9cb 	bl	80080ec <__multadd>
 8007d56:	4607      	mov	r7, r0
 8007d58:	4605      	mov	r5, r0
 8007d5a:	9b07      	ldr	r3, [sp, #28]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	e774      	b.n	8007c4c <_dtoa_r+0x9ac>
 8007d62:	f000 f9c3 	bl	80080ec <__multadd>
 8007d66:	4629      	mov	r1, r5
 8007d68:	4607      	mov	r7, r0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4658      	mov	r0, fp
 8007d70:	f000 f9bc 	bl	80080ec <__multadd>
 8007d74:	4605      	mov	r5, r0
 8007d76:	e7f0      	b.n	8007d5a <_dtoa_r+0xaba>
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bfcc      	ite	gt
 8007d7e:	461e      	movgt	r6, r3
 8007d80:	2601      	movle	r6, #1
 8007d82:	4456      	add	r6, sl
 8007d84:	2700      	movs	r7, #0
 8007d86:	4649      	mov	r1, r9
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4658      	mov	r0, fp
 8007d8c:	f000 fb5a 	bl	8008444 <__lshift>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4681      	mov	r9, r0
 8007d94:	f000 fbc2 	bl	800851c <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	dcb0      	bgt.n	8007cfe <_dtoa_r+0xa5e>
 8007d9c:	d102      	bne.n	8007da4 <_dtoa_r+0xb04>
 8007d9e:	f018 0f01 	tst.w	r8, #1
 8007da2:	d1ac      	bne.n	8007cfe <_dtoa_r+0xa5e>
 8007da4:	4633      	mov	r3, r6
 8007da6:	461e      	mov	r6, r3
 8007da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dac:	2a30      	cmp	r2, #48	@ 0x30
 8007dae:	d0fa      	beq.n	8007da6 <_dtoa_r+0xb06>
 8007db0:	e5c2      	b.n	8007938 <_dtoa_r+0x698>
 8007db2:	459a      	cmp	sl, r3
 8007db4:	d1a4      	bne.n	8007d00 <_dtoa_r+0xa60>
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	3301      	adds	r3, #1
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	2331      	movs	r3, #49	@ 0x31
 8007dbe:	f88a 3000 	strb.w	r3, [sl]
 8007dc2:	e5b9      	b.n	8007938 <_dtoa_r+0x698>
 8007dc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e24 <_dtoa_r+0xb84>
 8007dca:	b11b      	cbz	r3, 8007dd4 <_dtoa_r+0xb34>
 8007dcc:	f10a 0308 	add.w	r3, sl, #8
 8007dd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	b019      	add	sp, #100	@ 0x64
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	f77f ae37 	ble.w	8007a52 <_dtoa_r+0x7b2>
 8007de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007de8:	2001      	movs	r0, #1
 8007dea:	e655      	b.n	8007a98 <_dtoa_r+0x7f8>
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f77f aed6 	ble.w	8007ba0 <_dtoa_r+0x900>
 8007df4:	4656      	mov	r6, sl
 8007df6:	4621      	mov	r1, r4
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f7ff f9c6 	bl	800718a <quorem>
 8007dfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e02:	f806 8b01 	strb.w	r8, [r6], #1
 8007e06:	9b00      	ldr	r3, [sp, #0]
 8007e08:	eba6 020a 	sub.w	r2, r6, sl
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	ddb3      	ble.n	8007d78 <_dtoa_r+0xad8>
 8007e10:	4649      	mov	r1, r9
 8007e12:	2300      	movs	r3, #0
 8007e14:	220a      	movs	r2, #10
 8007e16:	4658      	mov	r0, fp
 8007e18:	f000 f968 	bl	80080ec <__multadd>
 8007e1c:	4681      	mov	r9, r0
 8007e1e:	e7ea      	b.n	8007df6 <_dtoa_r+0xb56>
 8007e20:	08009398 	.word	0x08009398
 8007e24:	0800931c 	.word	0x0800931c

08007e28 <_free_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	d041      	beq.n	8007eb4 <_free_r+0x8c>
 8007e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e34:	1f0c      	subs	r4, r1, #4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfb8      	it	lt
 8007e3a:	18e4      	addlt	r4, r4, r3
 8007e3c:	f000 f8e8 	bl	8008010 <__malloc_lock>
 8007e40:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb8 <_free_r+0x90>)
 8007e42:	6813      	ldr	r3, [r2, #0]
 8007e44:	b933      	cbnz	r3, 8007e54 <_free_r+0x2c>
 8007e46:	6063      	str	r3, [r4, #4]
 8007e48:	6014      	str	r4, [r2, #0]
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e50:	f000 b8e4 	b.w	800801c <__malloc_unlock>
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	d908      	bls.n	8007e6a <_free_r+0x42>
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	1821      	adds	r1, r4, r0
 8007e5c:	428b      	cmp	r3, r1
 8007e5e:	bf01      	itttt	eq
 8007e60:	6819      	ldreq	r1, [r3, #0]
 8007e62:	685b      	ldreq	r3, [r3, #4]
 8007e64:	1809      	addeq	r1, r1, r0
 8007e66:	6021      	streq	r1, [r4, #0]
 8007e68:	e7ed      	b.n	8007e46 <_free_r+0x1e>
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	b10b      	cbz	r3, 8007e74 <_free_r+0x4c>
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	d9fa      	bls.n	8007e6a <_free_r+0x42>
 8007e74:	6811      	ldr	r1, [r2, #0]
 8007e76:	1850      	adds	r0, r2, r1
 8007e78:	42a0      	cmp	r0, r4
 8007e7a:	d10b      	bne.n	8007e94 <_free_r+0x6c>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	4401      	add	r1, r0
 8007e80:	1850      	adds	r0, r2, r1
 8007e82:	4283      	cmp	r3, r0
 8007e84:	6011      	str	r1, [r2, #0]
 8007e86:	d1e0      	bne.n	8007e4a <_free_r+0x22>
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	6053      	str	r3, [r2, #4]
 8007e8e:	4408      	add	r0, r1
 8007e90:	6010      	str	r0, [r2, #0]
 8007e92:	e7da      	b.n	8007e4a <_free_r+0x22>
 8007e94:	d902      	bls.n	8007e9c <_free_r+0x74>
 8007e96:	230c      	movs	r3, #12
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	e7d6      	b.n	8007e4a <_free_r+0x22>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	1821      	adds	r1, r4, r0
 8007ea0:	428b      	cmp	r3, r1
 8007ea2:	bf04      	itt	eq
 8007ea4:	6819      	ldreq	r1, [r3, #0]
 8007ea6:	685b      	ldreq	r3, [r3, #4]
 8007ea8:	6063      	str	r3, [r4, #4]
 8007eaa:	bf04      	itt	eq
 8007eac:	1809      	addeq	r1, r1, r0
 8007eae:	6021      	streq	r1, [r4, #0]
 8007eb0:	6054      	str	r4, [r2, #4]
 8007eb2:	e7ca      	b.n	8007e4a <_free_r+0x22>
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000474 	.word	0x20000474

08007ebc <malloc>:
 8007ebc:	4b02      	ldr	r3, [pc, #8]	@ (8007ec8 <malloc+0xc>)
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	f000 b825 	b.w	8007f10 <_malloc_r>
 8007ec6:	bf00      	nop
 8007ec8:	2000002c 	.word	0x2000002c

08007ecc <sbrk_aligned>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4e0f      	ldr	r6, [pc, #60]	@ (8007f0c <sbrk_aligned+0x40>)
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	6831      	ldr	r1, [r6, #0]
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	b911      	cbnz	r1, 8007ede <sbrk_aligned+0x12>
 8007ed8:	f001 f81c 	bl	8008f14 <_sbrk_r>
 8007edc:	6030      	str	r0, [r6, #0]
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f001 f817 	bl	8008f14 <_sbrk_r>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d103      	bne.n	8007ef2 <sbrk_aligned+0x26>
 8007eea:	f04f 34ff 	mov.w	r4, #4294967295
 8007eee:	4620      	mov	r0, r4
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	1cc4      	adds	r4, r0, #3
 8007ef4:	f024 0403 	bic.w	r4, r4, #3
 8007ef8:	42a0      	cmp	r0, r4
 8007efa:	d0f8      	beq.n	8007eee <sbrk_aligned+0x22>
 8007efc:	1a21      	subs	r1, r4, r0
 8007efe:	4628      	mov	r0, r5
 8007f00:	f001 f808 	bl	8008f14 <_sbrk_r>
 8007f04:	3001      	adds	r0, #1
 8007f06:	d1f2      	bne.n	8007eee <sbrk_aligned+0x22>
 8007f08:	e7ef      	b.n	8007eea <sbrk_aligned+0x1e>
 8007f0a:	bf00      	nop
 8007f0c:	20000470 	.word	0x20000470

08007f10 <_malloc_r>:
 8007f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f14:	1ccd      	adds	r5, r1, #3
 8007f16:	f025 0503 	bic.w	r5, r5, #3
 8007f1a:	3508      	adds	r5, #8
 8007f1c:	2d0c      	cmp	r5, #12
 8007f1e:	bf38      	it	cc
 8007f20:	250c      	movcc	r5, #12
 8007f22:	2d00      	cmp	r5, #0
 8007f24:	4606      	mov	r6, r0
 8007f26:	db01      	blt.n	8007f2c <_malloc_r+0x1c>
 8007f28:	42a9      	cmp	r1, r5
 8007f2a:	d904      	bls.n	8007f36 <_malloc_r+0x26>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	6033      	str	r3, [r6, #0]
 8007f30:	2000      	movs	r0, #0
 8007f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800800c <_malloc_r+0xfc>
 8007f3a:	f000 f869 	bl	8008010 <__malloc_lock>
 8007f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f42:	461c      	mov	r4, r3
 8007f44:	bb44      	cbnz	r4, 8007f98 <_malloc_r+0x88>
 8007f46:	4629      	mov	r1, r5
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7ff ffbf 	bl	8007ecc <sbrk_aligned>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	4604      	mov	r4, r0
 8007f52:	d158      	bne.n	8008006 <_malloc_r+0xf6>
 8007f54:	f8d8 4000 	ldr.w	r4, [r8]
 8007f58:	4627      	mov	r7, r4
 8007f5a:	2f00      	cmp	r7, #0
 8007f5c:	d143      	bne.n	8007fe6 <_malloc_r+0xd6>
 8007f5e:	2c00      	cmp	r4, #0
 8007f60:	d04b      	beq.n	8007ffa <_malloc_r+0xea>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	4639      	mov	r1, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	eb04 0903 	add.w	r9, r4, r3
 8007f6c:	f000 ffd2 	bl	8008f14 <_sbrk_r>
 8007f70:	4581      	cmp	r9, r0
 8007f72:	d142      	bne.n	8007ffa <_malloc_r+0xea>
 8007f74:	6821      	ldr	r1, [r4, #0]
 8007f76:	1a6d      	subs	r5, r5, r1
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7ff ffa6 	bl	8007ecc <sbrk_aligned>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d03a      	beq.n	8007ffa <_malloc_r+0xea>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	442b      	add	r3, r5
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	bb62      	cbnz	r2, 8007fec <_malloc_r+0xdc>
 8007f92:	f8c8 7000 	str.w	r7, [r8]
 8007f96:	e00f      	b.n	8007fb8 <_malloc_r+0xa8>
 8007f98:	6822      	ldr	r2, [r4, #0]
 8007f9a:	1b52      	subs	r2, r2, r5
 8007f9c:	d420      	bmi.n	8007fe0 <_malloc_r+0xd0>
 8007f9e:	2a0b      	cmp	r2, #11
 8007fa0:	d917      	bls.n	8007fd2 <_malloc_r+0xc2>
 8007fa2:	1961      	adds	r1, r4, r5
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	6025      	str	r5, [r4, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	6059      	strne	r1, [r3, #4]
 8007fac:	6863      	ldr	r3, [r4, #4]
 8007fae:	bf08      	it	eq
 8007fb0:	f8c8 1000 	streq.w	r1, [r8]
 8007fb4:	5162      	str	r2, [r4, r5]
 8007fb6:	604b      	str	r3, [r1, #4]
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f000 f82f 	bl	800801c <__malloc_unlock>
 8007fbe:	f104 000b 	add.w	r0, r4, #11
 8007fc2:	1d23      	adds	r3, r4, #4
 8007fc4:	f020 0007 	bic.w	r0, r0, #7
 8007fc8:	1ac2      	subs	r2, r0, r3
 8007fca:	bf1c      	itt	ne
 8007fcc:	1a1b      	subne	r3, r3, r0
 8007fce:	50a3      	strne	r3, [r4, r2]
 8007fd0:	e7af      	b.n	8007f32 <_malloc_r+0x22>
 8007fd2:	6862      	ldr	r2, [r4, #4]
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	bf0c      	ite	eq
 8007fd8:	f8c8 2000 	streq.w	r2, [r8]
 8007fdc:	605a      	strne	r2, [r3, #4]
 8007fde:	e7eb      	b.n	8007fb8 <_malloc_r+0xa8>
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	6864      	ldr	r4, [r4, #4]
 8007fe4:	e7ae      	b.n	8007f44 <_malloc_r+0x34>
 8007fe6:	463c      	mov	r4, r7
 8007fe8:	687f      	ldr	r7, [r7, #4]
 8007fea:	e7b6      	b.n	8007f5a <_malloc_r+0x4a>
 8007fec:	461a      	mov	r2, r3
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d1fb      	bne.n	8007fec <_malloc_r+0xdc>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	6053      	str	r3, [r2, #4]
 8007ff8:	e7de      	b.n	8007fb8 <_malloc_r+0xa8>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	6033      	str	r3, [r6, #0]
 8007ffe:	4630      	mov	r0, r6
 8008000:	f000 f80c 	bl	800801c <__malloc_unlock>
 8008004:	e794      	b.n	8007f30 <_malloc_r+0x20>
 8008006:	6005      	str	r5, [r0, #0]
 8008008:	e7d6      	b.n	8007fb8 <_malloc_r+0xa8>
 800800a:	bf00      	nop
 800800c:	20000474 	.word	0x20000474

08008010 <__malloc_lock>:
 8008010:	4801      	ldr	r0, [pc, #4]	@ (8008018 <__malloc_lock+0x8>)
 8008012:	f7ff b8b8 	b.w	8007186 <__retarget_lock_acquire_recursive>
 8008016:	bf00      	nop
 8008018:	2000046c 	.word	0x2000046c

0800801c <__malloc_unlock>:
 800801c:	4801      	ldr	r0, [pc, #4]	@ (8008024 <__malloc_unlock+0x8>)
 800801e:	f7ff b8b3 	b.w	8007188 <__retarget_lock_release_recursive>
 8008022:	bf00      	nop
 8008024:	2000046c 	.word	0x2000046c

08008028 <_Balloc>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	69c6      	ldr	r6, [r0, #28]
 800802c:	4604      	mov	r4, r0
 800802e:	460d      	mov	r5, r1
 8008030:	b976      	cbnz	r6, 8008050 <_Balloc+0x28>
 8008032:	2010      	movs	r0, #16
 8008034:	f7ff ff42 	bl	8007ebc <malloc>
 8008038:	4602      	mov	r2, r0
 800803a:	61e0      	str	r0, [r4, #28]
 800803c:	b920      	cbnz	r0, 8008048 <_Balloc+0x20>
 800803e:	4b18      	ldr	r3, [pc, #96]	@ (80080a0 <_Balloc+0x78>)
 8008040:	4818      	ldr	r0, [pc, #96]	@ (80080a4 <_Balloc+0x7c>)
 8008042:	216b      	movs	r1, #107	@ 0x6b
 8008044:	f000 ff84 	bl	8008f50 <__assert_func>
 8008048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800804c:	6006      	str	r6, [r0, #0]
 800804e:	60c6      	str	r6, [r0, #12]
 8008050:	69e6      	ldr	r6, [r4, #28]
 8008052:	68f3      	ldr	r3, [r6, #12]
 8008054:	b183      	cbz	r3, 8008078 <_Balloc+0x50>
 8008056:	69e3      	ldr	r3, [r4, #28]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800805e:	b9b8      	cbnz	r0, 8008090 <_Balloc+0x68>
 8008060:	2101      	movs	r1, #1
 8008062:	fa01 f605 	lsl.w	r6, r1, r5
 8008066:	1d72      	adds	r2, r6, #5
 8008068:	0092      	lsls	r2, r2, #2
 800806a:	4620      	mov	r0, r4
 800806c:	f000 ff8e 	bl	8008f8c <_calloc_r>
 8008070:	b160      	cbz	r0, 800808c <_Balloc+0x64>
 8008072:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008076:	e00e      	b.n	8008096 <_Balloc+0x6e>
 8008078:	2221      	movs	r2, #33	@ 0x21
 800807a:	2104      	movs	r1, #4
 800807c:	4620      	mov	r0, r4
 800807e:	f000 ff85 	bl	8008f8c <_calloc_r>
 8008082:	69e3      	ldr	r3, [r4, #28]
 8008084:	60f0      	str	r0, [r6, #12]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e4      	bne.n	8008056 <_Balloc+0x2e>
 800808c:	2000      	movs	r0, #0
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	6802      	ldr	r2, [r0, #0]
 8008092:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008096:	2300      	movs	r3, #0
 8008098:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800809c:	e7f7      	b.n	800808e <_Balloc+0x66>
 800809e:	bf00      	nop
 80080a0:	08009329 	.word	0x08009329
 80080a4:	080093a9 	.word	0x080093a9

080080a8 <_Bfree>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	69c6      	ldr	r6, [r0, #28]
 80080ac:	4605      	mov	r5, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b976      	cbnz	r6, 80080d0 <_Bfree+0x28>
 80080b2:	2010      	movs	r0, #16
 80080b4:	f7ff ff02 	bl	8007ebc <malloc>
 80080b8:	4602      	mov	r2, r0
 80080ba:	61e8      	str	r0, [r5, #28]
 80080bc:	b920      	cbnz	r0, 80080c8 <_Bfree+0x20>
 80080be:	4b09      	ldr	r3, [pc, #36]	@ (80080e4 <_Bfree+0x3c>)
 80080c0:	4809      	ldr	r0, [pc, #36]	@ (80080e8 <_Bfree+0x40>)
 80080c2:	218f      	movs	r1, #143	@ 0x8f
 80080c4:	f000 ff44 	bl	8008f50 <__assert_func>
 80080c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080cc:	6006      	str	r6, [r0, #0]
 80080ce:	60c6      	str	r6, [r0, #12]
 80080d0:	b13c      	cbz	r4, 80080e2 <_Bfree+0x3a>
 80080d2:	69eb      	ldr	r3, [r5, #28]
 80080d4:	6862      	ldr	r2, [r4, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080dc:	6021      	str	r1, [r4, #0]
 80080de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	08009329 	.word	0x08009329
 80080e8:	080093a9 	.word	0x080093a9

080080ec <__multadd>:
 80080ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f0:	690d      	ldr	r5, [r1, #16]
 80080f2:	4607      	mov	r7, r0
 80080f4:	460c      	mov	r4, r1
 80080f6:	461e      	mov	r6, r3
 80080f8:	f101 0c14 	add.w	ip, r1, #20
 80080fc:	2000      	movs	r0, #0
 80080fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008102:	b299      	uxth	r1, r3
 8008104:	fb02 6101 	mla	r1, r2, r1, r6
 8008108:	0c1e      	lsrs	r6, r3, #16
 800810a:	0c0b      	lsrs	r3, r1, #16
 800810c:	fb02 3306 	mla	r3, r2, r6, r3
 8008110:	b289      	uxth	r1, r1
 8008112:	3001      	adds	r0, #1
 8008114:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008118:	4285      	cmp	r5, r0
 800811a:	f84c 1b04 	str.w	r1, [ip], #4
 800811e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008122:	dcec      	bgt.n	80080fe <__multadd+0x12>
 8008124:	b30e      	cbz	r6, 800816a <__multadd+0x7e>
 8008126:	68a3      	ldr	r3, [r4, #8]
 8008128:	42ab      	cmp	r3, r5
 800812a:	dc19      	bgt.n	8008160 <__multadd+0x74>
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	4638      	mov	r0, r7
 8008130:	3101      	adds	r1, #1
 8008132:	f7ff ff79 	bl	8008028 <_Balloc>
 8008136:	4680      	mov	r8, r0
 8008138:	b928      	cbnz	r0, 8008146 <__multadd+0x5a>
 800813a:	4602      	mov	r2, r0
 800813c:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <__multadd+0x84>)
 800813e:	480d      	ldr	r0, [pc, #52]	@ (8008174 <__multadd+0x88>)
 8008140:	21ba      	movs	r1, #186	@ 0xba
 8008142:	f000 ff05 	bl	8008f50 <__assert_func>
 8008146:	6922      	ldr	r2, [r4, #16]
 8008148:	3202      	adds	r2, #2
 800814a:	f104 010c 	add.w	r1, r4, #12
 800814e:	0092      	lsls	r2, r2, #2
 8008150:	300c      	adds	r0, #12
 8008152:	f000 feef 	bl	8008f34 <memcpy>
 8008156:	4621      	mov	r1, r4
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ffa5 	bl	80080a8 <_Bfree>
 800815e:	4644      	mov	r4, r8
 8008160:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008164:	3501      	adds	r5, #1
 8008166:	615e      	str	r6, [r3, #20]
 8008168:	6125      	str	r5, [r4, #16]
 800816a:	4620      	mov	r0, r4
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008170:	08009398 	.word	0x08009398
 8008174:	080093a9 	.word	0x080093a9

08008178 <__hi0bits>:
 8008178:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800817c:	4603      	mov	r3, r0
 800817e:	bf36      	itet	cc
 8008180:	0403      	lslcc	r3, r0, #16
 8008182:	2000      	movcs	r0, #0
 8008184:	2010      	movcc	r0, #16
 8008186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800818a:	bf3c      	itt	cc
 800818c:	021b      	lslcc	r3, r3, #8
 800818e:	3008      	addcc	r0, #8
 8008190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008194:	bf3c      	itt	cc
 8008196:	011b      	lslcc	r3, r3, #4
 8008198:	3004      	addcc	r0, #4
 800819a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800819e:	bf3c      	itt	cc
 80081a0:	009b      	lslcc	r3, r3, #2
 80081a2:	3002      	addcc	r0, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db05      	blt.n	80081b4 <__hi0bits+0x3c>
 80081a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081ac:	f100 0001 	add.w	r0, r0, #1
 80081b0:	bf08      	it	eq
 80081b2:	2020      	moveq	r0, #32
 80081b4:	4770      	bx	lr

080081b6 <__lo0bits>:
 80081b6:	6803      	ldr	r3, [r0, #0]
 80081b8:	4602      	mov	r2, r0
 80081ba:	f013 0007 	ands.w	r0, r3, #7
 80081be:	d00b      	beq.n	80081d8 <__lo0bits+0x22>
 80081c0:	07d9      	lsls	r1, r3, #31
 80081c2:	d421      	bmi.n	8008208 <__lo0bits+0x52>
 80081c4:	0798      	lsls	r0, r3, #30
 80081c6:	bf49      	itett	mi
 80081c8:	085b      	lsrmi	r3, r3, #1
 80081ca:	089b      	lsrpl	r3, r3, #2
 80081cc:	2001      	movmi	r0, #1
 80081ce:	6013      	strmi	r3, [r2, #0]
 80081d0:	bf5c      	itt	pl
 80081d2:	6013      	strpl	r3, [r2, #0]
 80081d4:	2002      	movpl	r0, #2
 80081d6:	4770      	bx	lr
 80081d8:	b299      	uxth	r1, r3
 80081da:	b909      	cbnz	r1, 80081e0 <__lo0bits+0x2a>
 80081dc:	0c1b      	lsrs	r3, r3, #16
 80081de:	2010      	movs	r0, #16
 80081e0:	b2d9      	uxtb	r1, r3
 80081e2:	b909      	cbnz	r1, 80081e8 <__lo0bits+0x32>
 80081e4:	3008      	adds	r0, #8
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	0719      	lsls	r1, r3, #28
 80081ea:	bf04      	itt	eq
 80081ec:	091b      	lsreq	r3, r3, #4
 80081ee:	3004      	addeq	r0, #4
 80081f0:	0799      	lsls	r1, r3, #30
 80081f2:	bf04      	itt	eq
 80081f4:	089b      	lsreq	r3, r3, #2
 80081f6:	3002      	addeq	r0, #2
 80081f8:	07d9      	lsls	r1, r3, #31
 80081fa:	d403      	bmi.n	8008204 <__lo0bits+0x4e>
 80081fc:	085b      	lsrs	r3, r3, #1
 80081fe:	f100 0001 	add.w	r0, r0, #1
 8008202:	d003      	beq.n	800820c <__lo0bits+0x56>
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	4770      	bx	lr
 8008208:	2000      	movs	r0, #0
 800820a:	4770      	bx	lr
 800820c:	2020      	movs	r0, #32
 800820e:	4770      	bx	lr

08008210 <__i2b>:
 8008210:	b510      	push	{r4, lr}
 8008212:	460c      	mov	r4, r1
 8008214:	2101      	movs	r1, #1
 8008216:	f7ff ff07 	bl	8008028 <_Balloc>
 800821a:	4602      	mov	r2, r0
 800821c:	b928      	cbnz	r0, 800822a <__i2b+0x1a>
 800821e:	4b05      	ldr	r3, [pc, #20]	@ (8008234 <__i2b+0x24>)
 8008220:	4805      	ldr	r0, [pc, #20]	@ (8008238 <__i2b+0x28>)
 8008222:	f240 1145 	movw	r1, #325	@ 0x145
 8008226:	f000 fe93 	bl	8008f50 <__assert_func>
 800822a:	2301      	movs	r3, #1
 800822c:	6144      	str	r4, [r0, #20]
 800822e:	6103      	str	r3, [r0, #16]
 8008230:	bd10      	pop	{r4, pc}
 8008232:	bf00      	nop
 8008234:	08009398 	.word	0x08009398
 8008238:	080093a9 	.word	0x080093a9

0800823c <__multiply>:
 800823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008240:	4614      	mov	r4, r2
 8008242:	690a      	ldr	r2, [r1, #16]
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	429a      	cmp	r2, r3
 8008248:	bfa8      	it	ge
 800824a:	4623      	movge	r3, r4
 800824c:	460f      	mov	r7, r1
 800824e:	bfa4      	itt	ge
 8008250:	460c      	movge	r4, r1
 8008252:	461f      	movge	r7, r3
 8008254:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008258:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800825c:	68a3      	ldr	r3, [r4, #8]
 800825e:	6861      	ldr	r1, [r4, #4]
 8008260:	eb0a 0609 	add.w	r6, sl, r9
 8008264:	42b3      	cmp	r3, r6
 8008266:	b085      	sub	sp, #20
 8008268:	bfb8      	it	lt
 800826a:	3101      	addlt	r1, #1
 800826c:	f7ff fedc 	bl	8008028 <_Balloc>
 8008270:	b930      	cbnz	r0, 8008280 <__multiply+0x44>
 8008272:	4602      	mov	r2, r0
 8008274:	4b44      	ldr	r3, [pc, #272]	@ (8008388 <__multiply+0x14c>)
 8008276:	4845      	ldr	r0, [pc, #276]	@ (800838c <__multiply+0x150>)
 8008278:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800827c:	f000 fe68 	bl	8008f50 <__assert_func>
 8008280:	f100 0514 	add.w	r5, r0, #20
 8008284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008288:	462b      	mov	r3, r5
 800828a:	2200      	movs	r2, #0
 800828c:	4543      	cmp	r3, r8
 800828e:	d321      	bcc.n	80082d4 <__multiply+0x98>
 8008290:	f107 0114 	add.w	r1, r7, #20
 8008294:	f104 0214 	add.w	r2, r4, #20
 8008298:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800829c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	1b13      	subs	r3, r2, r4
 80082a4:	3b15      	subs	r3, #21
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	3304      	adds	r3, #4
 80082ac:	f104 0715 	add.w	r7, r4, #21
 80082b0:	42ba      	cmp	r2, r7
 80082b2:	bf38      	it	cc
 80082b4:	2304      	movcc	r3, #4
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	9b02      	ldr	r3, [sp, #8]
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	428b      	cmp	r3, r1
 80082be:	d80c      	bhi.n	80082da <__multiply+0x9e>
 80082c0:	2e00      	cmp	r6, #0
 80082c2:	dd03      	ble.n	80082cc <__multiply+0x90>
 80082c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d05b      	beq.n	8008384 <__multiply+0x148>
 80082cc:	6106      	str	r6, [r0, #16]
 80082ce:	b005      	add	sp, #20
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d4:	f843 2b04 	str.w	r2, [r3], #4
 80082d8:	e7d8      	b.n	800828c <__multiply+0x50>
 80082da:	f8b1 a000 	ldrh.w	sl, [r1]
 80082de:	f1ba 0f00 	cmp.w	sl, #0
 80082e2:	d024      	beq.n	800832e <__multiply+0xf2>
 80082e4:	f104 0e14 	add.w	lr, r4, #20
 80082e8:	46a9      	mov	r9, r5
 80082ea:	f04f 0c00 	mov.w	ip, #0
 80082ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082f2:	f8d9 3000 	ldr.w	r3, [r9]
 80082f6:	fa1f fb87 	uxth.w	fp, r7
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008300:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008304:	f8d9 7000 	ldr.w	r7, [r9]
 8008308:	4463      	add	r3, ip
 800830a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800830e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008312:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800831c:	4572      	cmp	r2, lr
 800831e:	f849 3b04 	str.w	r3, [r9], #4
 8008322:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008326:	d8e2      	bhi.n	80082ee <__multiply+0xb2>
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	f845 c003 	str.w	ip, [r5, r3]
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008334:	3104      	adds	r1, #4
 8008336:	f1b9 0f00 	cmp.w	r9, #0
 800833a:	d021      	beq.n	8008380 <__multiply+0x144>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	f104 0c14 	add.w	ip, r4, #20
 8008342:	46ae      	mov	lr, r5
 8008344:	f04f 0a00 	mov.w	sl, #0
 8008348:	f8bc b000 	ldrh.w	fp, [ip]
 800834c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008350:	fb09 770b 	mla	r7, r9, fp, r7
 8008354:	4457      	add	r7, sl
 8008356:	b29b      	uxth	r3, r3
 8008358:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800835c:	f84e 3b04 	str.w	r3, [lr], #4
 8008360:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008364:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008368:	f8be 3000 	ldrh.w	r3, [lr]
 800836c:	fb09 330a 	mla	r3, r9, sl, r3
 8008370:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008374:	4562      	cmp	r2, ip
 8008376:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800837a:	d8e5      	bhi.n	8008348 <__multiply+0x10c>
 800837c:	9f01      	ldr	r7, [sp, #4]
 800837e:	51eb      	str	r3, [r5, r7]
 8008380:	3504      	adds	r5, #4
 8008382:	e799      	b.n	80082b8 <__multiply+0x7c>
 8008384:	3e01      	subs	r6, #1
 8008386:	e79b      	b.n	80082c0 <__multiply+0x84>
 8008388:	08009398 	.word	0x08009398
 800838c:	080093a9 	.word	0x080093a9

08008390 <__pow5mult>:
 8008390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008394:	4615      	mov	r5, r2
 8008396:	f012 0203 	ands.w	r2, r2, #3
 800839a:	4607      	mov	r7, r0
 800839c:	460e      	mov	r6, r1
 800839e:	d007      	beq.n	80083b0 <__pow5mult+0x20>
 80083a0:	4c25      	ldr	r4, [pc, #148]	@ (8008438 <__pow5mult+0xa8>)
 80083a2:	3a01      	subs	r2, #1
 80083a4:	2300      	movs	r3, #0
 80083a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083aa:	f7ff fe9f 	bl	80080ec <__multadd>
 80083ae:	4606      	mov	r6, r0
 80083b0:	10ad      	asrs	r5, r5, #2
 80083b2:	d03d      	beq.n	8008430 <__pow5mult+0xa0>
 80083b4:	69fc      	ldr	r4, [r7, #28]
 80083b6:	b97c      	cbnz	r4, 80083d8 <__pow5mult+0x48>
 80083b8:	2010      	movs	r0, #16
 80083ba:	f7ff fd7f 	bl	8007ebc <malloc>
 80083be:	4602      	mov	r2, r0
 80083c0:	61f8      	str	r0, [r7, #28]
 80083c2:	b928      	cbnz	r0, 80083d0 <__pow5mult+0x40>
 80083c4:	4b1d      	ldr	r3, [pc, #116]	@ (800843c <__pow5mult+0xac>)
 80083c6:	481e      	ldr	r0, [pc, #120]	@ (8008440 <__pow5mult+0xb0>)
 80083c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083cc:	f000 fdc0 	bl	8008f50 <__assert_func>
 80083d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d4:	6004      	str	r4, [r0, #0]
 80083d6:	60c4      	str	r4, [r0, #12]
 80083d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083e0:	b94c      	cbnz	r4, 80083f6 <__pow5mult+0x66>
 80083e2:	f240 2171 	movw	r1, #625	@ 0x271
 80083e6:	4638      	mov	r0, r7
 80083e8:	f7ff ff12 	bl	8008210 <__i2b>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80083f2:	4604      	mov	r4, r0
 80083f4:	6003      	str	r3, [r0, #0]
 80083f6:	f04f 0900 	mov.w	r9, #0
 80083fa:	07eb      	lsls	r3, r5, #31
 80083fc:	d50a      	bpl.n	8008414 <__pow5mult+0x84>
 80083fe:	4631      	mov	r1, r6
 8008400:	4622      	mov	r2, r4
 8008402:	4638      	mov	r0, r7
 8008404:	f7ff ff1a 	bl	800823c <__multiply>
 8008408:	4631      	mov	r1, r6
 800840a:	4680      	mov	r8, r0
 800840c:	4638      	mov	r0, r7
 800840e:	f7ff fe4b 	bl	80080a8 <_Bfree>
 8008412:	4646      	mov	r6, r8
 8008414:	106d      	asrs	r5, r5, #1
 8008416:	d00b      	beq.n	8008430 <__pow5mult+0xa0>
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	b938      	cbnz	r0, 800842c <__pow5mult+0x9c>
 800841c:	4622      	mov	r2, r4
 800841e:	4621      	mov	r1, r4
 8008420:	4638      	mov	r0, r7
 8008422:	f7ff ff0b 	bl	800823c <__multiply>
 8008426:	6020      	str	r0, [r4, #0]
 8008428:	f8c0 9000 	str.w	r9, [r0]
 800842c:	4604      	mov	r4, r0
 800842e:	e7e4      	b.n	80083fa <__pow5mult+0x6a>
 8008430:	4630      	mov	r0, r6
 8008432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008436:	bf00      	nop
 8008438:	08009404 	.word	0x08009404
 800843c:	08009329 	.word	0x08009329
 8008440:	080093a9 	.word	0x080093a9

08008444 <__lshift>:
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	460c      	mov	r4, r1
 800844a:	6849      	ldr	r1, [r1, #4]
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008452:	68a3      	ldr	r3, [r4, #8]
 8008454:	4607      	mov	r7, r0
 8008456:	4691      	mov	r9, r2
 8008458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800845c:	f108 0601 	add.w	r6, r8, #1
 8008460:	42b3      	cmp	r3, r6
 8008462:	db0b      	blt.n	800847c <__lshift+0x38>
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff fddf 	bl	8008028 <_Balloc>
 800846a:	4605      	mov	r5, r0
 800846c:	b948      	cbnz	r0, 8008482 <__lshift+0x3e>
 800846e:	4602      	mov	r2, r0
 8008470:	4b28      	ldr	r3, [pc, #160]	@ (8008514 <__lshift+0xd0>)
 8008472:	4829      	ldr	r0, [pc, #164]	@ (8008518 <__lshift+0xd4>)
 8008474:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008478:	f000 fd6a 	bl	8008f50 <__assert_func>
 800847c:	3101      	adds	r1, #1
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	e7ee      	b.n	8008460 <__lshift+0x1c>
 8008482:	2300      	movs	r3, #0
 8008484:	f100 0114 	add.w	r1, r0, #20
 8008488:	f100 0210 	add.w	r2, r0, #16
 800848c:	4618      	mov	r0, r3
 800848e:	4553      	cmp	r3, sl
 8008490:	db33      	blt.n	80084fa <__lshift+0xb6>
 8008492:	6920      	ldr	r0, [r4, #16]
 8008494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008498:	f104 0314 	add.w	r3, r4, #20
 800849c:	f019 091f 	ands.w	r9, r9, #31
 80084a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084a8:	d02b      	beq.n	8008502 <__lshift+0xbe>
 80084aa:	f1c9 0e20 	rsb	lr, r9, #32
 80084ae:	468a      	mov	sl, r1
 80084b0:	2200      	movs	r2, #0
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	fa00 f009 	lsl.w	r0, r0, r9
 80084b8:	4310      	orrs	r0, r2
 80084ba:	f84a 0b04 	str.w	r0, [sl], #4
 80084be:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c2:	459c      	cmp	ip, r3
 80084c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80084c8:	d8f3      	bhi.n	80084b2 <__lshift+0x6e>
 80084ca:	ebac 0304 	sub.w	r3, ip, r4
 80084ce:	3b15      	subs	r3, #21
 80084d0:	f023 0303 	bic.w	r3, r3, #3
 80084d4:	3304      	adds	r3, #4
 80084d6:	f104 0015 	add.w	r0, r4, #21
 80084da:	4584      	cmp	ip, r0
 80084dc:	bf38      	it	cc
 80084de:	2304      	movcc	r3, #4
 80084e0:	50ca      	str	r2, [r1, r3]
 80084e2:	b10a      	cbz	r2, 80084e8 <__lshift+0xa4>
 80084e4:	f108 0602 	add.w	r6, r8, #2
 80084e8:	3e01      	subs	r6, #1
 80084ea:	4638      	mov	r0, r7
 80084ec:	612e      	str	r6, [r5, #16]
 80084ee:	4621      	mov	r1, r4
 80084f0:	f7ff fdda 	bl	80080a8 <_Bfree>
 80084f4:	4628      	mov	r0, r5
 80084f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80084fe:	3301      	adds	r3, #1
 8008500:	e7c5      	b.n	800848e <__lshift+0x4a>
 8008502:	3904      	subs	r1, #4
 8008504:	f853 2b04 	ldr.w	r2, [r3], #4
 8008508:	f841 2f04 	str.w	r2, [r1, #4]!
 800850c:	459c      	cmp	ip, r3
 800850e:	d8f9      	bhi.n	8008504 <__lshift+0xc0>
 8008510:	e7ea      	b.n	80084e8 <__lshift+0xa4>
 8008512:	bf00      	nop
 8008514:	08009398 	.word	0x08009398
 8008518:	080093a9 	.word	0x080093a9

0800851c <__mcmp>:
 800851c:	690a      	ldr	r2, [r1, #16]
 800851e:	4603      	mov	r3, r0
 8008520:	6900      	ldr	r0, [r0, #16]
 8008522:	1a80      	subs	r0, r0, r2
 8008524:	b530      	push	{r4, r5, lr}
 8008526:	d10e      	bne.n	8008546 <__mcmp+0x2a>
 8008528:	3314      	adds	r3, #20
 800852a:	3114      	adds	r1, #20
 800852c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800853c:	4295      	cmp	r5, r2
 800853e:	d003      	beq.n	8008548 <__mcmp+0x2c>
 8008540:	d205      	bcs.n	800854e <__mcmp+0x32>
 8008542:	f04f 30ff 	mov.w	r0, #4294967295
 8008546:	bd30      	pop	{r4, r5, pc}
 8008548:	42a3      	cmp	r3, r4
 800854a:	d3f3      	bcc.n	8008534 <__mcmp+0x18>
 800854c:	e7fb      	b.n	8008546 <__mcmp+0x2a>
 800854e:	2001      	movs	r0, #1
 8008550:	e7f9      	b.n	8008546 <__mcmp+0x2a>
	...

08008554 <__mdiff>:
 8008554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	4689      	mov	r9, r1
 800855a:	4606      	mov	r6, r0
 800855c:	4611      	mov	r1, r2
 800855e:	4648      	mov	r0, r9
 8008560:	4614      	mov	r4, r2
 8008562:	f7ff ffdb 	bl	800851c <__mcmp>
 8008566:	1e05      	subs	r5, r0, #0
 8008568:	d112      	bne.n	8008590 <__mdiff+0x3c>
 800856a:	4629      	mov	r1, r5
 800856c:	4630      	mov	r0, r6
 800856e:	f7ff fd5b 	bl	8008028 <_Balloc>
 8008572:	4602      	mov	r2, r0
 8008574:	b928      	cbnz	r0, 8008582 <__mdiff+0x2e>
 8008576:	4b3f      	ldr	r3, [pc, #252]	@ (8008674 <__mdiff+0x120>)
 8008578:	f240 2137 	movw	r1, #567	@ 0x237
 800857c:	483e      	ldr	r0, [pc, #248]	@ (8008678 <__mdiff+0x124>)
 800857e:	f000 fce7 	bl	8008f50 <__assert_func>
 8008582:	2301      	movs	r3, #1
 8008584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008588:	4610      	mov	r0, r2
 800858a:	b003      	add	sp, #12
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	bfbc      	itt	lt
 8008592:	464b      	movlt	r3, r9
 8008594:	46a1      	movlt	r9, r4
 8008596:	4630      	mov	r0, r6
 8008598:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800859c:	bfba      	itte	lt
 800859e:	461c      	movlt	r4, r3
 80085a0:	2501      	movlt	r5, #1
 80085a2:	2500      	movge	r5, #0
 80085a4:	f7ff fd40 	bl	8008028 <_Balloc>
 80085a8:	4602      	mov	r2, r0
 80085aa:	b918      	cbnz	r0, 80085b4 <__mdiff+0x60>
 80085ac:	4b31      	ldr	r3, [pc, #196]	@ (8008674 <__mdiff+0x120>)
 80085ae:	f240 2145 	movw	r1, #581	@ 0x245
 80085b2:	e7e3      	b.n	800857c <__mdiff+0x28>
 80085b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085b8:	6926      	ldr	r6, [r4, #16]
 80085ba:	60c5      	str	r5, [r0, #12]
 80085bc:	f109 0310 	add.w	r3, r9, #16
 80085c0:	f109 0514 	add.w	r5, r9, #20
 80085c4:	f104 0e14 	add.w	lr, r4, #20
 80085c8:	f100 0b14 	add.w	fp, r0, #20
 80085cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	46d9      	mov	r9, fp
 80085d8:	f04f 0c00 	mov.w	ip, #0
 80085dc:	9b01      	ldr	r3, [sp, #4]
 80085de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	fa1f f38a 	uxth.w	r3, sl
 80085ec:	4619      	mov	r1, r3
 80085ee:	b283      	uxth	r3, r0
 80085f0:	1acb      	subs	r3, r1, r3
 80085f2:	0c00      	lsrs	r0, r0, #16
 80085f4:	4463      	add	r3, ip
 80085f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008604:	4576      	cmp	r6, lr
 8008606:	f849 3b04 	str.w	r3, [r9], #4
 800860a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800860e:	d8e5      	bhi.n	80085dc <__mdiff+0x88>
 8008610:	1b33      	subs	r3, r6, r4
 8008612:	3b15      	subs	r3, #21
 8008614:	f023 0303 	bic.w	r3, r3, #3
 8008618:	3415      	adds	r4, #21
 800861a:	3304      	adds	r3, #4
 800861c:	42a6      	cmp	r6, r4
 800861e:	bf38      	it	cc
 8008620:	2304      	movcc	r3, #4
 8008622:	441d      	add	r5, r3
 8008624:	445b      	add	r3, fp
 8008626:	461e      	mov	r6, r3
 8008628:	462c      	mov	r4, r5
 800862a:	4544      	cmp	r4, r8
 800862c:	d30e      	bcc.n	800864c <__mdiff+0xf8>
 800862e:	f108 0103 	add.w	r1, r8, #3
 8008632:	1b49      	subs	r1, r1, r5
 8008634:	f021 0103 	bic.w	r1, r1, #3
 8008638:	3d03      	subs	r5, #3
 800863a:	45a8      	cmp	r8, r5
 800863c:	bf38      	it	cc
 800863e:	2100      	movcc	r1, #0
 8008640:	440b      	add	r3, r1
 8008642:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008646:	b191      	cbz	r1, 800866e <__mdiff+0x11a>
 8008648:	6117      	str	r7, [r2, #16]
 800864a:	e79d      	b.n	8008588 <__mdiff+0x34>
 800864c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008650:	46e6      	mov	lr, ip
 8008652:	0c08      	lsrs	r0, r1, #16
 8008654:	fa1c fc81 	uxtah	ip, ip, r1
 8008658:	4471      	add	r1, lr
 800865a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800865e:	b289      	uxth	r1, r1
 8008660:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008664:	f846 1b04 	str.w	r1, [r6], #4
 8008668:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800866c:	e7dd      	b.n	800862a <__mdiff+0xd6>
 800866e:	3f01      	subs	r7, #1
 8008670:	e7e7      	b.n	8008642 <__mdiff+0xee>
 8008672:	bf00      	nop
 8008674:	08009398 	.word	0x08009398
 8008678:	080093a9 	.word	0x080093a9

0800867c <__d2b>:
 800867c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008680:	460f      	mov	r7, r1
 8008682:	2101      	movs	r1, #1
 8008684:	ec59 8b10 	vmov	r8, r9, d0
 8008688:	4616      	mov	r6, r2
 800868a:	f7ff fccd 	bl	8008028 <_Balloc>
 800868e:	4604      	mov	r4, r0
 8008690:	b930      	cbnz	r0, 80086a0 <__d2b+0x24>
 8008692:	4602      	mov	r2, r0
 8008694:	4b23      	ldr	r3, [pc, #140]	@ (8008724 <__d2b+0xa8>)
 8008696:	4824      	ldr	r0, [pc, #144]	@ (8008728 <__d2b+0xac>)
 8008698:	f240 310f 	movw	r1, #783	@ 0x30f
 800869c:	f000 fc58 	bl	8008f50 <__assert_func>
 80086a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086a8:	b10d      	cbz	r5, 80086ae <__d2b+0x32>
 80086aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	f1b8 0300 	subs.w	r3, r8, #0
 80086b4:	d023      	beq.n	80086fe <__d2b+0x82>
 80086b6:	4668      	mov	r0, sp
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	f7ff fd7c 	bl	80081b6 <__lo0bits>
 80086be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086c2:	b1d0      	cbz	r0, 80086fa <__d2b+0x7e>
 80086c4:	f1c0 0320 	rsb	r3, r0, #32
 80086c8:	fa02 f303 	lsl.w	r3, r2, r3
 80086cc:	430b      	orrs	r3, r1
 80086ce:	40c2      	lsrs	r2, r0
 80086d0:	6163      	str	r3, [r4, #20]
 80086d2:	9201      	str	r2, [sp, #4]
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	61a3      	str	r3, [r4, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bf0c      	ite	eq
 80086dc:	2201      	moveq	r2, #1
 80086de:	2202      	movne	r2, #2
 80086e0:	6122      	str	r2, [r4, #16]
 80086e2:	b1a5      	cbz	r5, 800870e <__d2b+0x92>
 80086e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086e8:	4405      	add	r5, r0
 80086ea:	603d      	str	r5, [r7, #0]
 80086ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086f0:	6030      	str	r0, [r6, #0]
 80086f2:	4620      	mov	r0, r4
 80086f4:	b003      	add	sp, #12
 80086f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086fa:	6161      	str	r1, [r4, #20]
 80086fc:	e7ea      	b.n	80086d4 <__d2b+0x58>
 80086fe:	a801      	add	r0, sp, #4
 8008700:	f7ff fd59 	bl	80081b6 <__lo0bits>
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	6163      	str	r3, [r4, #20]
 8008708:	3020      	adds	r0, #32
 800870a:	2201      	movs	r2, #1
 800870c:	e7e8      	b.n	80086e0 <__d2b+0x64>
 800870e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008712:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008716:	6038      	str	r0, [r7, #0]
 8008718:	6918      	ldr	r0, [r3, #16]
 800871a:	f7ff fd2d 	bl	8008178 <__hi0bits>
 800871e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008722:	e7e5      	b.n	80086f0 <__d2b+0x74>
 8008724:	08009398 	.word	0x08009398
 8008728:	080093a9 	.word	0x080093a9

0800872c <__ssputs_r>:
 800872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	688e      	ldr	r6, [r1, #8]
 8008732:	461f      	mov	r7, r3
 8008734:	42be      	cmp	r6, r7
 8008736:	680b      	ldr	r3, [r1, #0]
 8008738:	4682      	mov	sl, r0
 800873a:	460c      	mov	r4, r1
 800873c:	4690      	mov	r8, r2
 800873e:	d82d      	bhi.n	800879c <__ssputs_r+0x70>
 8008740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008744:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008748:	d026      	beq.n	8008798 <__ssputs_r+0x6c>
 800874a:	6965      	ldr	r5, [r4, #20]
 800874c:	6909      	ldr	r1, [r1, #16]
 800874e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008752:	eba3 0901 	sub.w	r9, r3, r1
 8008756:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800875a:	1c7b      	adds	r3, r7, #1
 800875c:	444b      	add	r3, r9
 800875e:	106d      	asrs	r5, r5, #1
 8008760:	429d      	cmp	r5, r3
 8008762:	bf38      	it	cc
 8008764:	461d      	movcc	r5, r3
 8008766:	0553      	lsls	r3, r2, #21
 8008768:	d527      	bpl.n	80087ba <__ssputs_r+0x8e>
 800876a:	4629      	mov	r1, r5
 800876c:	f7ff fbd0 	bl	8007f10 <_malloc_r>
 8008770:	4606      	mov	r6, r0
 8008772:	b360      	cbz	r0, 80087ce <__ssputs_r+0xa2>
 8008774:	6921      	ldr	r1, [r4, #16]
 8008776:	464a      	mov	r2, r9
 8008778:	f000 fbdc 	bl	8008f34 <memcpy>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	6126      	str	r6, [r4, #16]
 800878a:	6165      	str	r5, [r4, #20]
 800878c:	444e      	add	r6, r9
 800878e:	eba5 0509 	sub.w	r5, r5, r9
 8008792:	6026      	str	r6, [r4, #0]
 8008794:	60a5      	str	r5, [r4, #8]
 8008796:	463e      	mov	r6, r7
 8008798:	42be      	cmp	r6, r7
 800879a:	d900      	bls.n	800879e <__ssputs_r+0x72>
 800879c:	463e      	mov	r6, r7
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	4632      	mov	r2, r6
 80087a2:	4641      	mov	r1, r8
 80087a4:	f000 fb9c 	bl	8008ee0 <memmove>
 80087a8:	68a3      	ldr	r3, [r4, #8]
 80087aa:	1b9b      	subs	r3, r3, r6
 80087ac:	60a3      	str	r3, [r4, #8]
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	4433      	add	r3, r6
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	2000      	movs	r0, #0
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	462a      	mov	r2, r5
 80087bc:	f000 fc0c 	bl	8008fd8 <_realloc_r>
 80087c0:	4606      	mov	r6, r0
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d1e0      	bne.n	8008788 <__ssputs_r+0x5c>
 80087c6:	6921      	ldr	r1, [r4, #16]
 80087c8:	4650      	mov	r0, sl
 80087ca:	f7ff fb2d 	bl	8007e28 <_free_r>
 80087ce:	230c      	movs	r3, #12
 80087d0:	f8ca 3000 	str.w	r3, [sl]
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	e7e9      	b.n	80087b6 <__ssputs_r+0x8a>
	...

080087e4 <_svfiprintf_r>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	4698      	mov	r8, r3
 80087ea:	898b      	ldrh	r3, [r1, #12]
 80087ec:	061b      	lsls	r3, r3, #24
 80087ee:	b09d      	sub	sp, #116	@ 0x74
 80087f0:	4607      	mov	r7, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	d510      	bpl.n	800881a <_svfiprintf_r+0x36>
 80087f8:	690b      	ldr	r3, [r1, #16]
 80087fa:	b973      	cbnz	r3, 800881a <_svfiprintf_r+0x36>
 80087fc:	2140      	movs	r1, #64	@ 0x40
 80087fe:	f7ff fb87 	bl	8007f10 <_malloc_r>
 8008802:	6028      	str	r0, [r5, #0]
 8008804:	6128      	str	r0, [r5, #16]
 8008806:	b930      	cbnz	r0, 8008816 <_svfiprintf_r+0x32>
 8008808:	230c      	movs	r3, #12
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	b01d      	add	sp, #116	@ 0x74
 8008812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008816:	2340      	movs	r3, #64	@ 0x40
 8008818:	616b      	str	r3, [r5, #20]
 800881a:	2300      	movs	r3, #0
 800881c:	9309      	str	r3, [sp, #36]	@ 0x24
 800881e:	2320      	movs	r3, #32
 8008820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008824:	f8cd 800c 	str.w	r8, [sp, #12]
 8008828:	2330      	movs	r3, #48	@ 0x30
 800882a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089c8 <_svfiprintf_r+0x1e4>
 800882e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008832:	f04f 0901 	mov.w	r9, #1
 8008836:	4623      	mov	r3, r4
 8008838:	469a      	mov	sl, r3
 800883a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800883e:	b10a      	cbz	r2, 8008844 <_svfiprintf_r+0x60>
 8008840:	2a25      	cmp	r2, #37	@ 0x25
 8008842:	d1f9      	bne.n	8008838 <_svfiprintf_r+0x54>
 8008844:	ebba 0b04 	subs.w	fp, sl, r4
 8008848:	d00b      	beq.n	8008862 <_svfiprintf_r+0x7e>
 800884a:	465b      	mov	r3, fp
 800884c:	4622      	mov	r2, r4
 800884e:	4629      	mov	r1, r5
 8008850:	4638      	mov	r0, r7
 8008852:	f7ff ff6b 	bl	800872c <__ssputs_r>
 8008856:	3001      	adds	r0, #1
 8008858:	f000 80a7 	beq.w	80089aa <_svfiprintf_r+0x1c6>
 800885c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800885e:	445a      	add	r2, fp
 8008860:	9209      	str	r2, [sp, #36]	@ 0x24
 8008862:	f89a 3000 	ldrb.w	r3, [sl]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 809f 	beq.w	80089aa <_svfiprintf_r+0x1c6>
 800886c:	2300      	movs	r3, #0
 800886e:	f04f 32ff 	mov.w	r2, #4294967295
 8008872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008876:	f10a 0a01 	add.w	sl, sl, #1
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	9307      	str	r3, [sp, #28]
 800887e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008882:	931a      	str	r3, [sp, #104]	@ 0x68
 8008884:	4654      	mov	r4, sl
 8008886:	2205      	movs	r2, #5
 8008888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888c:	484e      	ldr	r0, [pc, #312]	@ (80089c8 <_svfiprintf_r+0x1e4>)
 800888e:	f7f7 fc9f 	bl	80001d0 <memchr>
 8008892:	9a04      	ldr	r2, [sp, #16]
 8008894:	b9d8      	cbnz	r0, 80088ce <_svfiprintf_r+0xea>
 8008896:	06d0      	lsls	r0, r2, #27
 8008898:	bf44      	itt	mi
 800889a:	2320      	movmi	r3, #32
 800889c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088a0:	0711      	lsls	r1, r2, #28
 80088a2:	bf44      	itt	mi
 80088a4:	232b      	movmi	r3, #43	@ 0x2b
 80088a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088aa:	f89a 3000 	ldrb.w	r3, [sl]
 80088ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80088b0:	d015      	beq.n	80088de <_svfiprintf_r+0xfa>
 80088b2:	9a07      	ldr	r2, [sp, #28]
 80088b4:	4654      	mov	r4, sl
 80088b6:	2000      	movs	r0, #0
 80088b8:	f04f 0c0a 	mov.w	ip, #10
 80088bc:	4621      	mov	r1, r4
 80088be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088c2:	3b30      	subs	r3, #48	@ 0x30
 80088c4:	2b09      	cmp	r3, #9
 80088c6:	d94b      	bls.n	8008960 <_svfiprintf_r+0x17c>
 80088c8:	b1b0      	cbz	r0, 80088f8 <_svfiprintf_r+0x114>
 80088ca:	9207      	str	r2, [sp, #28]
 80088cc:	e014      	b.n	80088f8 <_svfiprintf_r+0x114>
 80088ce:	eba0 0308 	sub.w	r3, r0, r8
 80088d2:	fa09 f303 	lsl.w	r3, r9, r3
 80088d6:	4313      	orrs	r3, r2
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	46a2      	mov	sl, r4
 80088dc:	e7d2      	b.n	8008884 <_svfiprintf_r+0xa0>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	1d19      	adds	r1, r3, #4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	9103      	str	r1, [sp, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bfbb      	ittet	lt
 80088ea:	425b      	neglt	r3, r3
 80088ec:	f042 0202 	orrlt.w	r2, r2, #2
 80088f0:	9307      	strge	r3, [sp, #28]
 80088f2:	9307      	strlt	r3, [sp, #28]
 80088f4:	bfb8      	it	lt
 80088f6:	9204      	strlt	r2, [sp, #16]
 80088f8:	7823      	ldrb	r3, [r4, #0]
 80088fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80088fc:	d10a      	bne.n	8008914 <_svfiprintf_r+0x130>
 80088fe:	7863      	ldrb	r3, [r4, #1]
 8008900:	2b2a      	cmp	r3, #42	@ 0x2a
 8008902:	d132      	bne.n	800896a <_svfiprintf_r+0x186>
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	1d1a      	adds	r2, r3, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	9203      	str	r2, [sp, #12]
 800890c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008910:	3402      	adds	r4, #2
 8008912:	9305      	str	r3, [sp, #20]
 8008914:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089d8 <_svfiprintf_r+0x1f4>
 8008918:	7821      	ldrb	r1, [r4, #0]
 800891a:	2203      	movs	r2, #3
 800891c:	4650      	mov	r0, sl
 800891e:	f7f7 fc57 	bl	80001d0 <memchr>
 8008922:	b138      	cbz	r0, 8008934 <_svfiprintf_r+0x150>
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	eba0 000a 	sub.w	r0, r0, sl
 800892a:	2240      	movs	r2, #64	@ 0x40
 800892c:	4082      	lsls	r2, r0
 800892e:	4313      	orrs	r3, r2
 8008930:	3401      	adds	r4, #1
 8008932:	9304      	str	r3, [sp, #16]
 8008934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008938:	4824      	ldr	r0, [pc, #144]	@ (80089cc <_svfiprintf_r+0x1e8>)
 800893a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800893e:	2206      	movs	r2, #6
 8008940:	f7f7 fc46 	bl	80001d0 <memchr>
 8008944:	2800      	cmp	r0, #0
 8008946:	d036      	beq.n	80089b6 <_svfiprintf_r+0x1d2>
 8008948:	4b21      	ldr	r3, [pc, #132]	@ (80089d0 <_svfiprintf_r+0x1ec>)
 800894a:	bb1b      	cbnz	r3, 8008994 <_svfiprintf_r+0x1b0>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	3307      	adds	r3, #7
 8008950:	f023 0307 	bic.w	r3, r3, #7
 8008954:	3308      	adds	r3, #8
 8008956:	9303      	str	r3, [sp, #12]
 8008958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800895a:	4433      	add	r3, r6
 800895c:	9309      	str	r3, [sp, #36]	@ 0x24
 800895e:	e76a      	b.n	8008836 <_svfiprintf_r+0x52>
 8008960:	fb0c 3202 	mla	r2, ip, r2, r3
 8008964:	460c      	mov	r4, r1
 8008966:	2001      	movs	r0, #1
 8008968:	e7a8      	b.n	80088bc <_svfiprintf_r+0xd8>
 800896a:	2300      	movs	r3, #0
 800896c:	3401      	adds	r4, #1
 800896e:	9305      	str	r3, [sp, #20]
 8008970:	4619      	mov	r1, r3
 8008972:	f04f 0c0a 	mov.w	ip, #10
 8008976:	4620      	mov	r0, r4
 8008978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800897c:	3a30      	subs	r2, #48	@ 0x30
 800897e:	2a09      	cmp	r2, #9
 8008980:	d903      	bls.n	800898a <_svfiprintf_r+0x1a6>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0c6      	beq.n	8008914 <_svfiprintf_r+0x130>
 8008986:	9105      	str	r1, [sp, #20]
 8008988:	e7c4      	b.n	8008914 <_svfiprintf_r+0x130>
 800898a:	fb0c 2101 	mla	r1, ip, r1, r2
 800898e:	4604      	mov	r4, r0
 8008990:	2301      	movs	r3, #1
 8008992:	e7f0      	b.n	8008976 <_svfiprintf_r+0x192>
 8008994:	ab03      	add	r3, sp, #12
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	462a      	mov	r2, r5
 800899a:	4b0e      	ldr	r3, [pc, #56]	@ (80089d4 <_svfiprintf_r+0x1f0>)
 800899c:	a904      	add	r1, sp, #16
 800899e:	4638      	mov	r0, r7
 80089a0:	f7fd fe84 	bl	80066ac <_printf_float>
 80089a4:	1c42      	adds	r2, r0, #1
 80089a6:	4606      	mov	r6, r0
 80089a8:	d1d6      	bne.n	8008958 <_svfiprintf_r+0x174>
 80089aa:	89ab      	ldrh	r3, [r5, #12]
 80089ac:	065b      	lsls	r3, r3, #25
 80089ae:	f53f af2d 	bmi.w	800880c <_svfiprintf_r+0x28>
 80089b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089b4:	e72c      	b.n	8008810 <_svfiprintf_r+0x2c>
 80089b6:	ab03      	add	r3, sp, #12
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	462a      	mov	r2, r5
 80089bc:	4b05      	ldr	r3, [pc, #20]	@ (80089d4 <_svfiprintf_r+0x1f0>)
 80089be:	a904      	add	r1, sp, #16
 80089c0:	4638      	mov	r0, r7
 80089c2:	f7fe f90b 	bl	8006bdc <_printf_i>
 80089c6:	e7ed      	b.n	80089a4 <_svfiprintf_r+0x1c0>
 80089c8:	08009500 	.word	0x08009500
 80089cc:	0800950a 	.word	0x0800950a
 80089d0:	080066ad 	.word	0x080066ad
 80089d4:	0800872d 	.word	0x0800872d
 80089d8:	08009506 	.word	0x08009506

080089dc <__sfputc_r>:
 80089dc:	6893      	ldr	r3, [r2, #8]
 80089de:	3b01      	subs	r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	b410      	push	{r4}
 80089e4:	6093      	str	r3, [r2, #8]
 80089e6:	da08      	bge.n	80089fa <__sfputc_r+0x1e>
 80089e8:	6994      	ldr	r4, [r2, #24]
 80089ea:	42a3      	cmp	r3, r4
 80089ec:	db01      	blt.n	80089f2 <__sfputc_r+0x16>
 80089ee:	290a      	cmp	r1, #10
 80089f0:	d103      	bne.n	80089fa <__sfputc_r+0x1e>
 80089f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f6:	f000 b9df 	b.w	8008db8 <__swbuf_r>
 80089fa:	6813      	ldr	r3, [r2, #0]
 80089fc:	1c58      	adds	r0, r3, #1
 80089fe:	6010      	str	r0, [r2, #0]
 8008a00:	7019      	strb	r1, [r3, #0]
 8008a02:	4608      	mov	r0, r1
 8008a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <__sfputs_r>:
 8008a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460f      	mov	r7, r1
 8008a10:	4614      	mov	r4, r2
 8008a12:	18d5      	adds	r5, r2, r3
 8008a14:	42ac      	cmp	r4, r5
 8008a16:	d101      	bne.n	8008a1c <__sfputs_r+0x12>
 8008a18:	2000      	movs	r0, #0
 8008a1a:	e007      	b.n	8008a2c <__sfputs_r+0x22>
 8008a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a20:	463a      	mov	r2, r7
 8008a22:	4630      	mov	r0, r6
 8008a24:	f7ff ffda 	bl	80089dc <__sfputc_r>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d1f3      	bne.n	8008a14 <__sfputs_r+0xa>
 8008a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a30 <_vfiprintf_r>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	460d      	mov	r5, r1
 8008a36:	b09d      	sub	sp, #116	@ 0x74
 8008a38:	4614      	mov	r4, r2
 8008a3a:	4698      	mov	r8, r3
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	b118      	cbz	r0, 8008a48 <_vfiprintf_r+0x18>
 8008a40:	6a03      	ldr	r3, [r0, #32]
 8008a42:	b90b      	cbnz	r3, 8008a48 <_vfiprintf_r+0x18>
 8008a44:	f7fe fa76 	bl	8006f34 <__sinit>
 8008a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a4a:	07d9      	lsls	r1, r3, #31
 8008a4c:	d405      	bmi.n	8008a5a <_vfiprintf_r+0x2a>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	059a      	lsls	r2, r3, #22
 8008a52:	d402      	bmi.n	8008a5a <_vfiprintf_r+0x2a>
 8008a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a56:	f7fe fb96 	bl	8007186 <__retarget_lock_acquire_recursive>
 8008a5a:	89ab      	ldrh	r3, [r5, #12]
 8008a5c:	071b      	lsls	r3, r3, #28
 8008a5e:	d501      	bpl.n	8008a64 <_vfiprintf_r+0x34>
 8008a60:	692b      	ldr	r3, [r5, #16]
 8008a62:	b99b      	cbnz	r3, 8008a8c <_vfiprintf_r+0x5c>
 8008a64:	4629      	mov	r1, r5
 8008a66:	4630      	mov	r0, r6
 8008a68:	f000 f9e4 	bl	8008e34 <__swsetup_r>
 8008a6c:	b170      	cbz	r0, 8008a8c <_vfiprintf_r+0x5c>
 8008a6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a70:	07dc      	lsls	r4, r3, #31
 8008a72:	d504      	bpl.n	8008a7e <_vfiprintf_r+0x4e>
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295
 8008a78:	b01d      	add	sp, #116	@ 0x74
 8008a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7e:	89ab      	ldrh	r3, [r5, #12]
 8008a80:	0598      	lsls	r0, r3, #22
 8008a82:	d4f7      	bmi.n	8008a74 <_vfiprintf_r+0x44>
 8008a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a86:	f7fe fb7f 	bl	8007188 <__retarget_lock_release_recursive>
 8008a8a:	e7f3      	b.n	8008a74 <_vfiprintf_r+0x44>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a90:	2320      	movs	r3, #32
 8008a92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a9a:	2330      	movs	r3, #48	@ 0x30
 8008a9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c4c <_vfiprintf_r+0x21c>
 8008aa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aa4:	f04f 0901 	mov.w	r9, #1
 8008aa8:	4623      	mov	r3, r4
 8008aaa:	469a      	mov	sl, r3
 8008aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab0:	b10a      	cbz	r2, 8008ab6 <_vfiprintf_r+0x86>
 8008ab2:	2a25      	cmp	r2, #37	@ 0x25
 8008ab4:	d1f9      	bne.n	8008aaa <_vfiprintf_r+0x7a>
 8008ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8008aba:	d00b      	beq.n	8008ad4 <_vfiprintf_r+0xa4>
 8008abc:	465b      	mov	r3, fp
 8008abe:	4622      	mov	r2, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7ff ffa1 	bl	8008a0a <__sfputs_r>
 8008ac8:	3001      	adds	r0, #1
 8008aca:	f000 80a7 	beq.w	8008c1c <_vfiprintf_r+0x1ec>
 8008ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ad0:	445a      	add	r2, fp
 8008ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 809f 	beq.w	8008c1c <_vfiprintf_r+0x1ec>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae8:	f10a 0a01 	add.w	sl, sl, #1
 8008aec:	9304      	str	r3, [sp, #16]
 8008aee:	9307      	str	r3, [sp, #28]
 8008af0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008af6:	4654      	mov	r4, sl
 8008af8:	2205      	movs	r2, #5
 8008afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afe:	4853      	ldr	r0, [pc, #332]	@ (8008c4c <_vfiprintf_r+0x21c>)
 8008b00:	f7f7 fb66 	bl	80001d0 <memchr>
 8008b04:	9a04      	ldr	r2, [sp, #16]
 8008b06:	b9d8      	cbnz	r0, 8008b40 <_vfiprintf_r+0x110>
 8008b08:	06d1      	lsls	r1, r2, #27
 8008b0a:	bf44      	itt	mi
 8008b0c:	2320      	movmi	r3, #32
 8008b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b12:	0713      	lsls	r3, r2, #28
 8008b14:	bf44      	itt	mi
 8008b16:	232b      	movmi	r3, #43	@ 0x2b
 8008b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b22:	d015      	beq.n	8008b50 <_vfiprintf_r+0x120>
 8008b24:	9a07      	ldr	r2, [sp, #28]
 8008b26:	4654      	mov	r4, sl
 8008b28:	2000      	movs	r0, #0
 8008b2a:	f04f 0c0a 	mov.w	ip, #10
 8008b2e:	4621      	mov	r1, r4
 8008b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b34:	3b30      	subs	r3, #48	@ 0x30
 8008b36:	2b09      	cmp	r3, #9
 8008b38:	d94b      	bls.n	8008bd2 <_vfiprintf_r+0x1a2>
 8008b3a:	b1b0      	cbz	r0, 8008b6a <_vfiprintf_r+0x13a>
 8008b3c:	9207      	str	r2, [sp, #28]
 8008b3e:	e014      	b.n	8008b6a <_vfiprintf_r+0x13a>
 8008b40:	eba0 0308 	sub.w	r3, r0, r8
 8008b44:	fa09 f303 	lsl.w	r3, r9, r3
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	46a2      	mov	sl, r4
 8008b4e:	e7d2      	b.n	8008af6 <_vfiprintf_r+0xc6>
 8008b50:	9b03      	ldr	r3, [sp, #12]
 8008b52:	1d19      	adds	r1, r3, #4
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	9103      	str	r1, [sp, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfbb      	ittet	lt
 8008b5c:	425b      	neglt	r3, r3
 8008b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b62:	9307      	strge	r3, [sp, #28]
 8008b64:	9307      	strlt	r3, [sp, #28]
 8008b66:	bfb8      	it	lt
 8008b68:	9204      	strlt	r2, [sp, #16]
 8008b6a:	7823      	ldrb	r3, [r4, #0]
 8008b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b6e:	d10a      	bne.n	8008b86 <_vfiprintf_r+0x156>
 8008b70:	7863      	ldrb	r3, [r4, #1]
 8008b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b74:	d132      	bne.n	8008bdc <_vfiprintf_r+0x1ac>
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	1d1a      	adds	r2, r3, #4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	9203      	str	r2, [sp, #12]
 8008b7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b82:	3402      	adds	r4, #2
 8008b84:	9305      	str	r3, [sp, #20]
 8008b86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c5c <_vfiprintf_r+0x22c>
 8008b8a:	7821      	ldrb	r1, [r4, #0]
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	4650      	mov	r0, sl
 8008b90:	f7f7 fb1e 	bl	80001d0 <memchr>
 8008b94:	b138      	cbz	r0, 8008ba6 <_vfiprintf_r+0x176>
 8008b96:	9b04      	ldr	r3, [sp, #16]
 8008b98:	eba0 000a 	sub.w	r0, r0, sl
 8008b9c:	2240      	movs	r2, #64	@ 0x40
 8008b9e:	4082      	lsls	r2, r0
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	3401      	adds	r4, #1
 8008ba4:	9304      	str	r3, [sp, #16]
 8008ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008baa:	4829      	ldr	r0, [pc, #164]	@ (8008c50 <_vfiprintf_r+0x220>)
 8008bac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bb0:	2206      	movs	r2, #6
 8008bb2:	f7f7 fb0d 	bl	80001d0 <memchr>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d03f      	beq.n	8008c3a <_vfiprintf_r+0x20a>
 8008bba:	4b26      	ldr	r3, [pc, #152]	@ (8008c54 <_vfiprintf_r+0x224>)
 8008bbc:	bb1b      	cbnz	r3, 8008c06 <_vfiprintf_r+0x1d6>
 8008bbe:	9b03      	ldr	r3, [sp, #12]
 8008bc0:	3307      	adds	r3, #7
 8008bc2:	f023 0307 	bic.w	r3, r3, #7
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	9303      	str	r3, [sp, #12]
 8008bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bcc:	443b      	add	r3, r7
 8008bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd0:	e76a      	b.n	8008aa8 <_vfiprintf_r+0x78>
 8008bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	2001      	movs	r0, #1
 8008bda:	e7a8      	b.n	8008b2e <_vfiprintf_r+0xfe>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	3401      	adds	r4, #1
 8008be0:	9305      	str	r3, [sp, #20]
 8008be2:	4619      	mov	r1, r3
 8008be4:	f04f 0c0a 	mov.w	ip, #10
 8008be8:	4620      	mov	r0, r4
 8008bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bee:	3a30      	subs	r2, #48	@ 0x30
 8008bf0:	2a09      	cmp	r2, #9
 8008bf2:	d903      	bls.n	8008bfc <_vfiprintf_r+0x1cc>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0c6      	beq.n	8008b86 <_vfiprintf_r+0x156>
 8008bf8:	9105      	str	r1, [sp, #20]
 8008bfa:	e7c4      	b.n	8008b86 <_vfiprintf_r+0x156>
 8008bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c00:	4604      	mov	r4, r0
 8008c02:	2301      	movs	r3, #1
 8008c04:	e7f0      	b.n	8008be8 <_vfiprintf_r+0x1b8>
 8008c06:	ab03      	add	r3, sp, #12
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	4b12      	ldr	r3, [pc, #72]	@ (8008c58 <_vfiprintf_r+0x228>)
 8008c0e:	a904      	add	r1, sp, #16
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7fd fd4b 	bl	80066ac <_printf_float>
 8008c16:	4607      	mov	r7, r0
 8008c18:	1c78      	adds	r0, r7, #1
 8008c1a:	d1d6      	bne.n	8008bca <_vfiprintf_r+0x19a>
 8008c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c1e:	07d9      	lsls	r1, r3, #31
 8008c20:	d405      	bmi.n	8008c2e <_vfiprintf_r+0x1fe>
 8008c22:	89ab      	ldrh	r3, [r5, #12]
 8008c24:	059a      	lsls	r2, r3, #22
 8008c26:	d402      	bmi.n	8008c2e <_vfiprintf_r+0x1fe>
 8008c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c2a:	f7fe faad 	bl	8007188 <__retarget_lock_release_recursive>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	065b      	lsls	r3, r3, #25
 8008c32:	f53f af1f 	bmi.w	8008a74 <_vfiprintf_r+0x44>
 8008c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c38:	e71e      	b.n	8008a78 <_vfiprintf_r+0x48>
 8008c3a:	ab03      	add	r3, sp, #12
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	462a      	mov	r2, r5
 8008c40:	4b05      	ldr	r3, [pc, #20]	@ (8008c58 <_vfiprintf_r+0x228>)
 8008c42:	a904      	add	r1, sp, #16
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7fd ffc9 	bl	8006bdc <_printf_i>
 8008c4a:	e7e4      	b.n	8008c16 <_vfiprintf_r+0x1e6>
 8008c4c:	08009500 	.word	0x08009500
 8008c50:	0800950a 	.word	0x0800950a
 8008c54:	080066ad 	.word	0x080066ad
 8008c58:	08008a0b 	.word	0x08008a0b
 8008c5c:	08009506 	.word	0x08009506

08008c60 <__sflush_r>:
 8008c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c68:	0716      	lsls	r6, r2, #28
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	d454      	bmi.n	8008d1a <__sflush_r+0xba>
 8008c70:	684b      	ldr	r3, [r1, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	dc02      	bgt.n	8008c7c <__sflush_r+0x1c>
 8008c76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	dd48      	ble.n	8008d0e <__sflush_r+0xae>
 8008c7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c7e:	2e00      	cmp	r6, #0
 8008c80:	d045      	beq.n	8008d0e <__sflush_r+0xae>
 8008c82:	2300      	movs	r3, #0
 8008c84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c88:	682f      	ldr	r7, [r5, #0]
 8008c8a:	6a21      	ldr	r1, [r4, #32]
 8008c8c:	602b      	str	r3, [r5, #0]
 8008c8e:	d030      	beq.n	8008cf2 <__sflush_r+0x92>
 8008c90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	0759      	lsls	r1, r3, #29
 8008c96:	d505      	bpl.n	8008ca4 <__sflush_r+0x44>
 8008c98:	6863      	ldr	r3, [r4, #4]
 8008c9a:	1ad2      	subs	r2, r2, r3
 8008c9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c9e:	b10b      	cbz	r3, 8008ca4 <__sflush_r+0x44>
 8008ca0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ca2:	1ad2      	subs	r2, r2, r3
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ca8:	6a21      	ldr	r1, [r4, #32]
 8008caa:	4628      	mov	r0, r5
 8008cac:	47b0      	blx	r6
 8008cae:	1c43      	adds	r3, r0, #1
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	d106      	bne.n	8008cc2 <__sflush_r+0x62>
 8008cb4:	6829      	ldr	r1, [r5, #0]
 8008cb6:	291d      	cmp	r1, #29
 8008cb8:	d82b      	bhi.n	8008d12 <__sflush_r+0xb2>
 8008cba:	4a2a      	ldr	r2, [pc, #168]	@ (8008d64 <__sflush_r+0x104>)
 8008cbc:	410a      	asrs	r2, r1
 8008cbe:	07d6      	lsls	r6, r2, #31
 8008cc0:	d427      	bmi.n	8008d12 <__sflush_r+0xb2>
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	6062      	str	r2, [r4, #4]
 8008cc6:	04d9      	lsls	r1, r3, #19
 8008cc8:	6922      	ldr	r2, [r4, #16]
 8008cca:	6022      	str	r2, [r4, #0]
 8008ccc:	d504      	bpl.n	8008cd8 <__sflush_r+0x78>
 8008cce:	1c42      	adds	r2, r0, #1
 8008cd0:	d101      	bne.n	8008cd6 <__sflush_r+0x76>
 8008cd2:	682b      	ldr	r3, [r5, #0]
 8008cd4:	b903      	cbnz	r3, 8008cd8 <__sflush_r+0x78>
 8008cd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cda:	602f      	str	r7, [r5, #0]
 8008cdc:	b1b9      	cbz	r1, 8008d0e <__sflush_r+0xae>
 8008cde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	d002      	beq.n	8008cec <__sflush_r+0x8c>
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f7ff f89e 	bl	8007e28 <_free_r>
 8008cec:	2300      	movs	r3, #0
 8008cee:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cf0:	e00d      	b.n	8008d0e <__sflush_r+0xae>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	47b0      	blx	r6
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	1c50      	adds	r0, r2, #1
 8008cfc:	d1c9      	bne.n	8008c92 <__sflush_r+0x32>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0c6      	beq.n	8008c92 <__sflush_r+0x32>
 8008d04:	2b1d      	cmp	r3, #29
 8008d06:	d001      	beq.n	8008d0c <__sflush_r+0xac>
 8008d08:	2b16      	cmp	r3, #22
 8008d0a:	d11e      	bne.n	8008d4a <__sflush_r+0xea>
 8008d0c:	602f      	str	r7, [r5, #0]
 8008d0e:	2000      	movs	r0, #0
 8008d10:	e022      	b.n	8008d58 <__sflush_r+0xf8>
 8008d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d16:	b21b      	sxth	r3, r3
 8008d18:	e01b      	b.n	8008d52 <__sflush_r+0xf2>
 8008d1a:	690f      	ldr	r7, [r1, #16]
 8008d1c:	2f00      	cmp	r7, #0
 8008d1e:	d0f6      	beq.n	8008d0e <__sflush_r+0xae>
 8008d20:	0793      	lsls	r3, r2, #30
 8008d22:	680e      	ldr	r6, [r1, #0]
 8008d24:	bf08      	it	eq
 8008d26:	694b      	ldreq	r3, [r1, #20]
 8008d28:	600f      	str	r7, [r1, #0]
 8008d2a:	bf18      	it	ne
 8008d2c:	2300      	movne	r3, #0
 8008d2e:	eba6 0807 	sub.w	r8, r6, r7
 8008d32:	608b      	str	r3, [r1, #8]
 8008d34:	f1b8 0f00 	cmp.w	r8, #0
 8008d38:	dde9      	ble.n	8008d0e <__sflush_r+0xae>
 8008d3a:	6a21      	ldr	r1, [r4, #32]
 8008d3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d3e:	4643      	mov	r3, r8
 8008d40:	463a      	mov	r2, r7
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b0      	blx	r6
 8008d46:	2800      	cmp	r0, #0
 8008d48:	dc08      	bgt.n	8008d5c <__sflush_r+0xfc>
 8008d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d5c:	4407      	add	r7, r0
 8008d5e:	eba8 0800 	sub.w	r8, r8, r0
 8008d62:	e7e7      	b.n	8008d34 <__sflush_r+0xd4>
 8008d64:	dfbffffe 	.word	0xdfbffffe

08008d68 <_fflush_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	690b      	ldr	r3, [r1, #16]
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	b913      	cbnz	r3, 8008d78 <_fflush_r+0x10>
 8008d72:	2500      	movs	r5, #0
 8008d74:	4628      	mov	r0, r5
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	b118      	cbz	r0, 8008d82 <_fflush_r+0x1a>
 8008d7a:	6a03      	ldr	r3, [r0, #32]
 8008d7c:	b90b      	cbnz	r3, 8008d82 <_fflush_r+0x1a>
 8008d7e:	f7fe f8d9 	bl	8006f34 <__sinit>
 8008d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0f3      	beq.n	8008d72 <_fflush_r+0xa>
 8008d8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d8c:	07d0      	lsls	r0, r2, #31
 8008d8e:	d404      	bmi.n	8008d9a <_fflush_r+0x32>
 8008d90:	0599      	lsls	r1, r3, #22
 8008d92:	d402      	bmi.n	8008d9a <_fflush_r+0x32>
 8008d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d96:	f7fe f9f6 	bl	8007186 <__retarget_lock_acquire_recursive>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	f7ff ff5f 	bl	8008c60 <__sflush_r>
 8008da2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008da4:	07da      	lsls	r2, r3, #31
 8008da6:	4605      	mov	r5, r0
 8008da8:	d4e4      	bmi.n	8008d74 <_fflush_r+0xc>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	059b      	lsls	r3, r3, #22
 8008dae:	d4e1      	bmi.n	8008d74 <_fflush_r+0xc>
 8008db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008db2:	f7fe f9e9 	bl	8007188 <__retarget_lock_release_recursive>
 8008db6:	e7dd      	b.n	8008d74 <_fflush_r+0xc>

08008db8 <__swbuf_r>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	460e      	mov	r6, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	b118      	cbz	r0, 8008dca <__swbuf_r+0x12>
 8008dc2:	6a03      	ldr	r3, [r0, #32]
 8008dc4:	b90b      	cbnz	r3, 8008dca <__swbuf_r+0x12>
 8008dc6:	f7fe f8b5 	bl	8006f34 <__sinit>
 8008dca:	69a3      	ldr	r3, [r4, #24]
 8008dcc:	60a3      	str	r3, [r4, #8]
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	071a      	lsls	r2, r3, #28
 8008dd2:	d501      	bpl.n	8008dd8 <__swbuf_r+0x20>
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	b943      	cbnz	r3, 8008dea <__swbuf_r+0x32>
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f000 f82a 	bl	8008e34 <__swsetup_r>
 8008de0:	b118      	cbz	r0, 8008dea <__swbuf_r+0x32>
 8008de2:	f04f 37ff 	mov.w	r7, #4294967295
 8008de6:	4638      	mov	r0, r7
 8008de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	6922      	ldr	r2, [r4, #16]
 8008dee:	1a98      	subs	r0, r3, r2
 8008df0:	6963      	ldr	r3, [r4, #20]
 8008df2:	b2f6      	uxtb	r6, r6
 8008df4:	4283      	cmp	r3, r0
 8008df6:	4637      	mov	r7, r6
 8008df8:	dc05      	bgt.n	8008e06 <__swbuf_r+0x4e>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f7ff ffb3 	bl	8008d68 <_fflush_r>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d1ed      	bne.n	8008de2 <__swbuf_r+0x2a>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	60a3      	str	r3, [r4, #8]
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	6022      	str	r2, [r4, #0]
 8008e12:	701e      	strb	r6, [r3, #0]
 8008e14:	6962      	ldr	r2, [r4, #20]
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d004      	beq.n	8008e26 <__swbuf_r+0x6e>
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	07db      	lsls	r3, r3, #31
 8008e20:	d5e1      	bpl.n	8008de6 <__swbuf_r+0x2e>
 8008e22:	2e0a      	cmp	r6, #10
 8008e24:	d1df      	bne.n	8008de6 <__swbuf_r+0x2e>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f7ff ff9d 	bl	8008d68 <_fflush_r>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d0d9      	beq.n	8008de6 <__swbuf_r+0x2e>
 8008e32:	e7d6      	b.n	8008de2 <__swbuf_r+0x2a>

08008e34 <__swsetup_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4b29      	ldr	r3, [pc, #164]	@ (8008edc <__swsetup_r+0xa8>)
 8008e38:	4605      	mov	r5, r0
 8008e3a:	6818      	ldr	r0, [r3, #0]
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	b118      	cbz	r0, 8008e48 <__swsetup_r+0x14>
 8008e40:	6a03      	ldr	r3, [r0, #32]
 8008e42:	b90b      	cbnz	r3, 8008e48 <__swsetup_r+0x14>
 8008e44:	f7fe f876 	bl	8006f34 <__sinit>
 8008e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4c:	0719      	lsls	r1, r3, #28
 8008e4e:	d422      	bmi.n	8008e96 <__swsetup_r+0x62>
 8008e50:	06da      	lsls	r2, r3, #27
 8008e52:	d407      	bmi.n	8008e64 <__swsetup_r+0x30>
 8008e54:	2209      	movs	r2, #9
 8008e56:	602a      	str	r2, [r5, #0]
 8008e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	e033      	b.n	8008ecc <__swsetup_r+0x98>
 8008e64:	0758      	lsls	r0, r3, #29
 8008e66:	d512      	bpl.n	8008e8e <__swsetup_r+0x5a>
 8008e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e6a:	b141      	cbz	r1, 8008e7e <__swsetup_r+0x4a>
 8008e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e70:	4299      	cmp	r1, r3
 8008e72:	d002      	beq.n	8008e7a <__swsetup_r+0x46>
 8008e74:	4628      	mov	r0, r5
 8008e76:	f7fe ffd7 	bl	8007e28 <_free_r>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	2300      	movs	r3, #0
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f043 0308 	orr.w	r3, r3, #8
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	b94b      	cbnz	r3, 8008eae <__swsetup_r+0x7a>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea4:	d003      	beq.n	8008eae <__swsetup_r+0x7a>
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f000 f909 	bl	80090c0 <__smakebuf_r>
 8008eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb2:	f013 0201 	ands.w	r2, r3, #1
 8008eb6:	d00a      	beq.n	8008ece <__swsetup_r+0x9a>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	60a2      	str	r2, [r4, #8]
 8008ebc:	6962      	ldr	r2, [r4, #20]
 8008ebe:	4252      	negs	r2, r2
 8008ec0:	61a2      	str	r2, [r4, #24]
 8008ec2:	6922      	ldr	r2, [r4, #16]
 8008ec4:	b942      	cbnz	r2, 8008ed8 <__swsetup_r+0xa4>
 8008ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008eca:	d1c5      	bne.n	8008e58 <__swsetup_r+0x24>
 8008ecc:	bd38      	pop	{r3, r4, r5, pc}
 8008ece:	0799      	lsls	r1, r3, #30
 8008ed0:	bf58      	it	pl
 8008ed2:	6962      	ldrpl	r2, [r4, #20]
 8008ed4:	60a2      	str	r2, [r4, #8]
 8008ed6:	e7f4      	b.n	8008ec2 <__swsetup_r+0x8e>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	e7f7      	b.n	8008ecc <__swsetup_r+0x98>
 8008edc:	2000002c 	.word	0x2000002c

08008ee0 <memmove>:
 8008ee0:	4288      	cmp	r0, r1
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	eb01 0402 	add.w	r4, r1, r2
 8008ee8:	d902      	bls.n	8008ef0 <memmove+0x10>
 8008eea:	4284      	cmp	r4, r0
 8008eec:	4623      	mov	r3, r4
 8008eee:	d807      	bhi.n	8008f00 <memmove+0x20>
 8008ef0:	1e43      	subs	r3, r0, #1
 8008ef2:	42a1      	cmp	r1, r4
 8008ef4:	d008      	beq.n	8008f08 <memmove+0x28>
 8008ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008efe:	e7f8      	b.n	8008ef2 <memmove+0x12>
 8008f00:	4402      	add	r2, r0
 8008f02:	4601      	mov	r1, r0
 8008f04:	428a      	cmp	r2, r1
 8008f06:	d100      	bne.n	8008f0a <memmove+0x2a>
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f12:	e7f7      	b.n	8008f04 <memmove+0x24>

08008f14 <_sbrk_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d06      	ldr	r5, [pc, #24]	@ (8008f30 <_sbrk_r+0x1c>)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	602b      	str	r3, [r5, #0]
 8008f20:	f7f9 f99a 	bl	8002258 <_sbrk>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_sbrk_r+0x1a>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_sbrk_r+0x1a>
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	20000468 	.word	0x20000468

08008f34 <memcpy>:
 8008f34:	440a      	add	r2, r1
 8008f36:	4291      	cmp	r1, r2
 8008f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f3c:	d100      	bne.n	8008f40 <memcpy+0xc>
 8008f3e:	4770      	bx	lr
 8008f40:	b510      	push	{r4, lr}
 8008f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f4a:	4291      	cmp	r1, r2
 8008f4c:	d1f9      	bne.n	8008f42 <memcpy+0xe>
 8008f4e:	bd10      	pop	{r4, pc}

08008f50 <__assert_func>:
 8008f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f52:	4614      	mov	r4, r2
 8008f54:	461a      	mov	r2, r3
 8008f56:	4b09      	ldr	r3, [pc, #36]	@ (8008f7c <__assert_func+0x2c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	68d8      	ldr	r0, [r3, #12]
 8008f5e:	b954      	cbnz	r4, 8008f76 <__assert_func+0x26>
 8008f60:	4b07      	ldr	r3, [pc, #28]	@ (8008f80 <__assert_func+0x30>)
 8008f62:	461c      	mov	r4, r3
 8008f64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f68:	9100      	str	r1, [sp, #0]
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	4905      	ldr	r1, [pc, #20]	@ (8008f84 <__assert_func+0x34>)
 8008f6e:	f000 f86f 	bl	8009050 <fiprintf>
 8008f72:	f000 f903 	bl	800917c <abort>
 8008f76:	4b04      	ldr	r3, [pc, #16]	@ (8008f88 <__assert_func+0x38>)
 8008f78:	e7f4      	b.n	8008f64 <__assert_func+0x14>
 8008f7a:	bf00      	nop
 8008f7c:	2000002c 	.word	0x2000002c
 8008f80:	08009556 	.word	0x08009556
 8008f84:	08009528 	.word	0x08009528
 8008f88:	0800951b 	.word	0x0800951b

08008f8c <_calloc_r>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	fba1 5402 	umull	r5, r4, r1, r2
 8008f92:	b93c      	cbnz	r4, 8008fa4 <_calloc_r+0x18>
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7fe ffbb 	bl	8007f10 <_malloc_r>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	b928      	cbnz	r0, 8008faa <_calloc_r+0x1e>
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	220c      	movs	r2, #12
 8008fa6:	6002      	str	r2, [r0, #0]
 8008fa8:	e7f9      	b.n	8008f9e <_calloc_r+0x12>
 8008faa:	462a      	mov	r2, r5
 8008fac:	4621      	mov	r1, r4
 8008fae:	f7fe f86c 	bl	800708a <memset>
 8008fb2:	e7f5      	b.n	8008fa0 <_calloc_r+0x14>

08008fb4 <__ascii_mbtowc>:
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	b901      	cbnz	r1, 8008fba <__ascii_mbtowc+0x6>
 8008fb8:	a901      	add	r1, sp, #4
 8008fba:	b142      	cbz	r2, 8008fce <__ascii_mbtowc+0x1a>
 8008fbc:	b14b      	cbz	r3, 8008fd2 <__ascii_mbtowc+0x1e>
 8008fbe:	7813      	ldrb	r3, [r2, #0]
 8008fc0:	600b      	str	r3, [r1, #0]
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	1e10      	subs	r0, r2, #0
 8008fc6:	bf18      	it	ne
 8008fc8:	2001      	movne	r0, #1
 8008fca:	b002      	add	sp, #8
 8008fcc:	4770      	bx	lr
 8008fce:	4610      	mov	r0, r2
 8008fd0:	e7fb      	b.n	8008fca <__ascii_mbtowc+0x16>
 8008fd2:	f06f 0001 	mvn.w	r0, #1
 8008fd6:	e7f8      	b.n	8008fca <__ascii_mbtowc+0x16>

08008fd8 <_realloc_r>:
 8008fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	4680      	mov	r8, r0
 8008fde:	4615      	mov	r5, r2
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	b921      	cbnz	r1, 8008fee <_realloc_r+0x16>
 8008fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	4611      	mov	r1, r2
 8008fea:	f7fe bf91 	b.w	8007f10 <_malloc_r>
 8008fee:	b92a      	cbnz	r2, 8008ffc <_realloc_r+0x24>
 8008ff0:	f7fe ff1a 	bl	8007e28 <_free_r>
 8008ff4:	2400      	movs	r4, #0
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffc:	f000 f8c5 	bl	800918a <_malloc_usable_size_r>
 8009000:	4285      	cmp	r5, r0
 8009002:	4606      	mov	r6, r0
 8009004:	d802      	bhi.n	800900c <_realloc_r+0x34>
 8009006:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800900a:	d8f4      	bhi.n	8008ff6 <_realloc_r+0x1e>
 800900c:	4629      	mov	r1, r5
 800900e:	4640      	mov	r0, r8
 8009010:	f7fe ff7e 	bl	8007f10 <_malloc_r>
 8009014:	4607      	mov	r7, r0
 8009016:	2800      	cmp	r0, #0
 8009018:	d0ec      	beq.n	8008ff4 <_realloc_r+0x1c>
 800901a:	42b5      	cmp	r5, r6
 800901c:	462a      	mov	r2, r5
 800901e:	4621      	mov	r1, r4
 8009020:	bf28      	it	cs
 8009022:	4632      	movcs	r2, r6
 8009024:	f7ff ff86 	bl	8008f34 <memcpy>
 8009028:	4621      	mov	r1, r4
 800902a:	4640      	mov	r0, r8
 800902c:	f7fe fefc 	bl	8007e28 <_free_r>
 8009030:	463c      	mov	r4, r7
 8009032:	e7e0      	b.n	8008ff6 <_realloc_r+0x1e>

08009034 <__ascii_wctomb>:
 8009034:	4603      	mov	r3, r0
 8009036:	4608      	mov	r0, r1
 8009038:	b141      	cbz	r1, 800904c <__ascii_wctomb+0x18>
 800903a:	2aff      	cmp	r2, #255	@ 0xff
 800903c:	d904      	bls.n	8009048 <__ascii_wctomb+0x14>
 800903e:	228a      	movs	r2, #138	@ 0x8a
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	f04f 30ff 	mov.w	r0, #4294967295
 8009046:	4770      	bx	lr
 8009048:	700a      	strb	r2, [r1, #0]
 800904a:	2001      	movs	r0, #1
 800904c:	4770      	bx	lr
	...

08009050 <fiprintf>:
 8009050:	b40e      	push	{r1, r2, r3}
 8009052:	b503      	push	{r0, r1, lr}
 8009054:	4601      	mov	r1, r0
 8009056:	ab03      	add	r3, sp, #12
 8009058:	4805      	ldr	r0, [pc, #20]	@ (8009070 <fiprintf+0x20>)
 800905a:	f853 2b04 	ldr.w	r2, [r3], #4
 800905e:	6800      	ldr	r0, [r0, #0]
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	f7ff fce5 	bl	8008a30 <_vfiprintf_r>
 8009066:	b002      	add	sp, #8
 8009068:	f85d eb04 	ldr.w	lr, [sp], #4
 800906c:	b003      	add	sp, #12
 800906e:	4770      	bx	lr
 8009070:	2000002c 	.word	0x2000002c

08009074 <__swhatbuf_r>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	460c      	mov	r4, r1
 8009078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907c:	2900      	cmp	r1, #0
 800907e:	b096      	sub	sp, #88	@ 0x58
 8009080:	4615      	mov	r5, r2
 8009082:	461e      	mov	r6, r3
 8009084:	da0d      	bge.n	80090a2 <__swhatbuf_r+0x2e>
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800908c:	f04f 0100 	mov.w	r1, #0
 8009090:	bf14      	ite	ne
 8009092:	2340      	movne	r3, #64	@ 0x40
 8009094:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009098:	2000      	movs	r0, #0
 800909a:	6031      	str	r1, [r6, #0]
 800909c:	602b      	str	r3, [r5, #0]
 800909e:	b016      	add	sp, #88	@ 0x58
 80090a0:	bd70      	pop	{r4, r5, r6, pc}
 80090a2:	466a      	mov	r2, sp
 80090a4:	f000 f848 	bl	8009138 <_fstat_r>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	dbec      	blt.n	8009086 <__swhatbuf_r+0x12>
 80090ac:	9901      	ldr	r1, [sp, #4]
 80090ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090b6:	4259      	negs	r1, r3
 80090b8:	4159      	adcs	r1, r3
 80090ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090be:	e7eb      	b.n	8009098 <__swhatbuf_r+0x24>

080090c0 <__smakebuf_r>:
 80090c0:	898b      	ldrh	r3, [r1, #12]
 80090c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c4:	079d      	lsls	r5, r3, #30
 80090c6:	4606      	mov	r6, r0
 80090c8:	460c      	mov	r4, r1
 80090ca:	d507      	bpl.n	80090dc <__smakebuf_r+0x1c>
 80090cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	2301      	movs	r3, #1
 80090d6:	6163      	str	r3, [r4, #20]
 80090d8:	b003      	add	sp, #12
 80090da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090dc:	ab01      	add	r3, sp, #4
 80090de:	466a      	mov	r2, sp
 80090e0:	f7ff ffc8 	bl	8009074 <__swhatbuf_r>
 80090e4:	9f00      	ldr	r7, [sp, #0]
 80090e6:	4605      	mov	r5, r0
 80090e8:	4639      	mov	r1, r7
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7fe ff10 	bl	8007f10 <_malloc_r>
 80090f0:	b948      	cbnz	r0, 8009106 <__smakebuf_r+0x46>
 80090f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f6:	059a      	lsls	r2, r3, #22
 80090f8:	d4ee      	bmi.n	80090d8 <__smakebuf_r+0x18>
 80090fa:	f023 0303 	bic.w	r3, r3, #3
 80090fe:	f043 0302 	orr.w	r3, r3, #2
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	e7e2      	b.n	80090cc <__smakebuf_r+0xc>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	6020      	str	r0, [r4, #0]
 800910a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	9b01      	ldr	r3, [sp, #4]
 8009112:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009116:	b15b      	cbz	r3, 8009130 <__smakebuf_r+0x70>
 8009118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800911c:	4630      	mov	r0, r6
 800911e:	f000 f81d 	bl	800915c <_isatty_r>
 8009122:	b128      	cbz	r0, 8009130 <__smakebuf_r+0x70>
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f023 0303 	bic.w	r3, r3, #3
 800912a:	f043 0301 	orr.w	r3, r3, #1
 800912e:	81a3      	strh	r3, [r4, #12]
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	431d      	orrs	r5, r3
 8009134:	81a5      	strh	r5, [r4, #12]
 8009136:	e7cf      	b.n	80090d8 <__smakebuf_r+0x18>

08009138 <_fstat_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d07      	ldr	r5, [pc, #28]	@ (8009158 <_fstat_r+0x20>)
 800913c:	2300      	movs	r3, #0
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	4611      	mov	r1, r2
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	f7f9 f85f 	bl	8002208 <_fstat>
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d102      	bne.n	8009154 <_fstat_r+0x1c>
 800914e:	682b      	ldr	r3, [r5, #0]
 8009150:	b103      	cbz	r3, 8009154 <_fstat_r+0x1c>
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	bd38      	pop	{r3, r4, r5, pc}
 8009156:	bf00      	nop
 8009158:	20000468 	.word	0x20000468

0800915c <_isatty_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d06      	ldr	r5, [pc, #24]	@ (8009178 <_isatty_r+0x1c>)
 8009160:	2300      	movs	r3, #0
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	f7f9 f85e 	bl	8002228 <_isatty>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_isatty_r+0x1a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_isatty_r+0x1a>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20000468 	.word	0x20000468

0800917c <abort>:
 800917c:	b508      	push	{r3, lr}
 800917e:	2006      	movs	r0, #6
 8009180:	f000 f834 	bl	80091ec <raise>
 8009184:	2001      	movs	r0, #1
 8009186:	f7f8 ffef 	bl	8002168 <_exit>

0800918a <_malloc_usable_size_r>:
 800918a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800918e:	1f18      	subs	r0, r3, #4
 8009190:	2b00      	cmp	r3, #0
 8009192:	bfbc      	itt	lt
 8009194:	580b      	ldrlt	r3, [r1, r0]
 8009196:	18c0      	addlt	r0, r0, r3
 8009198:	4770      	bx	lr

0800919a <_raise_r>:
 800919a:	291f      	cmp	r1, #31
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4605      	mov	r5, r0
 80091a0:	460c      	mov	r4, r1
 80091a2:	d904      	bls.n	80091ae <_raise_r+0x14>
 80091a4:	2316      	movs	r3, #22
 80091a6:	6003      	str	r3, [r0, #0]
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	bd38      	pop	{r3, r4, r5, pc}
 80091ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091b0:	b112      	cbz	r2, 80091b8 <_raise_r+0x1e>
 80091b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091b6:	b94b      	cbnz	r3, 80091cc <_raise_r+0x32>
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 f831 	bl	8009220 <_getpid_r>
 80091be:	4622      	mov	r2, r4
 80091c0:	4601      	mov	r1, r0
 80091c2:	4628      	mov	r0, r5
 80091c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c8:	f000 b818 	b.w	80091fc <_kill_r>
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d00a      	beq.n	80091e6 <_raise_r+0x4c>
 80091d0:	1c59      	adds	r1, r3, #1
 80091d2:	d103      	bne.n	80091dc <_raise_r+0x42>
 80091d4:	2316      	movs	r3, #22
 80091d6:	6003      	str	r3, [r0, #0]
 80091d8:	2001      	movs	r0, #1
 80091da:	e7e7      	b.n	80091ac <_raise_r+0x12>
 80091dc:	2100      	movs	r1, #0
 80091de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091e2:	4620      	mov	r0, r4
 80091e4:	4798      	blx	r3
 80091e6:	2000      	movs	r0, #0
 80091e8:	e7e0      	b.n	80091ac <_raise_r+0x12>
	...

080091ec <raise>:
 80091ec:	4b02      	ldr	r3, [pc, #8]	@ (80091f8 <raise+0xc>)
 80091ee:	4601      	mov	r1, r0
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	f7ff bfd2 	b.w	800919a <_raise_r>
 80091f6:	bf00      	nop
 80091f8:	2000002c 	.word	0x2000002c

080091fc <_kill_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d07      	ldr	r5, [pc, #28]	@ (800921c <_kill_r+0x20>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	4611      	mov	r1, r2
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	f7f8 ff9d 	bl	8002148 <_kill>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d102      	bne.n	8009218 <_kill_r+0x1c>
 8009212:	682b      	ldr	r3, [r5, #0]
 8009214:	b103      	cbz	r3, 8009218 <_kill_r+0x1c>
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	bd38      	pop	{r3, r4, r5, pc}
 800921a:	bf00      	nop
 800921c:	20000468 	.word	0x20000468

08009220 <_getpid_r>:
 8009220:	f7f8 bf8a 	b.w	8002138 <_getpid>

08009224 <_init>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	bf00      	nop
 8009228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922a:	bc08      	pop	{r3}
 800922c:	469e      	mov	lr, r3
 800922e:	4770      	bx	lr

08009230 <_fini>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr
